!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !MODULE: gc_chunk_mod
!
! !DESCRIPTION: Module GC\_CHUNK\_MOD is the module that contains 
!  the GEOS-Chem chunk code init, run and finalize methods.
!\\
!\\
! !INTERFACE: 
!      
      MODULE GC_CHUNK_MOD
!
! !USES:
!      
      USE GC_TYPE_MOD          

      IMPLICIT NONE
      PRIVATE
!
! !PUBLIC MEMBER FUNCTIONS:
!
      PUBLIC  :: GC_CHUNK_INIT
      PUBLIC  :: GC_CHUNK_RUN
      PUBLIC  :: GC_CHUNK_FINAL
!
! !PRIVATE MEMBER FUNCTIONS:
!
      PRIVATE :: ITS_TIME
      PRIVATE :: CONVERT_UNITS
      PRIVATE :: PRINT_DIAG_COL
!
! !REVISION HISTORY:
!  22 Jun 2009 - R. Yantosca & P. Le Sager - Chunkized & cleaned up.
!  28 Oct 2009 - R. Yantosca - Various updates in module routines
!  14 Dec 2009 - R. Yantosca - GC_CHUNK_RUN now accepts TRACER_1d in [mol/mol]
!                              mixing ratio.  Apropos unit conversions are
!                              now done w/in GC_CHUNK_RUN internally.
!  14 Apr 2010 - R. Yantosca - Removed hardwireing from GC_CHUNK_INIT
!  08 Jul 2010 - R. Yantosca - Add GC_DIAG private type for diag printout
!  08 Jul 2010 - R. Yantosca - Add DIAG_COL object for diag printout
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !PRIVATE TYPES:
!
      ! Derived type for chunk diagnostic output (for code validation)
      TYPE GC_DIAG
         LOGICAL                    :: DO_PRINT     ! Should we print out?
         INTEGER                    :: N_DIAG       ! # of diag quantities
         INTEGER                    :: COUNT        ! Counter for averaging
         CHARACTER(LEN=10), POINTER :: NAME(:)      ! Tracer names
         REAL*8,            POINTER :: TRACER(:,:)  ! Tracer concentrations
         CHARACTER(LEN=40)          :: FILENAME     ! File name for output
         INTEGER                    :: LUN          ! File unit # for output
      END TYPE GC_DIAG

      ! Derived type object for saving concentration diagnostics
      TYPE(GC_DIAG)      :: DIAG_COL

      CONTAINS
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: gc_chunk_run
!
! !DESCRIPTION: Routine GC\_CHUNK\_RUN is the driver for the following 
! operations:
! \begin{itemize}
! \item Planetary boundary layer mixing
! \item Cloud convection
! \item Dry deposition
! \item Emissions
! \item Chemistry
! \item Wet Depositon
! \end{itemize}
!
! !INTERFACE:
!
      SUBROUTINE GC_CHUNK_RUN( 

           !------------------------------------------------------------
           ! Inputs -- lon, lat, time, date, dimension info
           !
     &     TIMING,       GEOLOC,        

           !------------------------------------------------------------
           ! Inputs -- Met fields and related quantities
           !
     &     MET_1d,       

           !------------------------------------------------------------
           ! Inputs -- Emissions & drydep
           !
     &     ID_EMISSION,  EMISSION_1d,   ALK_EMIS_1d,  N_DENS_1d,     

           !------------------------------------------------------------
           ! Inputs -- Land types and leaf area indices
           !
     &     IREG_1d,      ILAND_1d,      IUSE_1d,      LAI_1d,

           !------------------------------------------------------------
           ! Inputs -- Objects for ID flags,, logical switches, etc.
           !
     &     ID_SPECIES,   ID_TRACERS,    COEF,         ID_DRYDEP,   
     &     ID_WETDEP,    OPTIONS,       IDENT,        DIMINFO,

           !------------------------------------------------------------
           ! Inputs & Input/Outputs -- Chunk fields extracted 
           !                           from the internal state
           !
     &     ORVC_TERP,    ORVC_SESQ,     GPROD,        APROD,       
     &     OXIDANTS_1d,  CSPEC_FULL_1d, H2O2s_1d,     SO2s_1d,
     &     AIR_MASS_1d,  OH_MASS_1d,    

           !------------------------------------------------------------
           ! Input/Outputs
           !
     &     TRACER_1d, 

           !------------------------------------------------------------
           ! Outputs
           !
     &     DD_VEL_1d,    DD_FREQ_1d,    DD_FLUX_1d,   WETD_LOSS_1d,
     &     RC )
!
! !USES:
!
      ! PBL mixing routines
      USE PBL_MIXING_MOD,       ONLY : COMPUTE_PBL
      USE PBL_MIXING_MOD,       ONLY : DO_PBL_MIXING

      ! Cloud convection routines
      USE CLOUD_CONVECTION_MOD, ONLY : DO_GEOS5_CONVECTION

      ! Dry deposition routines
      USE DRYDEP_MOD,           ONLY : DO_DRYDEP
      USE DRYDEP_MOD,           ONLY : DIAG_DRYDEP_FLUX

      ! Chemistry routines
      USE GEOS_CHEM,            ONLY : GEOS_CHEM
!      USE CHEMDR,           ONLY : CHEMDR

      ! Wet deposition routines
      USE WETDEP_MOD,           ONLY : COMPUTE_UPDRAFT_FSOL
      USE WETDEP_MOD,           ONLY : INIT_WETDEP_FIELDS
      USE WETDEP_MOD,           ONLY : MAKE_QQ
      USE WETDEP_MOD,           ONLY : WETDEP

#     include "smv_dimension.h"      ! Dimensions for common blocks
#     include "comode_loop.h"        ! SMVGEAR variables
#     include "smv_errcode.h"        ! Error codes
!
! !INPUT PARAMETERS:
!
      !--------------------------------------------
      ! Lon, lat, date, time
      !--------------------------------------------
      TYPE(GC_TIME),   INTENT(IN) :: TIMING       ! Time, date, place values
      TYPE(GC_GEOLOC), INTENT(IN) :: GEOLOC       ! Lon, lat, localtime

      !--------------------------------------------
      ! Met fields -- scalars
      !--------------------------------------------
      TYPE(GC_MET_1d), INTENT(IN) :: MET_1d       ! Object w/ chunk met fields

      !--------------------------------------------
      ! Emissions & drydep quantities
      ! NOTE: We may rewrite this such that
      ! all emissions come in as kg/box
      !--------------------------------------------
      INTEGER, INTENT(IN)    :: ID_EMISSION(:)    ! CTM tracer #'s 
      REAL*8,  INTENT(IN)    :: EMISSION_1d(:,:)  ! Emissions [kg species]
      REAL*8,  INTENT(IN)    :: ALK_EMIS_1d(:,:)  ! Seasalt alkalinity [kg]
      REAL*8,  INTENT(IN)    :: N_DENS_1d(:,:)    ! Seasalt density [#/m3]

      !--------------------------------------------
      ! Land types & leaf area indices
      !--------------------------------------------
      INTEGER,           INTENT(IN) :: IREG_1d    ! # of Olson land types/box
      INTEGER,           INTENT(IN) :: ILAND_1d(:)! Olson land indices
      INTEGER,           INTENT(IN) :: IUSE_1d(:) ! Frac (%%) of land usage
      REAL*8,            INTENT(IN) :: LAI_1d(:)  ! Leaf area index [cm2/cm2]

      !--------------------------------------------
      ! Objects for tracer & species ID's
      !--------------------------------------------
      TYPE(ID_SPEC),     INTENT(IN) :: ID_SPECIES ! ID's for chem species
      TYPE(ID_TRAC),     INTENT(IN) :: ID_TRACERS ! ID's for advected tracers
      TYPE(SPEC_2_TRAC), INTENT(IN) :: COEF       ! Species <--> tracer mapping
      TYPE(ID_DRYD),     INTENT(IN) :: ID_DRYDEP  ! ID's for drydep species
      TYPE(ID_WETD),     INTENT(IN) :: ID_WETDEP  ! ID's for wetdep species
      TYPE(GC_OPTIONS),  INTENT(IN) :: OPTIONS    ! On/off switches for options
      TYPE(GC_DIMS),     INTENT(IN) :: DIMINFO    ! Various dims for quantities
      TYPE(GC_IDENT), INTENT(INOUT) :: IDENT      ! Info from ESMF

      !--------------------------------------------
      ! Chunk quantities from the internal state
      !--------------------------------------------
      TYPE(SCOX_1d),     INTENT(IN) :: OXIDANTS_1d  ! Obj w/ 1-D oxidant fields
!
! !INPUT/OUTPUT PARAMETERS:
!
      REAL*8,  INTENT(INOUT) :: TRACER_1d(:,:)      ! Tracer mass [kg/box]

      !--------------------------------------------
      ! Chunk quantities from the internal state
      !--------------------------------------------
      REAL*8,  INTENT(INOUT) :: ORVC_TERP(:)        ! monoterpene
      REAL*8,  INTENT(INOUT) :: ORVC_SESQ(:)        ! sesqterpene
      REAL*8,  INTENT(INOUT) :: GPROD(:,:,:)        ! Gas mass ratio 
      REAL*8,  INTENT(INOUT) :: APROD(:,:,:)        ! Aerosol mass ratio 
      REAL*8,  INTENT(INOUT) :: CSPEC_FULL_1d(:,:)  ! Prior chem concentration
      REAL*8,  INTENT(INOUT) :: H2O2s_1d(:)         ! H2O2 [v/v] and SO2 [v/v] 
      REAL*8,  INTENT(INOUT) :: SO2s_1d(:)          !  conc's after aqueous 
                                                    !  rxns are applied.  These
                                                    !  are computed in the 
                                                    !  sulfate chemistry module
                                                    !  and passed here.
      REAL*8,  INTENT(INOUT) :: AIR_MASS_1d(:)      ! Air mass & mass-weighted
      REAL*8,  INTENT(INOUT) :: OH_MASS_1d(:)       !  OH for the mean OH
                                                    !  diagnostic

      !--------------------------------------------
      ! Diagnostic Quantities
      !--------------------------------------------
      REAL*8,  INTENT(INOUT) :: WETD_LOSS_1d(:,:)   ! Wetdep'd tracer  [kg/s]
!
! !OUTPUT PARAMETERS:
!
      !--------------------------------------------
      ! Diagnostic Quantities
      !--------------------------------------------
      REAL*8,  INTENT(OUT)   :: DD_VEL_1d(:)        ! Drydep velocity  [m/s]
      REAL*8,  INTENT(OUT)   :: DD_FREQ_1d(:)       ! Drydep frequency [1/s]
      REAL*8,  INTENT(OUT)   :: DD_FLUX_1d(:)       ! Drydep fluxes    [kg/s]

      ! Return code   
      INTEGER, INTENT(OUT)   :: RC                  
!
! !REMARKS:
!  Met field inputs from the MET_1d object have SI units.  Some GEOS-Chem 
!  lower-level routines require nonstandard units.  Units are converted and 
!  stored in local variables within this module.
!
! !REVISION HISTORY:
!  22 Jun 2009 - R. Yantosca & P. Le Sager - Chunkized & cleaned up.
!  15 Jul 2009 - R. Yantosca - Added calls to PBL mixing, drydep, wetdep
!  10 Aug 2009 - P. Le Sager & R. Yantosca - Pass H2O2s and SO2s as args.
!  24 Aug 2009 - R. Yantosca - Now pass time & date values in TIMING object.
!  25 Sep 2009 - R. Yantosca - Now pass met fields etc. in SI units
!  25 Sep 2009 - R. Yantosca - Removed DELP argument, now compute it here
!  20 Oct 2009 - R. Yantosca - Now pass total ozone chunk via arg list
!  21 Oct 2009 - R. Yantosca - Now pass AIR_MASS_1d, OH_MASS_1d via arg list
!  22 Oct 2009 - R. Yantosca - Now pass WETD_LOSS_1d via arg list
!  28 Oct 2009 - R. Yantosca - Now pass lon/lat info via GEOLOC object
!  06 Nov 2009 - R. Yantosca - Now pass chunk met fields via MET_1d object
!  14 Dec 2009 - R. Yantosca - Now input TRACER_1d as [mol/mol], and do the
!                              relevant unit converions internally
!  29 Apr 2010 - R. Yantosca - Now get FRCLND, TO3 from the MET_1d object
!  14 May 2010 - R. Yantosca - Now pass TIMING, GEOLOC, DIMINFO to CHEMDR_COL
!  14 May 2010 - R. Yantosca - Add extra safety checks
!  17 May 2010 - R. Yantosca - Now get L_CHUNK from the DIMINFO object
!  17 May 2010 - R. Yantosca - Now pass DIMINFO to DO_PBL_MIXING
!  01 Jun 2010 - R. Yantosca - Now pass DIMINFO to CONVERT_UNITS
!  02 Jun 2010 - R. Yantosca - Now use IDENT%VERBOSE to trigger debug output
!  02 Jun 2010 - R. Yantosca - Removed reference to type SCOX, it's obsolete
!  02 Jun 2010 - R. Yantosca - Removed reference to type SCOX_1d, which
!                              has since been moved to gc_type_mod.F
!  03 Jun 2010 - R. Yantosca - Now call CHEMDR_COL from chemdr_mod.F
!  08 Jul 2010 - R. Yantosca - Archive tracers, OH in DIAG_COL for printout
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      ! Flags
      LOGICAL :: DO_SCAVENGING
      LOGICAL :: DO_UNIT_CONVERSION
      LOGICAL :: ITS_TIME_FOR_CHEM
      LOGICAL :: ITS_TIME_FOR_DYN 

      ! Location and time variables
      REAL*8  :: LAT                            ! Latitude
      REAL*8  :: T_ELAPSED                      ! Elapsed simulation time [min]
      REAL*8  :: TS_CHEM                        ! Chemistry timestep [min]
      REAL*8  :: TS_DYN                         ! Dynamic timestep [min]

      ! Array dimensions etc.
      INTEGER :: L, N                           ! Loop indices
      INTEGER :: L_CHUNK                       ! # of grid boxes in chunk
      INTEGER :: N_DRYDEP                       ! # of drydep species
      INTEGER :: N_TRACERS                      ! # of tracers
      INTEGER :: NTYPE                          ! Max # of Olson types/box

      ! Local met field variables: scalars
      ! NOTE: "_GC" denotes GEOS-Chem fields w/ non-SI units
      REAL*8  :: AREA_M2_1d                                   ! [m2]
      REAL*8  :: AREA_CM2_GC                                  ! [cm2]
      REAL*8  :: ALBD_1d                                      ! [unitless]
      REAL*8  :: CLDFRC_1d                                    ! [unitless]
      REAL*8  :: FRCLND_1d                                    ! [unitless]
      REAL*8  :: HFLUX_1d                                     ! [W/m2]
      REAL*8  :: LWI_1d                                       ! [unitless]
      REAL*8  :: PBLH_1d                                      ! [m]
      REAL*8  :: PRECCON_1d_GC                                ! [mm/day]
      REAL*8  :: PRECTOT_1d_GC                                ! [mm/day] 
      REAL*8  :: SUNCOS_1d                                    ! [unitless]
      REAL*8  :: TO3_1d                                       ! [DU]
      REAL*8  :: TROPP_1d_GC                                  ! [hPa]
      REAL*8  :: TS_1d                                        ! [K]
      REAL*8  :: RADSWG_1d                                    ! [W/m2]
      REAL*8  :: SST_1d                                       ! [K]
      REAL*8  :: U10M_1d                                      ! [m/s]
      REAL*8  :: USTAR_1d                                     ! [m/s]
      REAL*8  :: UVALBEDO_1d                                  ! [unitless]
      REAL*8  :: V10M_1d                                      ! [m/s]
      REAL*8  :: Z0_1d                                        ! [m]

      ! Local met field variables: vectors
      ! NOTE: "_GC" denotes GEOS-Chem fields w/ non-SI units     
      REAL*8  :: AD_1d         ( SIZE( MET_1d%AD         ) )  ! [kg]     
      REAL*8  :: AIRVOL_1d     ( SIZE( MET_1d%AIRVOL     ) )  ! [m3]  
      REAL*8  :: AIRDENS_1d_GC ( SIZE( MET_1d%AIRDENS    ) )  ! [molec/cm3]
      REAL*8  :: BXHEIGHT_1d   ( SIZE( MET_1d%BXHEIGHT   ) )  ! [m]
      REAL*8  :: CLDF_1d       ( SIZE( MET_1d%CLDF       ) )  ! [unitless]    
      REAL*8  :: CMFMC_1d      ( SIZE( MET_1d%CMFMC      ) )  ! [kg/m2/s]   
      REAL*8  :: DELP_1d_GC    ( SIZE( MET_1d%PMID       ) )  ! [hPa]
      REAL*8  :: DTRAIN_1d     ( SIZE( MET_1d%DTRAIN     ) )  ! [kg/m2/s] 
      REAL*8  :: MOISTQ_1d_GC  ( SIZE( MET_1d%MOISTQ     ) )  ! [g/kg/day]
      REAL*8  :: OPTD_1d       ( SIZE( MET_1d%OPTD       ) )  ! [unitless]   
      REAL*8  :: PMID_1d_GC    ( SIZE( MET_1d%PMID       ) )  ! [hPa]    
      REAL*8  :: PEDGE_1d_GC   ( SIZE( MET_1d%PEDGE      ) )  ! [hPa]
      REAL*8  :: RH_1d         ( SIZE( MET_1d%RH         ) )  ! [unitless]
      REAL*8  :: RH_1d_GC      ( SIZE( MET_1d%RH         ) )  ! [%]
      REAL*8  :: SPHU_1d_GC    ( SIZE( MET_1d%SPHU       ) )  ! [g/kg] 
      REAL*8  :: T_1d          ( SIZE( MET_1d%T          ) )  ! [K]           
      REAL*8  :: VOLUME_1d_GC  ( SIZE( MET_1d%AIRVOL     ) )  ! [cm3]

      ! PBL and tropopause quantities
      INTEGER :: IMIX                                         ! [unitless]
      REAL*8  :: FPBL                                         ! [unitless]
      REAL*8  :: PBL_TOP_hPa                                  ! [hPa]
      REAL*8  :: PBL_TOP_L                                    ! [# levels]
      REAL*8  :: PBL_TOP_m                                    ! [m]
      REAL*8  :: PBL_THICK                                    ! [hPa]
      REAL*8  :: FRAC_OF_PBL   ( DIMINFO%L_CHUNK          )  ! [unitless]
      REAL*8  :: FRAC_UNDER_PBL( DIMINFO%L_CHUNK          )  ! [unitless]
      LOGICAL :: ITS_IN_PBL    ( DIMINFO%L_CHUNK          )  ! [T or F]
      LOGICAL :: ITS_IN_TROP   ( DIMINFO%L_CHUNK          )  ! [T or F]
  
      ! Wet deposition and cloud scavenging quantities
      REAL*8  :: FSOL( DIMINFO%L_CHUNK, DIMINFO%N_TRACERS )

      ! Other variables
      REAL*8  :: ORIG_TERP, ORIG_SESQ
      INTEGER :: IUL

      !=================================================================
      !                   %%%% INITIALIZATION %%%%
      !=================================================================

      ! Put this routine name on error trace stack
      IDENT%LEV               = IDENT%LEV + 1
      IDENT%I_AM( IDENT%LEV ) = 'GC_CHUNK_RUN'

      ! LUN for stdout redirect
      IUL                = IDENT%STDOUT_LUN

      ! Define various array dimensions
      NTYPE              = SIZE( ILAND_1d    )    ! Max # of Olson types
      L_CHUNK           = DIMINFO%L_CHUNK       ! # of boxes in chunk
      N_TRACERS          = DIMINFO%N_TRACERS      ! Number of tracers
      N_DRYDEP           = DIMINFO%N_DRYDEP       ! # of drydep species

      ! Safety check #1: Invalid L_CHUNK
      IF ( L_CHUNK < 1 .or. L_CHUNK > MAX_CHUNK ) THEN
         WRITE( IDENT%ERRMSG, 200 ) L_CHUNK, MAX_CHUNK
         RC = SMV_FAILURE
         RETURN
      ENDIF

      ! Safety check #2: Invalid N_TRACERS
      IF ( N_TRACERS < 1 .or. N_TRACERS > MAX_TRACERS ) THEN
         WRITE( IDENT%ERRMSG, 210 ) N_TRACERS, MAX_TRACERS
         RC = SMV_FAILURE
         RETURN
      ENDIF

      ! Safety check #3: N_TRACERS > SIZE( TRACER_1d, 2 )
      IF ( N_TRACERS > SIZE( TRACER_1d, 2 ) ) THEN
         WRITE( IDENT%ERRMSG, 220 ) N_TRACERS
         RC = SMV_FAILURE
         RETURN
      ENDIF

      ! Safety check #4: N_DRYDEP > N_TRACERS
      IF ( N_DRYDEP > N_TRACERS ) THEN
         WRITE( IDENT%ERRMSG, 230 ) N_DRYDEP, N_TRACERS
         RC = SMV_FAILURE
         RETURN
      ENDIF

      ! Formats
 200  FORMAT( 'Error: L_CHUNK=',  i5, ' but MAX_CHUNK=',          i5 )
 210  FORMAT( 'Error: N_TRACERS=', i5, ' but MAX_TRACERS=',         i5 )
 220  FORMAT( 'Error: N_TRACERS=', i5, ' but SIZE(TRACER_1d,2) = ', i5 )
 230  FORMAT( 'Error: N_DRYDEP= ', i5, ' but N_TRACERS = ',         i5 )

      ! Local met field variables: scalars
      AREA_M2_1d         = MET_1d%AREA_M2              ! [m2]
      AREA_CM2_GC        = MET_1d%AREA_M2  * 1d4       ! [cm2]
      ALBD_1d            = MET_1d%ALBD                 ! [unitless]
      CLDFRC_1d          = MET_1d%CLDFRC               ! [unitless]
      FRCLND_1d          = MET_1d%FRCLND               ! [unitless]
      HFLUX_1d           = MET_1d%HFLUX                ! [W/m2]
      LWI_1d             = MET_1d%LWI                  ! [unitless]
      PBLH_1d            = MET_1d%PBLH                 ! [m]
      PRECCON_1d_GC      = MET_1d%PRECCON  * 8.64d4    ! [mm/day]
      PRECTOT_1d_GC      = MET_1d%PRECTOT  * 8.64d4    ! [mm/day]
      SUNCOS_1d          = MET_1d%SUNCOS               ! [unitless]
      TO3_1d             = MET_1d%TO3                  ! [unitless]
      TROPP_1d_GC        = MET_1d%TROPP    / 1d2       ! [hPa]
      TS_1d              = MET_1d%TS                   ! [K]
      RADSWG_1d          = MET_1d%RADSWG               ! [W/m2]  
      SST_1d             = MET_1d%SST                  ! [K]
      U10M_1d            = MET_1d%U10M                 ! [m/s]
      USTAR_1d           = MET_1d%USTAR                ! [m/s]
      UVALBEDO_1d        = MET_1d%UVALBEDO             ! [unitless]  
      V10M_1d            = MET_1d%V10M                 ! [m/s]
      Z0_1d              = MET_1d%Z0                   ! [m]

      ! Local met field variables: vectors
      AD_1d              = MET_1d%AD                   ! [kg]
      AIRDENS_1d_GC      = MET_1d%AIRDENS  / 1d6       ! [molec/cm3]
      AIRVOL_1d          = MET_1d%AIRVOL               ! [m3]
      BXHEIGHT_1d        = MET_1d%BXHEIGHT             ! [m]
      CLDF_1d            = MET_1d%CLDF                 ! [unitless]
      CMFMC_1d           = MET_1d%CMFMC                ! [kg/m2/s]
      DTRAIN_1d          = MET_1d%DTRAIN               ! [kg/m2/s]
      MOISTQ_1d_GC       = MET_1d%MOISTQ   / 8.64d7    ! [g/kg/day]
      OPTD_1d            = MET_1d%OPTD                 ! [unitless]   
      PMID_1d_GC         = MET_1d%PMID     / 1d2       ! [hPa]
      PEDGE_1d_GC        = MET_1d%PEDGE    / 1d2       ! [hPa] 
      SPHU_1d_GC         = MET_1d%SPHU     * 1d3       ! [g/kg]
      RH_1d              = MET_1d%RH                   ! [unitless]
      RH_1d_GC           = MET_1d%RH       * 1d2       ! [%]
      T_1d               = MET_1d%T                    ! [K] 
      VOLUME_1d_GC       = MET_1d%AIRVOL   * 1d6       ! [cm3]

      ! Compute the DELP_1d_GC (delta-pressure) array [hPa]
      DO L = 1, L_CHUNK
         DELP_1d_GC(L)   = PEDGE_1d_GC(L) - PEDGE_1d_GC(L+1)  
      ENDDO

      ! Initialize FSOL (fraction of tracer scavenged in updrafts)
      FSOL               = 0d0

      ! Timing info
      T_ELAPSED = TIMING%T_ELAPSED
      TS_CHEM   = TIMING%TS_CHEM
      TS_DYN    = TIMING%TS_DYN

      ! Is it time for chemistry or dynamics?
      ITS_TIME_FOR_CHEM  = ITS_TIME( T_ELAPSED, TS_CHEM )
      ITS_TIME_FOR_DYN   = ITS_TIME( T_ELAPSED, TS_DYN  )

      ! Arrays to denote if we are in the tropopause
      DO L = 1, L_CHUNK
         ITS_IN_TROP(L)  = ( PEDGE_1d_GC(L) > TROPP_1d_GC )
      ENDDO

      ! Determine if we need to do unit conversion or not
      DO_UNIT_CONVERSION = ( OPTIONS%USE_PBL_MIXING .or.
     &                       OPTIONS%USE_CONVECTION       )

      ! Determine if wet scavenging will take place
      DO_SCAVENGING      = ( OPTIONS%USE_WETDEP     .or.
     &                       OPTIONS%USE_CONVECTION       ) 

      ! Zero output variables
      DD_VEL_1d          = 0d0
      DD_FREQ_1d         = 0d0
      DD_FLUX_1d         = 0d0
      WETD_LOSS_1d       = 0d0

      !=================================================================
      !                %%%% DYNAMICS (part 1) %%%%
      !=================================================================
      IF ( ITS_TIME_FOR_DYN ) THEN

         !---------------------------------------
         ! Compute PBL-related quantities
         !---------------------------------------
         CALL COMPUTE_PBL( IDENT       = IDENT,          
     &                     L_CHUNK    = L_CHUNK,
     &                     BXHEIGHT    = BXHEIGHT_1d,
     &                     PBL         = PBLH_1d,        
     &                     PEDGE       = PEDGE_1d_GC, 
     &                     IMIX        = IMIX,        
     &                     FPBL        = FPBL,           
     &                     PBL_TOP_L   = PBL_TOP_L,   
     &                     PBL_TOP_hPa = PBL_TOP_hPa, 
     &                     PBL_TOP_m   = PBL_TOP_m,      
     &                     PBL_THICK   = PBL_THICK,   
     &                     F_OF_PBL    = FRAC_OF_PBL, 
     &                     F_UNDER_TOP = FRAC_UNDER_PBL, 
     &                     ITS_IN_PBL  = ITS_IN_PBL,
     &                     RC          = RC )
         
         ! Exit w/ error if unsuccessful
         IF ( RC /= SMV_SUCCESS ) RETURN

         !---------------------------------------
         ! Setup for wet scavenging & updraft
         ! scavenging (if necessary)
         !---------------------------------------

         ! NOTE: Turning off wet deposition will also turn off scavenging
         ! of soluble tracer in updrafts by the cloud convection routine
         IF ( DO_SCAVENGING ) THEN

            ! Initialize the fields C_H2O, CLDLIQ, CLDICE, Vud.  These are
            ! used to compute the soluble fraction of tracer in updraft
            ! scavenging (in cloud convection), as well as in the wet 
            ! deposition routines below.
            CALL INIT_WETDEP_FIELDS( IDENT    = IDENT,
     &                               L_CHUNK = L_CHUNK, 
     &                               T        = T_1d, 
     &                               P        = PMID_1d_GC, 
     &                               LWI      = LWI_1d, 
     &                               RC       = RC )
         
            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

            ! Compute the soluble fraction of tracer for updraft scavenging
            ! (pass this to the cloud convection routines below)
            CALL COMPUTE_UPDRAFT_FSOL( IDENT    = IDENT,
     &                                 DIMINFO  = DIMINFO,
     &                                 BXHEIGHT = BXHEIGHT_1d, 
     &                                 T        = T_1d, 
     &                                 H2O2s    = H2O2s_1d,    
     &                                 SO2s     = SO2s_1d, 
     &                                 F        = FSOL,
     &                                 RC       = RC )

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

         ENDIF

         !==============================================================
         !          %%%% PLANETARY BOUNDARY LAYER MIXING %%%%
         !
         !   NOTE: This can be turned off for use w/in the GEOS-5 GCM
         !   as the GEOS-5 dynamical core provides this funcionality!
         !==============================================================
         IF ( OPTIONS%USE_PBL_MIXING ) THEN

            !------------------------------------
            ! Mix advected tracers
            !------------------------------------

            ! Do the mixing
            CALL DO_PBL_MIXING( IDENT   = IDENT, 
     &                          DIMINFO = DIMINFO, 
     &                          AD      = AD_1d,   
     &                          IMIX    = IMIX,      
     &                          FPBL    = FPBL,  
     &                          TS_DYN  = TS_DYN,
     &                          TRACER  = TRACER_1d,
     &                          RC      = RC ) 

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

            !------------------------------------
            ! Mix non-advected tracers
            !------------------------------------

            ! The totals are all in the first layer, so save these
            ! in separate variables before we do the PBL mixing
            ORIG_TERP = ORVC_TERP(1)
            ORIG_SESQ = ORVC_SESQ(1)

            ! Do the mixing
            DO L = 1, L_CHUNK
               IF ( ITS_IN_PBL(L) ) THEN 
                  ORVC_TERP(L) = FRAC_OF_PBL(L) * ORIG_TERP
                  ORVC_SESQ(L) = FRAC_OF_PBL(L) * ORIG_SESQ
               ENDIF
            ENDDO

         ENDIF

!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!%%% NOTE: for testing purposes, call cloud convection after chemistry.
!%%% this will avoid lifting aerosol tracers before they are sent to the
!%%% chemical solver.  Good enough for testing, but we may need to think
!%%% about the order of operations later on. (bmy, 7/17/09)
!%%%
!%%%         !==============================================================
!%%%         !                 %%%% CLOUD CONVECTION %%%%
!%%%         !==============================================================
!%%%         IF ( OPTIONS%USE_CONVECTION ) THEN
!%%%            if ( doPrint ) print*, '### DOING cloud convection'
!%%%
!%%%            ! Do the cloud convection.  For compatibility w/ the old
!%%%            ! code, pass CMFMC(2:L_CHUNK+1).  CMFMC for GEOS-5 is defined 
!%%%            ! on level edges now. (bmy, 7/16/09)
!%%%            CALL DO_GEOS5_CONVECTION( AD_1d,    
!%%%     &                                AREA_M2_1d,    
!%%%     &                                CMFMC_1d(2:L_CHUNK+1), 
!%%%     &                                DTRAIN_1d, 
!%%%     &                                FSOL,       
!%%%     &                                LAT,       
!%%%     &                                PEDGE_1d_GC,   
!%%%     &                                TS_DYN, 
!%%%     &                                TRACER_1d, 
!%%%     &                                RC )
!%%%
!%%%            ! Return if unsuccessful
!%%%            IF ( RC /= SMV_SUCCESS ) RETURN
!%%%         ENDIF
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

      ENDIF

      !=================================================================
      !                 %%%% TIME FOR CHEMISTRY  %%%%
      !=================================================================
      IF ( ITS_TIME_FOR_CHEM ) THEN

         !==============================================================
         !                %%%% DRY DEPOSITION %%%%
         !==============================================================
         IF ( OPTIONS%USE_DRYDEP ) THEN

            ! Compute drydep velocities [cm/s] & frequencies [1/s]
            CALL DO_DRYDEP( IDENT    = IDENT,          
     &                      N_DRYDEP = N_DRYDEP,     
     &                      NTYPE    = NTYPE,     
     &                      AD       = AD_1d(1),       
     &                      AIRVOL   = AIRVOL_1d(1), 
     &                      ALBD     = ALBD_1d,   
     &                      BXHEIGHT = BXHEIGHT_1d(1), 
     &                      CLDFRC   = CLDFRC_1d,    
     &                      HFLUX    = HFLUX_1d,  
     &                      IREG     = IREG_1d,        
     &                      ILAND    = ILAND_1d,     
     &                      IUSE     = IUSE_1d,   
     &                      RADSWG   = RADSWG_1d,      
     &                      RH       = RH_1d(1),     
     &                      SUNCOS   = SUNCOS_1d, 
     &                      TS       = TS_1d,          
     &                      USTAR    = USTAR_1d,     
     &                      XYLAI    = LAI_1d,    
     &                      Z0       = Z0_1d,          
     &                      ZH       = PBL_TOP_m,    
     &                      DD_VEL   = DD_VEL_1d, 
     &                      DD_FREQ  = DD_FREQ_1d,     
     &                      RC       = RC )

            ! Exit w/  error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN
         ENDIF

         !==============================================================
         !                     %%%% CHEMISTRY %%%%
         !==============================================================
         IF ( OPTIONS%USE_CHEMISTRY ) THEN

            !------------------------------------
            ! Convert units [mol/mol] -> [kg]
            !------------------------------------
            CALL CONVERT_UNITS( IDENT   = IDENT,
     &                          DIMINFO = DIMINFO,
     &                          IFLAG   = 2, 
     &                          COEF    = COEF, 
     &                          AD      = AD_1d, 
     &                          TRACER  = TRACER_1d, 
     &                          RC      = RC ) 
            
            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

            !------------------------------------
            ! Call chunk chemistry driver
            !------------------------------------
            CALL CHEMDR_COL( COEF           = COEF,         
     &                       DIMINFO        = DIMINFO,
     &                       GEOLOC         = GEOLOC,
     &                       ID_DRYDEP      = ID_DRYDEP,    
     &                       ID_EMISSION    = ID_EMISSION,  
     &                       ID_SPECIES     = ID_SPECIES,   
     &                       ID_TRACERS     = ID_TRACERS,     
     &                       ID_WETDEP      = ID_WETDEP,    
     &                       IDENT          = IDENT,
     &                       OPTIONS        = OPTIONS,               
     &                       TIMING         = TIMING,
     &                       AD_1d          = AD_1d,        
     &                       AIRDENS_1d     = AIRDENS_1d_GC,  
     &                       AIRVOL_1d      = AIRVOL_1d,    
     &                       ALBD_1d        = ALBD_1d,      
     &                       AREA_CM2_1d    = AREA_CM2_GC,  
     &                       BXHEIGHT_1d    = BXHEIGHT_1d,    
     &                       CLDF_1d        = CLDF_1d,      
     &                       DELP_1d        = DELP_1d_GC,      
     &                       FRCLND_1d      = FRCLND_1d,    
     &                       OPTD_1d        = OPTD_1d,        
     &                       PEDGE_1d       = PEDGE_1d_GC,  
     &                       PMID_1d        = PMID_1d_GC,     
     &                       RH_1d          = RH_1d_GC,     
     &                       SPHU_1d        = SPHU_1d_GC,     
     &                       SUNCOS_1d      = SUNCOS_1d,    
     &                       SST_1d         = SST_1d,       
     &                       T_1d           = T_1d,         
     &                       TS_1d          = TS_1d,          
     &                       U10m_1d        = U10M_1d,      
     &                       UVALBEDO_1d    = UVALBEDO_1d,  
     &                       V10M_1d        = V10M_1d,      
     &                       VOLUME_1d      = VOLUME_1d_GC, 
     &                       FRAC_OF_PBL    = FRAC_OF_PBL,  
     &                       FRAC_UNDER_PBL = FRAC_UNDER_PBL,
     &                       ITS_IN_PBL     = ITS_IN_PBL,   
     &                       ITS_IN_TROP    = ITS_IN_TROP,
     &                       EMISSION_1d    = EMISSION_1d,    
     &                       DD_FREQ_1d     = DD_FREQ_1d,   
     &                       ALK_EMIS_1d    = ALK_EMIS_1d,  
     &                       N_DENS_1d      = N_DENS_1d,    
     &                       TO3_1d         = TO3_1d,       
     &                       ORVC_TERP      = ORVC_TERP,    
     &                       ORVC_SESQ      = ORVC_SESQ,      
     &                       GPROD          = GPROD,        
     &                       APROD          = APROD,        
     &                       OXIDANTS_1d    = OXIDANTS_1d,  
     &                       CSPEC_FULL_1d  = CSPEC_FULL_1d,  
     &                       AIR_MASS_1d    = AIR_MASS_1d,  
     &                       OH_MASS_1d     = OH_MASS_1d,
     &                       TRACER_1d      = TRACER_1d,    
     &                       H2O2s          = H2O2s_1d,       
     &                       SO2s           = SO2s_1d,      
     &                       RC             = RC )
   
            ! Return w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN   

            !------------------------------------
            ! Convert units [kg] -> [mol/mol]
            !------------------------------------
            CALL CONVERT_UNITS( IDENT   = IDENT,
     &                          DIMINFO = DIMINFO, 
     &                          IFLAG   = 1, 
     &                          COEF    = COEF, 
     &                          AD      = AD_1d, 
     &                          TRACER  = TRACER_1d, 
     &                          RC      = RC ) 

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

            !------------------------------------
            ! Compute dry deposition fluxes
            !------------------------------------
            CALL DIAG_DRYDEP_FLUX( IDENT          = IDENT,         
     &                             COEF           = COEF,           
     &                             CSPEC          = CSPEC_FULL_1d,
     &                             FRAC_UNDER_PBL = FRAC_UNDER_PBL, 
     &                             N_DRYDEP       = N_DRYDEP,      
     &                             TS_DRYD        = TS_CHEM,       
     &                             VOLUME         = VOLUME_1d_GC,  
     &                             DD_FLUX        = DD_FLUX_1d,    
     &                             RC             = RC )

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN
 
         ENDIF
      ENDIF

      !=================================================================
      !                  %%%% DYNAMICS (part 2) %%%%
      !=================================================================
      IF ( ITS_TIME_FOR_DYN ) THEN

!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!%%% NOTE: for testing purposes, call cloud convection after chemistry.
!%%% this will avoid lifting aerosol tracers before they are sent to the
!%%% chemical solver.  Good enough for testing, but we may need to think
!%%% about the order of operations later on. (bmy, 7/17/09)

         !==============================================================
         !                 %%%% CLOUD CONVECTION %%%%
         !
         !   NOTE: This can be turned off for use w/in the GEOS-5 GCM
         !   as the GEOS-5 dynamical core provides this funcionality!
         !==============================================================
         IF ( OPTIONS%USE_CONVECTION ) THEN

            ! Do the cloud convection.  For compatibility w/ the old
            ! code, pass CMFMC(2:L_CHUNK+1).  CMFMC for GEOS-5 is defined 
            ! on level edges now. (bmy, 7/16/09)
            CALL DO_GEOS5_CONVECTION( IDENT   = IDENT,
     &                                DIMINFO = DIMINFO,
     &                                AD      = AD_1d,    
     &                                AREA_M2 = AREA_M2_1d,    
     &                                CMFMC   = CMFMC_1d(2:L_CHUNK+1), 
     &                                DTRAIN  = DTRAIN_1d, 
     &                                F       = FSOL,       
     &                                LAT     = LAT,       
     &                                PEDGE   = PEDGE_1d_GC,   
     &                                TS_DYN  = TS_DYN, 
     &                                Q       = TRACER_1d, 
     &                                RC      = RC )

            ! Return if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN
         ENDIF
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

         !==============================================================
         !        %%%% WET DEPOSITION -- RAINOUT & WASHOUT %%%%
         !==============================================================
         IF ( OPTIONS%USE_WETDEP ) THEN

            !----------------------------------
            ! Create PDOWN and QQ fields
            !----------------------------------
            CALL MAKE_QQ( IDENT    = IDENT,         
     &                    DIMINFO  = DIMINFO,
     &                    LS       = .TRUE.,        
     &                    AD       = AD_1d,        
     &                    AIRVOL   = AIRVOL_1d,     
     &                    BXHEIGHT = BXHEIGHT_1d,   
     &                    MOISTQ   = MOISTQ_1d_GC, 
     &                    PRECTOT  = PRECTOT_1d_GC, 
     &                    PRECCON  = PRECCON_1d_GC, 
     &                    RC       = RC )

            ! Exit w/ error if necessary
            IF ( RC /= SMV_SUCCESS ) RETURN

            !----------------------------------
            ! Convert units [mol/mol] -> [kg]
            !----------------------------------
            CALL CONVERT_UNITS( IDENT   = IDENT,
     &                          DIMINFO = DIMINFO,
     &                          IFLAG   = 2, 
     &                          COEF    = COEF, 
     &                          AD      = AD_1d, 
     &                          TRACER  = TRACER_1d, 
     &                          RC      = RC ) 

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

            !----------------------------------
            ! Do wet deposition
            !----------------------------------
            CALL WETDEP( IDENT    = IDENT,   
     &                   DIMINFO  = DIMINFO,  
     &                   LS       = .TRUE.,    
     &                   BXHEIGHT = BXHEIGHT_1d,  
     &                   TK       = T_1d,    
     &                   TS_DYN   = TS_DYN,    
     &                   H2O2s    = H2O2s_1d, 
     &                   SO2s     = SO2s_1d, 
     &                   TRACER   = TRACER_1d, 
     &                   LOSS     = WETD_LOSS_1d, 
     &                   RC       = RC )

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN
      
            !----------------------------------
            ! Convert units [kg] -> [mol/mol]
            !----------------------------------
            CALL CONVERT_UNITS( IDENT   = IDENT, 
     &                          DIMINFO = DIMINFO,
     &                          IFLAG   = 1, 
     &                          COEF    = COEF, 
     &                          AD      = AD_1d, 
     &                          TRACER  = TRACER_1d, 
     &                          RC      = RC )  

            ! Exit w/ error if unsuccessful
            IF ( RC /= SMV_SUCCESS ) RETURN

         ENDIF
      ENDIF

      !================================================================
      ! Archive data into the DIAG_COL object for diagnostic output
      !================================================================
      IF ( DIAG_COL%DO_PRINT .and. IDENT%VERBOSE ) THEN

         ! Archive N_TRACERS transported tracers
         DO N = 1, N_TRACERS
            DIAG_COL%TRACER(:,N) = DIAG_COL%TRACER(:,N) + 
     &                             TRACER_1d      (:,N)
         ENDDO

         ! Archive OH into the N_TRACERS+1th slot
         N                       = N_TRACERS + 1
         DIAG_COL%TRACER(:,N)    = DIAG_COL%TRACER(:,N) + 
     &                             CSPEC_FULL_1d(:,ID_SPECIES%OH)

         ! Increment the counter
         DIAG_COL%COUNT          = DIAG_COL%COUNT + 1
      ENDIF

      !================================================================
      ! Succesful return!
      !================================================================

      ! Set error code to success
      RC                      = SMV_SUCCESS

      ! Remove this routine name from error trace stack
      IDENT%I_AM( IDENT%LEV ) = ''
      IDENT%LEV               = IDENT%LEV - 1

      END SUBROUTINE GC_CHUNK_RUN
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: gc_chunk_init
!
! !DESCRIPTION: Subroutine GC\_CHUNK\_INIT calls the various 
!  initialization routines that read the setup files for the GEOS-Chem
!  chunk code.  Also, ID flags for advected tracers, chemical species,
!  dry deposition species and wet deposition species are defined.
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE GC_CHUNK_INIT( IDENT,       OPTIONS,    L_CHUNK,    
     &                           N_TRACERS,   N_MEMBERS,  N_DRYDEP,    
     &                           N_WETDEP,    TS_CHEM,    TRACER_NAME, 
     &                           ID_SPECIES,  ID_TRACERS, COEF,        
     &                           ID_DRYDEP,   ID_WETDEP,  N_SPECIES,
     &                           N_REACTIONS, N_JV,       RC )   
!
! !USES:
!
      USE DRYDEP_MOD,  ONLY : INIT_DRYDEP
      USE WETDEP_MOD,  ONLY : INIT_WETDEP
      
      IMPLICIT NONE

#     include "smv_dimension.h"  ! Dimensions for common blocks
#     include "comode_loop.h"    ! SMVGEAR common blocks
#     include "smv_errcode.h"    ! Error codes
#     include "smv_physconst.h"  ! Physical constants
!
! !INPUT PARAMETERS:
!
      ! Object with logical flags
      TYPE(GC_OPTIONS),  INTENT(IN)    :: OPTIONS

      ! Number of boxes in the atmospheric chunk
      INTEGER,           INTENT(IN)    :: L_CHUNK

      ! Number of advected tracers
      INTEGER,           INTENT(IN)    :: N_TRACERS

      ! Max # of species per chemical family
      INTEGER,           INTENT(IN)    :: N_MEMBERS

      ! Chemistry timestep [minutes]
      REAL*8,            INTENT(IN)    :: TS_CHEM

      ! Names of advected tracers
      CHARACTER(LEN=*),  INTENT(IN)    :: TRACER_NAME(N_TRACERS)
!
! !INPUT/OUTPUT PARAMETERS:
!
      ! Object for Identification info from the Gridded Component
      TYPE(GC_IDENT),    INTENT(INOUT) :: IDENT

      ! Object for ID flags for SMVGEAR chemical species
      TYPE(ID_SPEC),     INTENT(INOUT) :: ID_SPECIES

      ! Object for ID flags for advected tracers
      TYPE(ID_TRAC),     INTENT(INOUT) :: ID_TRACERS

      ! Object for # of species per advected tracer, etc.
      TYPE(SPEC_2_TRAC), INTENT(INOUT) :: COEF

      ! Object for ID flags for dry-deposited and wet-deposited tracers
      TYPE(ID_DRYD),     INTENT(INOUT) :: ID_DRYDEP
      TYPE(ID_WETD),     INTENT(INOUT) :: ID_WETDEP
!
! !OUTPUT PARAMETERS:
!
      ! Number of dry deposited and wet-deposited species
      INTEGER,           INTENT(OUT)   :: N_DRYDEP
      INTEGER,           INTENT(OUT)   :: N_WETDEP

      ! Number of chemical species, reactions, and photolysis reactions
      INTEGER,           INTENT(OUT)   :: N_SPECIES
      INTEGER,           INTENT(OUT)   :: N_REACTIONS
      INTEGER,           INTENT(OUT)   :: N_JV

      ! Return code
      INTEGER,           INTENT(OUT)   :: RC 
!
! !REVISION HISTORY: 
!  22 Jun 2009 - R. Yantosca - Initial version
!  15 Jul 2009 - R. Yantosca - Now call init routines for drydep & wetdep
!  14 Apr 2010 - R. Yantosca - Now de-hardwire definition of ID_TRACERS
!  16 Apr 2010 - R. Yantosca - Now pass back N_SPECIES, N_REACTIONS as outputs
!  23 Apr 2010 - R. Yantosca - Added IDENT to the argument list
!  23 Apr 2010 - R. Yantosca - Redirect stdout to a log file
!  23 Apr 2010 - R. Yantosca - Write advected tracer info to stdout
!  03 May 2010 - R. Yantosca - Remove references to SEASALT_MOD, DIAG_OH_MOD
!  06 May 2010 - R. Yantosca - Now make sure that ID_SPECIES contains the
!                              indices in CSPEC for active & inactive species
!  08 Jul 2010 - R. Yantosca - Archive tracers, OH in DIAG_COL for printout
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      ! Scalars
      INTEGER            :: C, L, N
      INTEGER            :: IU_LOG
      CHARACTER(LEN=4)   :: PETSTR
      CHARACTER(LEN=255) :: LOGFILE

      ! Arrays
      CHARACTER(LEN=14)  :: DRYDEP_NAME(MAX_TRACERS)

      !=================================================================
      ! Initialization
      !=================================================================

      ! Allocate pointer fields
      ALLOCATE( COEF%SPEC_COEF( N_TRACERS, N_MEMBERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%SPEC_COEF = 0d0

      ALLOCATE( COEF%SPEC_ID( N_TRACERS, N_MEMBERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%SPEC_ID = 0

      ALLOCATE( COEF%SPEC_EMITTED( N_TRACERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%SPEC_EMITTED = 0

      ALLOCATE( COEF%SPEC_PER_TRAC( N_TRACERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%SPEC_PER_TRAC = 0

      ALLOCATE( COEF%TRAC_COEF( N_TRACERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%TRAC_COEF = 0d0

      ALLOCATE( COEF%MOLWT_KG( N_TRACERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%MOLWT_KG = 0d0

      ALLOCATE( COEF%XNUMOL( N_TRACERS ), STAT=RC )
      IF ( RC /= SMV_SUCCESS ) RETURN
      COEF%XNUMOL = 0d0

      ! Initialize drydep name
      DRYDEP_NAME(:)          = ''

      ! Put this routine name on error trace stack
      IDENT%LEV               = IDENT%LEV + 1
      IDENT%I_AM( IDENT%LEV ) = 'GC_CHUNK_INIT'

      ! Unit for logfile redirect
      IU_LOG                  = IDENT%STDOUT_LUN

      !=================================================================
      ! Read chemistry mechanism
      !=================================================================
      
      ! Read from data file mglob.dat
      CALL READER( IDENT, .TRUE., TS_CHEM, RC )
      IF ( RC /= SMV_SUCCESS ) RETURN

      ! Read "globchem.dat" chemistry mechanism
      CALL READCHEM( IDENT, RC )
      IF ( RC /= SMV_SUCCESS ) RETURN

      ! Pass # of species and reactions back as output
      N_SPECIES   = NGAS
      N_REACTIONS = NTRATES(NCS) 

      !=================================================================
      ! Return w/ error if the LISOPOH species is undefined
      !=================================================================
      IF ( OPTIONS%USE_SEC_ORG_AEROSOLS ) THEN
         IF ( ILISOPOH == 0 ) THEN
            RC           = SMV_FAILURE
            IDENT%ERRMSG = 'LISOPOH must be defined for SOA!'
            RETURN
         ENDIF
      ENDIF

      !=================================================================
      ! Set ID flags for advected tracers
      !=================================================================
      DO N = 1, N_TRACERS

         SELECT CASE( TRIM( TRACER_NAME(N) ) )
            CASE( 'NOx', 'NOX' )
               ID_TRACERS%NOx  = N
            CASE( 'Ox',  'OX'  )
               ID_TRACERS%Ox   = N
            CASE( 'PAN'  )
               ID_TRACERS%PAN  = N
            CASE( 'CO'   )
               ID_TRACERS%CO   = N
            CASE( 'ALK4' )
               ID_TRACERS%ALK4 = N
            CASE( 'ISOP' )
               ID_TRACERS%ISOP = N
            CASE( 'HNO3' )
               ID_TRACERS%HNO3 = N
            CASE( 'H2O2' )
               ID_TRACERS%H2O2 = N
            CASE( 'ACET' )
               ID_TRACERS%ACET = N
            CASE( 'MEK'  )
               ID_TRACERS%MEK  = N
            CASE( 'ALD2' )
               ID_TRACERS%ALD2 = N
            CASE( 'RCHO' )
               ID_TRACERS%RCHO = N
            CASE( 'MVK'  )
               ID_TRACERS%MVK  = N
            CASE( 'MACR' )
               ID_TRACERS%MACR = N
            CASE( 'PMN'  )
               ID_TRACERS%PMN  = N
            CASE( 'PPN'  )
               ID_TRACERS%PPN  = N
            CASE( 'R4N2' )
               ID_TRACERS%R4N2 = N
            CASE( 'PRPE' )
               ID_TRACERS%PRPE = N
            CASE( 'C3H8' )
               ID_TRACERS%C3H8 = N
            CASE( 'CH2O' )
               ID_TRACERS%CH2O = N
            CASE( 'C2H6' )
               ID_TRACERS%C2H6 = N
            CASE( 'N2O5' )
               ID_TRACERS%N2O5 = N
            CASE( 'HNO4' )
               ID_TRACERS%HNO4 = N
            CASE( 'MP'   )
               ID_TRACERS%MP   = N
            CASE( 'DMS'  )
               ID_TRACERS%DMS  = N
            CASE( 'SO2'  )
               ID_TRACERS%SO2  = N
            CASE( 'SO4'  )
               ID_TRACERS%SO4  = N
            CASE( 'SO4s' )
               ID_TRACERS%SO4s = N
            CASE( 'MSA'  )
               ID_TRACERS%MSA  = N
            CASE( 'NH3'  )
               ID_TRACERS%NH3  = N
            CASE( 'NH4'  )
               ID_TRACERS%NH4  = N
            CASE( 'NIT'  )
               ID_TRACERS%NIT  = N
            CASE( 'NITs' )
               ID_TRACERS%NITs = N
            CASE( 'BCPI' )
               ID_TRACERS%BCPI = N
            CASE( 'OCPI' )
               ID_TRACERS%OCPI = N
            CASE( 'BCPO' )
               ID_TRACERS%BCPO = N
            CASE( 'OCPO' )
               ID_TRACERS%OCPO = N
            CASE( 'ALPH' )
               ID_TRACERS%ALPH = N
            CASE( 'LIMO' )
               ID_TRACERS%LIMO = N
            CASE( 'ALCO' )
               ID_TRACERS%ALCO = N
            CASE( 'SOG1' )
               ID_TRACERS%SOG1 = N
            CASE( 'SOG2' )
               ID_TRACERS%SOG2 = N
            CASE( 'SOG3' )
               ID_TRACERS%SOG3 = N
            CASE( 'SOG4' )
               ID_TRACERS%SOG4 = N
            CASE( 'SOA1' )
               ID_TRACERS%SOA1 = N
            CASE( 'SOA2' )
               ID_TRACERS%SOA2 = N
            CASE( 'SOA3' )
               ID_TRACERS%SOA3 = N
            CASE( 'SOA4' )
               ID_TRACERS%SOA4 = N
            CASE( 'DST1' )
               ID_TRACERS%DST1 = N
            CASE( 'DST2' )
               ID_TRACERS%DST2 = N
            CASE( 'DST3' )
               ID_TRACERS%DST3 = N
            CASE( 'DST4' )
               ID_TRACERS%DST4 = N
            CASE( 'SALA' )
               ID_TRACERS%SALA = N
            CASE( 'SALC' )
               ID_TRACERS%SALC = N
            CASE DEFAULT
               ! Nothing
         END SELECT
      ENDDO

      !=================================================================
      ! Set ID flags for chemistry species (active & inactive)
      !=================================================================
      DO N = 1, NTSPEC(NCS)

         SELECT CASE( TRIM( NAMEGAS(N) ) )
            CASE( 'A3O2'      )  
               ID_SPECIES%A3O2     = N
            CASE( 'ACET'      )    
               ID_SPECIES%ACET     = N
            CASE( 'ACTA'      )    
               ID_SPECIES%ACTA     = N
            CASE( 'ALD2'      )    
               ID_SPECIES%ALD2     = N
            CASE( 'ALK4'      )    
               ID_SPECIES%ALK4     = N
            CASE( 'ATO2'      )    
               ID_SPECIES%ATO2     = N
            CASE( 'B3O2'      )    
               ID_SPECIES%B3O2     = N
            CASE( 'C2H6'      )    
               ID_SPECIES%C2H6     = N
            CASE( 'C3H8'      )    
               ID_SPECIES%C3H8     = N
            CASE( 'CH2O'      )    
               ID_SPECIES%CH2O     = N
            CASE( 'CH4'       )    
               ID_SPECIES%CH4      = N
            CASE( 'CO'        )    
               ID_SPECIES%CO       = N
            CASE( 'CO2'       )    
               ID_SPECIES%CO2      = N
            CASE( 'DMS'       )    
               ID_SPECIES%DMS      = N
            CASE( 'DRYCH2O'   )    
               ID_SPECIES%DRYCH2O  = N
            CASE( 'DRYDEP'    )    
               ID_SPECIES%DRYDEP   = N
            CASE( 'DRYH2O2'   )    
               ID_SPECIES%DRYH2O2  = N
            CASE( 'DRYHNO3'   )    
               ID_SPECIES%DRYHNO3  = N
            CASE( 'DRYN2O5'   )    
               ID_SPECIES%DRYN2O5  = N
            CASE( 'DRYNO2'    )    
               ID_SPECIES%DRYNO2   = N
            CASE( 'DRYO3'     )    
               ID_SPECIES%DRYO3    = N
            CASE( 'DRYPAN'    )    
               ID_SPECIES%DRYPAN   = N
            CASE( 'DRYPMN'    )    
               ID_SPECIES%DRYPMN   = N
            CASE( 'DRYPPN'    )    
               ID_SPECIES%DRYPPN   = N
            CASE( 'DRYR4N2'   )
               ID_SPECIES%DRYR4N2  = N
            CASE( 'EMISSION'  )
               ID_SPECIES%EMISSION = N
            CASE( 'EOH'       )
               ID_SPECIES%EOH      = N
            CASE( 'ETO2'      )
               ID_SPECIES%ETO2     = N
            CASE( 'ETP'       )
               ID_SPECIES%ETP      = N
            CASE( 'GCO3'      )
               ID_SPECIES%GCO3     = N
            CASE( 'GLCO3'     )
               ID_SPECIES%GLCO3    = N
            CASE( 'GLP'       )
               ID_SPECIES%GLP      = N
            CASE( 'GLPAN'     )
               ID_SPECIES%GLPAN    = N
            CASE( 'GLYC'      )
               ID_SPECIES%GLYC     = N
            CASE( 'GLYX'      )
               ID_SPECIES%GLYX     = N
            CASE( 'GP'        )
               ID_SPECIES%GP       = N
            CASE( 'GPAN'      )
               ID_SPECIES%GPAN     = N
            CASE( 'H'         )
               ID_SPECIES%H        = N
            CASE( 'H2'        )
               ID_SPECIES%H2       = N
            CASE( 'H2O'       )
               ID_SPECIES%H2O      = N
            CASE( 'H2O2'      )
               ID_SPECIES%H2O2     = N
            CASE( 'HAC'       )
               ID_SPECIES%HAC      = N
            CASE( 'HCOOH'     )
               ID_SPECIES%HCOOH    = N
            CASE( 'HNO2'      )
               ID_SPECIES%HNO2     = N
            CASE( 'HNO3'      )
               ID_SPECIES%HNO3     = N
            CASE( 'HNO4'      )
               ID_SPECIES%HNO4     = N
            CASE( 'HO2'       )
               ID_SPECIES%HO2      = N
            CASE( 'IALD'      )
               ID_SPECIES%IALD     = N
            CASE( 'IAO2'      )
               ID_SPECIES%IAO2     = N
            CASE( 'IAP'       )
               ID_SPECIES%IAP      = N
            CASE( 'INO2'      )
               ID_SPECIES%INO2     = N
            CASE( 'INPN'      )
               ID_SPECIES%INPN     = N
            CASE( 'ISN1'      )
               ID_SPECIES%ISN1     = N
            CASE( 'ISNO3'     )
               ID_SPECIES%ISNO3    = N
            CASE( 'ISNP'      )
               ID_SPECIES%ISNP     = N
            CASE( 'ISOP'      )
               ID_SPECIES%ISOP     = N
            CASE( 'KO2'       )
               ID_SPECIES%KO2      = N
            CASE( 'LISOPOH'   )
               ID_SPECIES%LISOPOH  = N
            CASE( 'M'         )
               ID_SPECIES%M        = N
            CASE( 'MACR'      )
               ID_SPECIES%MACR     = N
            CASE( 'MAN2'      )
               ID_SPECIES%MAN2     = N
            CASE( 'MAO3'      )
               ID_SPECIES%MAO3     = N
            CASE( 'MAOP'      )
               ID_SPECIES%MAOP     = N
            CASE( 'MAP'       )
               ID_SPECIES%MAP      = N
            CASE( 'MCO3'      )
               ID_SPECIES%MCO3     = N
            CASE( 'MEK'       )
               ID_SPECIES%MEK      = N
            CASE( 'MGLY'      )
               ID_SPECIES%MGLY     = N
            CASE( 'MNO3'      )
               ID_SPECIES%MNO3     = N
            CASE( 'MO2'       )
               ID_SPECIES%MO2      = N
            CASE( 'MOH'       )
               ID_SPECIES%MOH      = N
            CASE( 'MP'        )
               ID_SPECIES%MP       = N
            CASE( 'MRO2'      )
               ID_SPECIES%MRO2     = N
            CASE( 'MRP'       )
               ID_SPECIES%MRP      = N
            CASE( 'MSA'       )
               ID_SPECIES%MSA      = N
            CASE( 'MVK'       )
               ID_SPECIES%MVK      = N
            CASE( 'MVN2'      )
               ID_SPECIES%MVN2     = N
            CASE( 'N2'        )
               ID_SPECIES%N2       = N
            CASE( 'N2O'       )
               ID_SPECIES%N2O      = N
            CASE( 'N2O5'      )
               ID_SPECIES%N2O5     = N
            CASE( 'NH2'       )
               ID_SPECIES%NH2      = N
            CASE( 'NH3'       )
               ID_SPECIES%NH3      = N
            CASE( 'NO'        )
               ID_SPECIES%NO       = N
            CASE( 'NO2'       )
               ID_SPECIES%NO2      = N
            CASE( 'NO3'       )
               ID_SPECIES%NO3      = N
            CASE( 'O'         )
               ID_SPECIES%O        = N
            CASE( 'O1D'       )
               ID_SPECIES%O1D      = N
            CASE( 'O2'        )
               ID_SPECIES%O2       = N
            CASE( 'O2CH2OH'   )
               ID_SPECIES%O2CH2OH  = N
            CASE( 'O3'        )
               ID_SPECIES%O3       = N
            CASE( 'OH'        )
               ID_SPECIES%OH       = N
            CASE( 'PAN'       )
               ID_SPECIES%PAN      = N
            CASE( 'PMN'       )
               ID_SPECIES%PMN      = N
            CASE( 'PO2'       )
               ID_SPECIES%PO2      = N
            CASE( 'PP'        )
               ID_SPECIES%PP       = N
            CASE( 'PPN'       )
               ID_SPECIES%PPN      = N
            CASE( 'PRN1'      )
               ID_SPECIES%PRN1     = N
            CASE( 'PRPE'      )
               ID_SPECIES%PRPE     = N
            CASE( 'PRPN'      )
               ID_SPECIES%PRPN     = N
            CASE( 'R4N1'      )
               ID_SPECIES%R4N1     = N
            CASE( 'R4N2'      )
               ID_SPECIES%R4N2     = N
            CASE( 'R4O2'      )
               ID_SPECIES%R4O2     = N
            CASE( 'R4P'       )
               ID_SPECIES%R4P      = N
            CASE( 'RA3P'      )
               ID_SPECIES%RA3P     = N
            CASE( 'RB3P'      )
               ID_SPECIES%RB3P     = N
            CASE( 'RCHO'      )
               ID_SPECIES%RCHO     = N
            CASE( 'RCO3'      )
               ID_SPECIES%RCO3     = N
            CASE( 'RCOOH'     )
               ID_SPECIES%RCOOH    = N
            CASE( 'RIO1'      )
               ID_SPECIES%RIO1     = N
            CASE( 'RIO2'      )
               ID_SPECIES%RIO2     = N
            CASE( 'RIP'       )
               ID_SPECIES%RIP      = N
            CASE( 'ROH'       )
               ID_SPECIES%ROH      = N
            CASE( 'RP'        )
               ID_SPECIES%RP       = N
            CASE( 'SO2'       )
               ID_SPECIES%SO2      = N
            CASE( 'SO4'       )
               ID_SPECIES%SO4      = N
            CASE( 'VRO2'      )
               ID_SPECIES%VRO2     = N
            CASE( 'VRP'       )
               ID_SPECIES%VRP      = N
            CASE DEFAULT
               ! Nothing
         END SELECT
      ENDDO

      !=================================================================
      ! Save tracer number in the ID_TRACERS object
      ! Create the coefficient arrays that link tracers & species
      !=================================================================

      ! Write header text
      WRITE( IU_LOG, '(/,a)' ) REPEAT( '=', 79 )
      WRITE( IU_LOG, 200     )
      WRITE( IU_LOG, '(a,/)' ) REPEAT( '=', 79 )
      WRITE( IU_LOG, 210     ) 
      WRITE( IU_LOG, '(  a)' ) REPEAT( '-', 30 )

      ! Formats
 200  FORMAT(
     &  'ADVECTED TRACERS (==> denotes emitted constituent species)' )
 210  FORMAT( '  # Tracer          g/mole' )

      ! Loop over all advected tracers
      DO N = 1, N_TRACERS
         
         IF ( N == ID_TRACERS%NOx ) THEN
            COEF%SPEC_COEF    (N,1:4) = (/ 1d0, 1d0, 1d0, 1d0 /)
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%NO2
            COEF%SPEC_ID      (N,2  ) = ID_SPECIES%NO
            COEF%SPEC_ID      (N,3  ) = ID_SPECIES%NO3
            COEF%SPEC_ID      (N,4  ) = ID_SPECIES%HNO2
            COEF%SPEC_PER_TRAC(N    ) = 4
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%SPEC_EMITTED (N    ) = 2     ! NO is emitted
            COEF%MOLWT_KG     (N    ) = 46d-3

         ELSE IF ( N == ID_TRACERS%Ox ) THEN
            COEF%SPEC_COEF    (N,1:3) = (/ 1d0, 1d0, 2d0 /)
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%O3
            COEF%SPEC_ID      (N,2  ) = ID_SPECIES%NO2
            COEF%SPEC_ID      (N,3  ) = ID_SPECIES%NO3  
            COEF%SPEC_PER_TRAC(N    ) = 3
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%SPEC_EMITTED (N    ) = 1     ! O3 is emitted
            COEF%MOLWT_KG     (N    ) = 48d-3

         ELSE IF ( N == ID_TRACERS%PAN ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%PAN
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 121d-3

         ELSE IF ( N == ID_TRACERS%CO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%CO
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%SPEC_EMITTED (N    ) = 1    ! CO is emitted
            COEF%MOLWT_KG     (N    ) = 28d-3

         ELSE IF ( N == ID_TRACERS%ALK4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 4d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%ALK4
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 4d0
            COEF%SPEC_EMITTED (N    ) = 1     ! ALK4 is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%ISOP ) THEN
            COEF%SPEC_COEF    (N,1  ) = 5d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%ISOP
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 5d0
            COEF%SPEC_EMITTED (N    ) = 1     ! ISOP is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%HNO3 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%HNO3
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%SPEC_EMITTED (N    ) = 1     ! HNO3 is emitted
            COEF%MOLWT_KG     (N    ) = 63d-3

         ELSE IF ( N == ID_TRACERS%H2O2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%H2O2
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 34d-3

         ELSE IF ( N == ID_TRACERS%ACET ) THEN
            COEF%SPEC_COEF    (N,1  ) = 3d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%ACET
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 3d0
            COEF%SPEC_EMITTED (N    ) = 1     ! ACET is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%MEK ) THEN
            COEF%SPEC_COEF    (N,1  ) = 4d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%MEK
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 4d0
            COEF%SPEC_EMITTED (N    ) = 1     ! MEK is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%ALD2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 2d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%ALD2
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 2d0
            COEF%SPEC_EMITTED (N    ) = 1     ! ALD2 is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%RCHO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%RCHO
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 58d-3

         ELSE IF ( N == ID_TRACERS%MVK ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%MVK
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 70d-3

         ELSE IF ( N == ID_TRACERS%MACR ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%MACR
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 70d-3

         ELSE IF ( N == ID_TRACERS%PMN ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%PMN
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 147d-3

         ELSE IF ( N == ID_TRACERS%PPN ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%PPN
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 135d-3

         ELSE IF ( N == ID_TRACERS%R4N2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%R4N2
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 119d-3

         ELSE IF ( N == ID_TRACERS%PRPE ) THEN
            COEF%SPEC_COEF    (N,1  ) = 3d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%PRPE
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 3d0
            COEF%SPEC_EMITTED (N    ) = 1     ! PRPE is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%C3H8 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 3d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%C3H8
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 3d0
            COEF%SPEC_EMITTED (N    ) = 1     ! C3H8 is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%CH2O ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%CH2O
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%SPEC_EMITTED (N    ) = 1     ! CH2O is emitted
            COEF%MOLWT_KG     (N    ) = 30d-3

         ELSE IF ( N == ID_TRACERS%C2H6 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 2d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%C2H6
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 2d0
            COEF%SPEC_EMITTED (N    ) = 1     ! C2H6 is emitted
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%N2O5 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%N2O5
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 105d-3

         ELSE IF ( N == ID_TRACERS%HNO4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%HNO4
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 79d-3

         ELSE IF ( N == ID_TRACERS%MP ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%MP
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 48d-3

         ELSE IF ( N == ID_TRACERS%DMS ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%DMS
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 62d-3

         ELSE IF ( N == ID_TRACERS%SO2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%SO2
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 64d-3

         ELSE IF ( N == ID_TRACERS%SO4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%SO4
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 96d-3

         ELSE IF ( N == ID_TRACERS%SO4s ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 96d-3

         ELSE IF ( N == ID_TRACERS%MSA ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = ID_SPECIES%MSA
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 96d-3

         ELSE IF ( N == ID_TRACERS%NH3 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 17d-3

         ELSE IF ( N == ID_TRACERS%NH4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 18d-3

         ELSE IF ( N == ID_TRACERS%NIT ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 62d-3

         ELSE IF ( N == ID_TRACERS%NITs ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 62d-3

         ELSE IF ( N == ID_TRACERS%BCPI ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%OCPI ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%BCPO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%OCPO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 12d-3

         ELSE IF ( N == ID_TRACERS%ALPH ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 136.23d-3

         ELSE IF ( N == ID_TRACERS%LIMO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 136.23d-3

         ELSE IF ( N == ID_TRACERS%ALCO ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 142d-3

         ELSE IF ( N == ID_TRACERS%SOG1 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 150d-3

         ELSE IF ( N == ID_TRACERS%SOG2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 160d-3

         ELSE IF ( N == ID_TRACERS%SOG3 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 220d-3

         ELSE IF ( N == ID_TRACERS%SOG4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 130d-3

         ELSE IF ( N == ID_TRACERS%SOA1 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 150d-3

         ELSE IF ( N == ID_TRACERS%SOA2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 160d-3

         ELSE IF ( N == ID_TRACERS%SOA3 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 220d-3

         ELSE IF ( N == ID_TRACERS%SOA4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 130d-3

         ELSE IF ( N == ID_TRACERS%DST1 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 29d-3

         ELSE IF ( N == ID_TRACERS%DST2 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 29d-3

         ELSE IF ( N == ID_TRACERS%DST3 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 29d-3

         ELSE IF ( N == ID_TRACERS%DST4 ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 29d-3

         ELSE IF ( N == ID_TRACERS%SALA ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 36d-3

         ELSE IF ( N == ID_TRACERS%SALC ) THEN
            COEF%SPEC_COEF    (N,1  ) = 1d0
            COEF%SPEC_ID      (N,1  ) = 0
            COEF%SPEC_PER_TRAC(N    ) = 1
            COEF%TRAC_COEF    (N    ) = 1d0
            COEF%MOLWT_KG     (N    ) = 36d-3

         ELSE

            ! Invalid tracer -- return with error status
            WRITE( IDENT%ERRMSG, 300 ) N
            RC = SMV_FAILURE
            RETURN
            
         ENDIF         

         ! XNUMOL = AVO / MOLWT = ratio of molec/kg for each tracer
         COEF%XNUMOL(N) = AVO / COEF%MOLWT_KG(N)

         ! Write tracer number, name, & mol wt
         WRITE( IU_LOG, 310 ) N, TRACER_NAME(N), 
     &                            COEF%MOLWT_KG(N) * 1000d0

         ! If the tracer ishas constituent species ...
         IF ( COEF%SPEC_PER_TRAC(N) > 1  .or. 
     &        COEF%SPEC_EMITTED(N)  > 0 ) THEN
         
            ! ... print out constituent species names
            DO C = 1, COEF%SPEC_PER_TRAC(N) 

               ! Highlight emitted species with ==> arrow
               IF ( COEF%SPEC_EMITTED(N) == C ) THEN
                  WRITE( IU_LOG, 320 ) COEF%SPEC_COEF(N,C), 
     &                                  NAMEGAS( COEF%SPEC_ID(N,C) )
               ELSE
                  WRITE( IU_LOG, 330 ) COEF%SPEC_COEF(N,C),
     &                                  NAMEGAS( COEF%SPEC_ID(N,C) )
               ENDIF

            ENDDO 
         ENDIF

      ENDDO

      ! Formats
 300  FORMAT( 'Tracer ', i4, ' is not defined!' )
 310  FORMAT( I3, 1x, A10, 6x, F6.1 )
 320  FORMAT( 5x, '===> ', f4.1, 1x, A4  )
 330  FORMAT( 5x, '---> ', f4.1, 1x, A4  )

      !=================================================================
      ! Initialize dry deposition
      !=================================================================
      IF ( OPTIONS%USE_DRYDEP ) THEN

         ! Call init method from "drydep_mod.f"
         CALL INIT_DRYDEP( IDENT, ID_TRACERS, ID_DRYDEP,   
     &                     COEF,  N_DRYDEP,   DRYDEP_NAME, RC )

         ! Return w/ error if necessary
         IF ( RC /= SMV_SUCCESS ) RETURN
      ENDIF

      !=================================================================
      ! Initialize wet deposition
      !
      ! NOTE: Turning off wet deposition will also turn off the 
      !       wet scavenging of tracer in cloud updrafts. 
      !=================================================================
      IF ( OPTIONS%USE_WETDEP .or. OPTIONS%USE_CONVECTION ) THEN

         ! Call init method from "wetdep_mod.f"
         CALL INIT_WETDEP( IDENT,     L_CHUNK,  ID_TRACERS, 
     &                     ID_WETDEP, N_WETDEP,  RC )

         ! Return w/ error if necessary
         IF ( RC /= SMV_SUCCESS ) RETURN
      ENDIF

      !=================================================================
      ! Flag emission & dry deposition reactions w/in SMVGEAR
      !=================================================================
      CALL SETEMDEP( IDENT,       N_TRACERS,   N_DRYDEP, 
     &               TRACER_NAME, DRYDEP_NAME, COEF,     RC )

      IF ( RC /= SMV_SUCCESS ) RETURN

      !=================================================================
      ! Initialize the FAST-J photolysis mechanism
      !=================================================================
      CALL INPHOT( IDENT, L_CHUNK, NPHOT, N_JV, RC )

      IF ( RC /= SMV_SUCCESS ) RETURN

      !=================================================================
      ! Initialize the DIAG_COL object for diagnostic output
      !=================================================================

      ! Set a flag if we should print the diagnostic output to a file
      DIAG_COL%DO_PRINT = OPTIONS%USE_DEBUG_PRINT

      ! Initialize the other fields of DIAG_COL
      IF ( DIAG_COL%DO_PRINT .and. IDENT%PET == 0  ) THEN
         
         ! Allocate the TRACER fields
         IF ( .not. ASSOCIATED( DIAG_COL%TRACER ) ) THEN
            ALLOCATE( DIAG_COL%TRACER(MAX_CHUNK,N_TRACERS+1), STAT=RC )
            IF ( RC /= SMV_SUCCESS ) RETURN
         ENDIF
         
         ! Allocate the tracer name fields
         IF ( .not. ASSOCIATED( DIAG_COL%NAME ) ) THEN
            ALLOCATE( DIAG_COL%NAME( N_TRACERS+1 ), STAT=RC )
            IF ( RC /= SMV_SUCCESS ) RETURN
         ENDIF

         ! Init fields
         DIAG_COL%N_DIAG   = N_TRACERS + 1
         DIAG_COL%TRACER   = 0d0
         DIAG_COL%COUNT    = 0
         DIAG_COL%FILENAME = 'diag_col.txt'
         DIAG_COL%LUN      = 750

         ! Initialize tracer names (OH is NTRACERS+1)
         DO N = 1, N_TRACERS
            DIAG_COL%NAME(N) = TRIM( TRACER_NAME(N) )
         ENDDO
         DIAG_COL%NAME(N_TRACERS+1) = 'OH'
      ENDIF

      !================================================================
      ! Succesful return!
      !================================================================

      ! Set error code to success
      RC                      = SMV_SUCCESS

      ! Remove this routine name from error trace stack
      IDENT%I_AM( IDENT%LEV ) = ''
      IDENT%LEV               = IDENT%LEV - 1

      END SUBROUTINE GC_CHUNK_INIT
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: gc_chunk_final
!
! !DESCRIPTION: Subroutine GC\_CHUNK\_FINAL deallocates pointers and
!  arrays used in the chemistry. 
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE GC_CHUNK_FINAL( IDENT, COEF, RC )
!
! !USES:
!
#     include "smv_errcode.h"           ! Error codes
!
! !INPUT/OUTPUT PARAMETERS:
!     
      ! Object w/ info from ESMF and traceback stack
      TYPE(GC_IDENT),    INTENT(INOUT) :: IDENT

      ! Object w/ info for mapping species <--> tracers
      TYPE(SPEC_2_TRAC), INTENT(INOUT) :: COEF      
!
! !OUTPUT PARAMETERS:
!
      ! Return code
      INTEGER,           INTENT(OUT)   :: RC
!
! !REVISION HISTORY: 
!  30 Apr 2009 - R. Yantosca - Initial version
!  05 May 2009 - P. Le Sager - now use module variables; remove call to
!                              cleanup_dust
!  05 Jun 2009 - R. Yantosca - Now deallocate COEF%MOLEC_KG & COEF%XNUMOL
!  30 Jun 2009 - R. Yantosca - Moved here from "chemistry_mod.f" 
!  30 Apr 2010 - R. Yantosca - Now pass IDENT via the arg list
!  30 Apr 2010 - R. Yantosca - Now call CLEANUP_SCHEM outside this routine
!  03 Jun 2010 - R. Yantosca - Removed calls to CLEANUP_* routines.  These
!                              referenced 3-D arrays that only need to be
!                              used in GEOS-Chem.
!  08 Jul 2010 - R. Yantosca - Archive tracers, OH in DIAG_COL for printout
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      INTEGER :: IU_LOG

      !=================================================================
      ! Initialization
      !=================================================================

      ! Put this routine name on error trace stack
      IDENT%LEV               = IDENT%LEV + 1
      IDENT%I_AM( IDENT%LEV ) = 'GC_CHUNK_FINAL'

      ! Unit for logfile redirect
      IU_LOG                  = IDENT%STDOUT_LUN

      !=================================================================
      ! Deallocate pointer fields of the COEF object
      !=================================================================
      
      IF ( ASSOCIATED( COEF%SPEC_COEF ) ) THEN
         DEALLOCATE( COEF%SPEC_COEF )
      ENDIF

      IF ( ASSOCIATED( COEF%SPEC_ID ) ) THEN
         DEALLOCATE( COEF%SPEC_ID )
      ENDIF

      IF ( ASSOCIATED( COEF%SPEC_EMITTED ) ) THEN
         DEALLOCATE( COEF%SPEC_EMITTED )
      ENDIF

      IF ( ASSOCIATED( COEF%SPEC_PER_TRAC ) ) THEN
         DEALLOCATE( COEF%SPEC_PER_TRAC )
      ENDIF

      IF ( ASSOCIATED( COEF%TRAC_COEF ) ) THEN
         DEALLOCATE( COEF%TRAC_COEF )
      ENDIF

      IF ( ASSOCIATED( COEF%MOLWT_KG ) ) THEN
         DEALLOCATE( COEF%MOLWT_KG )
      ENDIF

      IF ( ASSOCIATED( COEF%XNUMOL ) ) THEN
         DEALLOCATE( COEF%XNUMOL )
      ENDIF

      !=================================================================
      ! Print out diagnostic output and finalize the DIAG_COL object
      !=================================================================
      IF ( DIAG_COL%DO_PRINT .and. IDENT%PET == 0 ) THEN

         ! Write to file
         CALL PRINT_DIAG_COL( IDENT, RC )
         IF ( RC /= SMV_SUCCESS ) RETURN

         ! Deallocate tracer field array
         IF ( ASSOCIATED( DIAG_COL%TRACER ) ) THEN
            DEALLOCATE( DIAG_COL%TRACER )
         ENDIF

         ! Deallocate tracer names array
         IF ( ASSOCIATED( DIAG_COL%NAME ) ) THEN
            DEALLOCATE( DIAG_COL%NAME )
         ENDIF

         ! Blank other fields
         DIAG_COL%DO_PRINT = .FALSE.
         DIAG_COL%COUNT    = 0
         DIAG_COL%FILENAME = ''
         DIAG_COL%LUN      = 0
         DIAG_COL%N_DIAG   = 0
      ENDIF

      !================================================================
      ! Succesful return!
      !================================================================

      ! Set error code to success
      RC                      = SMV_SUCCESS

      ! Remove this routine name from error trace stack
      IDENT%I_AM( IDENT%LEV ) = ''
      IDENT%LEV               = IDENT%LEV - 1

      END SUBROUTINE GC_CHUNK_FINAL
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: its_time
!
! !DESCRIPTION: Function ITS\_TIME returns TRUE if the elapsed time is a 
!  multiple of the timestep, or FALSE otherwise.  This is used to check
!  if it is time to do emissions or chemistry, for example.
!\\
!\\
! !INTERFACE:
!
      FUNCTION ITS_TIME( TIME_ELAPSED, TIMESTEP ) RESULT( IT_IS_TIME )
!
! !INPUT PARAMETERS:
!
      REAL*8,  INTENT(IN) :: TIME_ELAPSED
      REAL*8,  INTENT(IN) :: TIMESTEP
!
! !RETURN_CODE
!
      ! Return code
      LOGICAL             :: IT_IS_TIME
!
! !REVISION HISTORY: 
!     30 Jun 2009 - R. Yantosca - Initial version
!EOP
!------------------------------------------------------------------------------
!BOC
      IT_IS_TIME = ( MOD( TIME_ELAPSED, TIMESTEP ) == 0d0 )

      END FUNCTION ITS_TIME
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: convert_units
!
! !DESCRIPTION: Subroutine CONVERT\_UNITS converts the tracer concentration 
!  array from [kg] to [mol/mol] mixing ratio, or vice versa.
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE CONVERT_UNITS( IDENT, DIMINFO, IFLAG, 
     &                          COEF,  AD,      TRACER, RC ) 
!
! !USES:
!
      USE ERROR_MOD, ONLY : IS_SAFE_DIV   ! From "GeosUtil" library

#     include "smv_errcode.h"             ! Error codes
#     include "smv_physconst.h"           ! Physical constants
!
! !INPUT PARAMETERS:
!
      ! Object w/ dimension information
      TYPE(GC_DIMS),     INTENT(IN)    :: DIMINFO

      ! If IFLAG==1, then convert from [kg     ] --> [mol/mol]
      ! If IFLAG==2, then convert from [mol/mol] --> [kg     ]
      INTEGER,           INTENT(IN)    :: IFLAG

      ! Object containing molecular weight info
      TYPE(SPEC_2_TRAC), INTENT(IN)    :: COEF

      ! Air mass in grid box [kg]
      REAL*8,            INTENT(IN)    :: AD(:)
!
! !INPUT/OUTPUT PARAMETERS:
! 
      ! Object with info from ESMF and traceback info
      TYPE(GC_IDENT),    INTENT(INOUT) :: IDENT

      ! Tracer concentration in [kg] or [mol/mol]
      REAL*8,            INTENT(INOUT) :: TRACER(:,:)
!
! !OUTPUT PARAMETERS:
! 
      INTEGER,           INTENT(OUT)   :: RC
!
! !REMARKS:
!  The conversion from [kg] to [mol/mol] mixing ratio is as follows:
!                                                                             .
!     kg tracer(N)       1        Air mol wt       moles tracer
!     -----------  * -------- *  -------------  =  ------------
!          1          kg air     tracer mol wt      moles air  
!                                                                             .
!  Therefore, with:
!                                                                             .
!     TCVV(N) = 28.97d-3 / molecular weight of tracer [kg]
!             = mol. wt. of air (AMU) / mol. wt. of tracer (AMU)
!                                                                             .
!     AD(L)   = mass of air (kg) in grid box L  (L = vertical index)
!                                                                             .
!  The conversion is:
!                                                                             .
!     TRACER(L,N) [kg] * TCVV(N) / AD(L) = TRACER(L,N) [mol/mol]
!                                                                             .
!  And the inverse conversion [mol/mol] to [kg] is:
!                                                                             .
!     TRACER(L,N) [mol/mol] / TCVV(N) * AD(L) = TRACER(L,N) [kg]
!
! !REVISION HISTORY: 
!  07 Jul 2009 - R. Yantosca - Initial version
!  14 Dec 2009 - R. Yantosca - Now use [mol/mol] in comments instead of [v/v]
!  14 Dec 2009 - R. Yantosca - Now get molecular weight of air from MW_AIR
!                              in header file "smv_physconst.h"
!  14 Dec 2009 - R. Yantosca - Now make sure division can be performed,
!                              otherwise return an error condition
!  04 May 2010 - R. Yantosca - Add IDENT to the argument list
!  01 Jun 2010 - R. Yantosca - Add DIMINFO to the argument list
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      ! Local Variables
      INTEGER :: L, N
      REAL*8  :: TCVV

      !=================================================================
      ! Initialization
      !=================================================================

      ! Put this routine name on error trace stack
      IDENT%LEV               = IDENT%LEV + 1
      IDENT%I_AM( IDENT%LEV ) = 'CONVERT_UNITS'

      ! Case statement
      SELECT CASE ( IFLAG )

         !----------------------------------------------
         ! IFLAG = 1: Convert from [kg] -> [mol/mol] 
         !----------------------------------------------
         CASE ( 1 )

            DO N = 1, DIMINFO%N_TRACERS
            DO L = 1, DIMINFO%L_CHUNK

               ! Ratio of air/tracer mol wts
               TCVV        = MW_AIR / COEF%MOLWT_KG(N)

               ! Convert units if the division can be performed
               ! Otherwise return w/ error
               IF ( IS_SAFE_DIV( TCVV, AD(L) ) ) THEN
                  TRACER(L,N) = TRACER(L,N) * TCVV / AD(L)
               ELSE
                  WRITE( IDENT%ERRMSG, 200 )
 200              FORMAT( 'Error: Cannot do division, IFLAG=1' )
                  RC = SMV_FAILURE
                  RETURN
               ENDIF

            ENDDO
            ENDDO

         !----------------------------------------------
         ! IFLAG = 2: Convert from [mol/mol] -> [kg] 
         !---------------------------------------------- 
         CASE ( 2 )

            DO N = 1, DIMINFO%N_TRACERS
            DO L = 1, DIMINFO%L_CHUNK

               ! Ratio of air/tracer mol wts
               TCVV        = MW_AIR / COEF%MOLWT_KG(N)
               
               ! Convert units if the division can be performed
               ! Otherwise return w/ error
               IF ( IS_SAFE_DIV( AD(L), TCVV ) ) THEN
                  TRACER(L,N) = TRACER(L,N) * AD(L) / TCVV
               ELSE
                  WRITE( IDENT%ERRMSG, 210 )
 210              FORMAT( 'Error: Cannot do division, IFLAG=1' )
                  RC = SMV_FAILURE
                  RETURN
               ENDIF

            ENDDO     
            ENDDO

      END SELECT

      !================================================================
      ! Succesful return!
      !================================================================

      ! Set error code to success
      RC                      = SMV_SUCCESS

      ! Remove this routine name from error trace stack
      IDENT%I_AM( IDENT%LEV ) = ''
      IDENT%LEV               = IDENT%LEV - 1

      END SUBROUTINE CONVERT_UNITS
!EOC
!------------------------------------------------------------------------------
!          Harvard University Atmospheric Chemistry Modeling Group            !
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: print_diag_avg
!
! !DESCRIPTION: Function PRINT\_DIAG\_AVG computes the time-averaged tracer
!  and OH concentrations and writes them to a file for debug output.  This
!  facilitates comparing similar quantities when evaluating the performance
!  of the GEOS-Chem chunk chemistry within the ESMF/MAPL environment.
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE PRINT_DIAG_COL( IDENT, RC )
!
! !USES:
!
#     include "smv_errcode.h"                  ! Error codes
!
! !INPUT/OUTPUT PARAMETERS:
!
      TYPE(GC_IDENT), INTENT(INOUT) :: IDENT   ! Obj w/ info from ESMF etc
!
! !OUTPUT PARAMETERS:
!
      ! Return code
      INTEGER,        INTENT(OUT)   :: RC      ! Return code
!
! !REVISION HISTORY: 
!  08 Jul 2010 - R. Yantosca - Initial version
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES
!
      INTEGER :: N, LUN
      REAL*8  :: CT

      !=================================================================
      ! Initialization
      !=================================================================

      ! Put this routine name on error trace stack
      IDENT%LEV               = IDENT%LEV + 1
      IDENT%I_AM( IDENT%LEV ) = 'PRINT_DIAG_COL'

      !===================================================================
      ! Print output for validation at test box
      !===================================================================

      ! Number of timesteps to average
      CT  = DBLE( DIAG_COL%COUNT )

      ! Open file
      OPEN( DIAG_COL%LUN,     FILE=TRIM( DIAG_COL%FILENAME ), 
     &      STATUS='UNKNOWN', IOSTAT=RC ) 
      
      ! Return if error opening file
      IF ( RC /= SMV_SUCCESS ) THEN
         IDENT%ERRMSG = 'Could not open file ' // 
     &                  TRIM( DIAG_COL%FILENAME )
         RC           = SMV_FAILURE
         RETURN
      ENDIF

      ! Print number of timesteps
      WRITE( DIAG_COL%LUN, 100 ) DIAG_COL%COUNT
 100  FORMAT( 'Average concentrations after ', i5, ' timesteps', / )

      ! Make sure we have at least one timestep before printout
      IF ( DIAG_COL%COUNT <= 0 ) THEN
         IDENT%ERRMSG = 'Need at least one timestep for output!'
         RC           = SMV_FAILURE     
         RETURN
      ENDIF

      ! Only print out 1st 36 levels, because we start lumping together
      ! the stratospheric levels starting with level 37.
      DO N = 1, DIAG_COL%N_DIAG
         WRITE( DIAG_COL%LUN, '(a)' ) TRIM( DIAG_COL%NAME(N) )
         WRITE( DIAG_COL%LUN, 110   ) DIAG_COL%TRACER(1:36,N) / CT
 110     FORMAT( 4( es19.12, 1x ) )
      ENDDO

      ! Close file
      CLOSE( DIAG_COL%LUN )

      !================================================================
      ! Succesful return!
      !================================================================

      ! Set error code to success
      RC                      = SMV_SUCCESS

      ! Remove this routine name from error trace stack
      IDENT%I_AM( IDENT%LEV ) = ''
      IDENT%LEV               = IDENT%LEV - 1

      END SUBROUTINE PRINT_DIAG_COL
!EOC
      END MODULE GC_CHUNK_MOD



