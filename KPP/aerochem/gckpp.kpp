#INTEGRATOR rosenbrock
#LANGUAGE Fortran90
#DRIVER none
#HESSIAN off
#MEX off
#STOICMAT off

#INCLUDE aerochem.eqn

#FAMILIES
POx : O3 + NO2 + 2NO3 + PAN + PPN + MPAN + HNO4 + 3N2O5 + HNO3 + BrO + HOBr + BrNO2 + 2BrNO3 + MPN + ETHLN + MVKN + MCRHN + MCRHNB + PROPNN + R4N2 + PRN1 + PRPN + R4N1 + HONIT + MONITS + MONITU + OLND + OLNN + IHN1 + IHN2 + IHN3 + IHN4 + INPB + INPD + ICN + 2IDN + ITCN + ITHN + ISOPNOO1 + ISOPNOO2 + INO2B + INO2D + INA + IDHNBOO + IDHNDOO1 + IDHNDOO2 + IHPNBOO + IHPNDOO + ICNOO + 2IDNOO + MACRNO2 + ClO + HOCl + ClNO2 + 2ClNO3 + 2Cl2O2 + 2OClO + O + O1D + IO + HOI + IONO + 2IONO2 + 2OIO + 2I2O2 + 3I2O3 + 4I2O4;
LOx : O3 + NO2 + 2NO3 + PAN + PPN + MPAN + HNO4 + 3N2O5 + HNO3 + BrO + HOBr + BrNO2 + 2BrNO3 + MPN + ETHLN + MVKN + MCRHN + MCRHNB + PROPNN + R4N2 + PRN1 + PRPN + R4N1 + HONIT + MONITS + MONITU + OLND + OLNN + IHN1 + IHN2 + IHN3 + IHN4 + INPB + INPD + ICN + 2IDN + ITCN + ITHN + ISOPNOO1 + ISOPNOO2 + INO2B + INO2D + INA + IDHNBOO + IDHNDOO1 + IDHNDOO2 + IHPNBOO + IHPNDOO + ICNOO + 2IDNOO + MACRNO2 + ClO + HOCl + ClNO2 + 2ClNO3 + 2Cl2O2 + 2OClO + O + O1D + IO + HOI + IONO + 2IONO2 + 2OIO + 2I2O2 + 3I2O3 + 4I2O4;
PCO : CO;
LCO : CO;
PSO4 : SO4;
LCH4 : CH4;
PH2O2 : H2O2;

#INLINE F90_RATES
  ! All rates are included in aerochem_RateLawFuncs.F90, which
  ! gets referenced directly from subroutine Update_Rconst.
#ENDINLINE

#INLINE F90_RCONST
  ! Inline an include file containing rate law definitions, which 
  ! will be inserted directly into subroutine Update_Rconst().
  ! This is necessary as a workaround for KPP not being able to
  ! include very large files ( > 200000 chars) directly.
  !  -- Bob Yantosca (11 Jun 2021)
  USE aerochem_RateLawFuncs
#ENDINLINE

#INLINE F90_GLOBAL
  !--------------------------------------------------------------------------
  ! Additional global parameters -- will be added to gckpp_Global.F90
  !--------------------------------------------------------------------------

  ! Universal gas consatant [bar/(mol/kg)/K]  (Source: NIST, 2014)
  ! NOTE: Make sure this is consistent w/ the value in physconsts.F90!
  REAL(dp), PARAMETER :: CON_R = 0.083144598_dp

  !--------------------------------------------------------------------------
  ! Additional global variables -- will be added to gckpp_Global.F90
  !--------------------------------------------------------------------------

  ! Inverse of temperature [K]
  REAL(dp) :: INV_TEMP
  !$OMP THREADPRIVATE( INV_TEMP )

  ! 4.0 * CON_R * TEMP
  REAL(dp) :: FOUR_R_T
  !$OMP THREADPRIVATE( FOUR_R_T )

  ! 4.0 * RGASLATM * TEMP
  REAL(dp) :: FOUR_RGASLATM_T
  !$OMP THREADPRIVATE( FOUR_RGASLATM_T )

  ! 8.0 * RSTARG * TEMP
  REAL(dp) :: EIGHT_RSTARG_T
  !$OMP THREADPRIVATE( EIGHT_RSTARG_T )

  ! H2O concentration
  REAL(dp) :: H2O
  !$OMP THREADPRIVATE( H2O )

  ! Pressure and relative humidity
  REAL(dp) :: PRESS
  REAL(dp) :: RELHUM
  !$OMP THREADPRIVATE( PRESS, RELHUM )

  ! Cosine of solar zenith angle
  REAL(dp) :: SUNCOS
  !$OMP THREADPRIVATE( SUNCOS )

  ! Henry's law constants (do not need to be THREADPRIVATE)
  REAL(dp) :: HENRY_K0(NSPEC)
  REAL(dp) :: HENRY_CR(NSPEC)

  ! Array for aqueous rates (1/s)
  ! - number of reactions set to 50 arbitrarily
  REAL(kind=dp) :: K_MT(20)
  !$OMP THREADPRIVATE( K_MT )

  ! Array for cloud rates (1/s)
  ! - number of reactions set to 50 arbitrarily
  REAL(dp) :: K_CLD(20)
  !$OMP THREADPRIVATE( K_CLD )

  ! Liquid water conversion factor
  ! - Size = number of aerosol types (nAeroType)
  REAL(dp) :: CVFAC(14)
  !$OMP THREADPRIVATE( CVFAC )

  ! Proton activity [unitless] and H+ concentration [M]
  ! (assumed equivalent - for now):
  REAL(kind=dp) :: H_PLUS
  !$OMP THREADPRIVATE( H_PLUS )

  !### NOTE: The HET array is deprecated
  !### These are the only slots left to convert
  ! Array for heterogeneous rates
  ! HET(ind_ClNO2,  1) : ClNO2  +  SALACL
  ! HET(ind_ClNO2,  2) : ClNO2  +  SALCCL
  ! HET(ind_ClNO2,  3) : ClNO3  +  HCl          # in-cloud only
  ! HET(ind_ClNO2,  4) : ClNO2  +  BrSALA
  ! HET(ind_ClNO2,  5) : ClNO2  +  BrSALC
  ! HET(ind_ClNO2,  6) : ClNO2  +  HBr          # in-cloud only
  ! HET(ind_ClNO3,  1) : ClNO3  +  H2O          # hydrolysis rxn
  ! HET(ind_ClNO3,  2) : ClNO3  +  HCl
  ! HET(ind_ClNO3,  3) : ClNO3  +  HBr
  ! HET(ind_ClNO3,  4) : ClNO3  +  BrSALA
  ! HET(ind_ClNO3,  5) : ClNO3  +  BrSALC
  ! HET(ind_ClNO3,  6) : ClNO3  +  SALACL
  ! HET(ind_ClNO3,  7) : CLNO3  +  SALCCL
  ! HET(ind_HOBr,   1) : HOBr   +  HBr
  ! HET(ind_HOBr,   2) : HOBr   +  HCl
  ! HET(ind_HOBr,   3) : HOBr   +  SALACL
  ! HET(ind_HOBr,   4) : HOBr   +  SALCCL
  ! HET(ind_HOBr,   5) : HOBr   +  BrSALA
  ! HET(ind_HOBr,   6) : HOBr   +  BrSALC
  ! HET(ind_HOBr,   7) : HOBr   +  HSO3-(aq)
  ! HET(ind_HOBr,   8) : HOBr   +  HSO3--(aq)
  ! HET(ind_HOCl,   1) : HOCl   +  HCl
  ! HET(ind_HOCl,   2) : HOCl   +  HBr
  ! HET(ind_HOCl,   3) : HOCl   +  SALACL
  ! HET(ind_HOCl,   4) : HOCl   +  SALCCL
  ! HET(ind_HOCl,   5) : HOCl   +  HSO3--(aq)
  ! HET(ind_HOCl,   6) : HOCl   +  SO3--(aq)
  REAL(kind=dp) :: HET(NSPEC,8)
  !$OMP THREADPRIVATE( HET )

  ! Array for photolysis rates (increase size if necessary)
  REAL(dp) :: PHOTOL(1000)
  !$OMP THREADPRIVATE( PHOTOL )

  TYPE, PUBLIC :: HetState
     REAL(dp) :: AVO            ! Avogadro's constant              [molec/mol  ]
     LOGICAL  :: natSurface     ! Is there NAT in this box?        [T/F        ]
     LOGICAL  :: pscBox         ! Are there polar strat clouds?    [T/F        ]
     LOGICAL  :: stratBox       ! Are we in the stratosphere       [T/F        ]
     INTEGER  :: NAEROTYPE      ! Number of aerosol types          [1          ]
     LOGICAL  :: is_UCX         ! Are we using the UCX mechanism?  [T/F        ]
     REAL(dp) :: aClArea        ! Fine SSA+SNA aerosol area        [cm2/cm3    ]
     REAL(dp) :: aClRadi        ! Fine SSA+SNA aerosol radius      [cm         ]
     REAL(dp) :: aClVol         ! Fine SSA+SNA aerosol volume      [cm3/cm3    ]
     REAL(dp) :: aIce           ! Ice surface area                 [cm2/cm3    ]
     REAL(dp) :: aLiq           ! Liquid surface area              [cm2/cm3    ]
     REAL(dp) :: aWater(2)      ! ISORROPIA aerosol water (fine & coarse)
     REAL(dp) :: Br_branch_CldA ! Br- branch ratio in CldA path    [1          ]
     REAL(dp) :: Br_branch_CldC ! Br- branch ratio in CldC path    [1          ]
     REAL(dp) :: Br_branch_CldG ! Br- branch ratio in CldG path    [1          ]
     REAL(dp) :: Br_conc_CldA   ! Br- in cloud (A=fine sea salt  ) [mol/kg H2O ]
     REAL(dp) :: Br_conc_CldC   ! Br- in cloud (C=coarse sea salt) [mol/kg H2O ]
     REAL(dp) :: Br_conc_CldG   ! Br- in cloud (G=gas-phase      ) [mol/kg H2O ]
     REAL(dp) :: Br_conc_Cld    ! Br- total in cloud = A + C + G
     REAL(dp) :: Br_conc_SSA    ! Br- in fine sea salt aerosol     [mol/kg H2O ]
     REAL(dp) :: Br_conc_SSC    ! Br- in coarse sea salt aerosol   [mol/kg H2O ]
     REAL(dp) :: Br_over_Cl_Cld ! Br_conc_Cld / Cl_conc_Cld        [1          ]
     REAL(dp) :: Br_over_Cl_SSA ! Br_conc_SSA / Cl_conc_SSC        [1          ]
     REAL(dp) :: Br_over_Cl_SSC ! Br_conc_SSC / Cl_conc_SSC        [1          ]
     REAL(dp) :: Cl_branch_CldA ! Cl- branch ratio in CldA path    [1          ]
     REAL(dp) :: Cl_branch_CldC ! Cl- branch ratio in CldC path    [1          ]
     REAL(dp) :: Cl_branch_CldG ! Cl- Branch ratio in CldG path    [1          ]
     REAL(dp) :: Cl_conc_CldA   ! Cl- in cloud (A=fine sea salt  ) [mol/kg H2O ]
     REAL(dp) :: Cl_conc_CldC   ! Cl- in cloud (C=coarse sea salt) [mol/kg H2O ]
     REAL(dp) :: Cl_conc_CldG   ! Cl- in cloud (G=gas-phase      ) [mol/kg H2O ]
     REAL(dp) :: Cl_conc_Cld    ! Cl- total = A + C + G
     REAL(dp) :: Cl_conc_SSA    ! Cl- in fine   sea salt           [mol/kg H2O ]
     REAL(dp) :: Cl_conc_SSC    ! Cl- in coarse sea salt           [mol/kg H2O ]
     REAL(dp) :: cldFr          ! Cloud fraction                   [1          ]
     REAL(dp) :: clearFr        ! Clear sky fraction               [1          ]
     REAL(dp) :: frac_SALACL    ! Frac of SALACL / total fine SS   [1          ]
     REAL(dp) :: fupdateHOBr    !
     REAL(dp) :: fupdateHOCl    !
     REAL(dp) :: gamma_HO2      ! Uptake probability for HO2       [1          ]
     REAL(dp) :: H2O            ! H2O concentration
     REAL(dp) :: HBr_theta      ! HBr theta for uptake on ice
     REAL(dp) :: HCl_theta      ! HCl theta for uptake on ice
     REAL(dp) :: H_conc_ICl     ! Liquid phase pH, Cl-             [pH units   ]
     REAL(dp) :: H_conc_LCl     ! Liquid phase pH, Cl-             [pH units   ]
     REAL(dp) :: H_conc_SSA     ! Liquid phase pH, fine sea salt   [pH units   ]
     REAL(dp) :: H_conc_SSC     ! Liquid phase pH, coarse sea salt [pH units   ]
     REAL(dp) :: H_conc_Sul     ! Liquid phase pH, sulfate
     REAL(dp) :: HNO3_theta     ! HNO3 theta for uptake on ice
     REAL(dp) :: HSO3_conc_Cld  !
     REAL(dp) :: H_plus         ! Proton activity [1] and H+ conc  [M          ]
     REAL(dp) :: KHETI_SLA(11)  ! Probs for PSC uptk rxns on SLA   [1          ]
     REAL(dp) :: mHSO4          ! Bisulfate concentration          [M          ]
     REAL(dp) :: mNO3           ! Nitrate concentration            [M          ]
     REAL(dp) :: mSO4           ! Sulfate concentration            [M          ]
     REAL(dp) :: NIT_conc_SSA   ! Cl- in fine sea salt             [mol/kg H2O ]
     REAL(dp) :: NIT_conc_SSC   ! Cl- in coarse sea salt           [mol/kg H2O ]
     REAL(dp) :: PI             ! PI constant                      [1          ]
     REAL(dp) :: pHCloud        ! Cloud PH                         [pH units   ]
     REAL(dp) :: pHSSA(2)       ! Sea salt pH (1=fine, 2=coarse)   [pH units   ]
     REAL(dp) :: OMOC_POA       ! Org matter/orgc carbon in POA    [1          ]
     REAL(dp) :: OMOC_OPOA      ! Org matter/org carbon in POA     [1          ]
     REAL(dp) :: qIce           ! Ice mixing ratio                 [kg/kg      ]
     REAL(dp) :: qLIq           ! Water mixing ratio               [kg/kg      ]
     REAL(dp) :: rIce           ! Ice radius
     REAL(dp) :: rLiq           ! Liquid radius
     REAL(dp) :: SALAAL_save    ! Conc of SALAAL before conversion [molec/cm3  ]
     REAL(dp) :: SALCAL_save    ! Conc of SALCAL before conversion [molec/cm3  ]
     REAL(dp) :: SO3_conc_Cld   !
     REAL(dp) :: ssAlk(2)       ! Sea salt alk'nty (1=fine, 2=coarse)
     LOGICAL  :: SSA_is_Alk     ! Is fine sea-salt alkaline?       [T/F        ]
     LOGICAL  :: SSA_is_Acid    ! Is fine sea-salt alkaline?       [T/F        ]
     LOGICAL  :: SSC_is_Alk     ! Is coarse sea-salt alkaline?     [T/F        ]
     LOGICAL  :: SSC_is_Acid    ! Is coarse sea-salt acid?         [T/F        ]
     REAL(dp) :: vAir           ! Volume of air                    [cm3        ]
     REAL(dp) :: vIce           ! Ice volume                       [cm3        ]
     REAL(dp) :: vLiq           ! Liquid volume                    [cm3        ]
     REAL(dp) :: wetArea(14)    ! Aerosol specific wet sfc area    [cm3/cm3 air]
     REAL(dp) :: xArea(14)      ! Aerosol specific sfc area        [cm3/cm3 air]
     REAL(dp) :: xH2O(14)       ! Aerosol water content            [cm3/cm3 air]
     REAL(dp) :: xRadi(14)      ! Aerosol effective radius         [cm         ]
     REAL(dp) :: xVol(14)       ! Aerosol specific volume          [cm3/cm3 air]
  END TYPE HetState
  TYPE(HetState), TARGET, PUBLIC :: State_Het
  !$OMP THREADPRIVATE( State_Het )
#ENDINLINE
