#INTEGRATOR rosenbrock
#LANGUAGE Fortran90
#DRIVER none
#HESSIAN off
#MEX off
#STOICMAT off

#INCLUDE aerochem.eqn

#FAMILIES
POx : O3 + NO2 + 2NO3 + PAN + PPN + MPAN + HNO4 + 3N2O5 + HNO3 + BrO + HOBr + BrNO2 + 2BrNO3 + MPN + ETHLN + MVKN + MCRHN + MCRHNB + PROPNN + R4N2 + PRN1 + PRPN + R4N1 + HONIT + MONITS + MONITU + OLND + OLNN + IHN1 + IHN2 + IHN3 + IHN4 + INPB + INPD + ICN + 2IDN + ITCN + ITHN + ISOPNOO1 + ISOPNOO2 + INO2B + INO2D + INA + IDHNBOO + IDHNDOO1 + IDHNDOO2 + IHPNBOO + IHPNDOO + ICNOO + 2IDNOO + MACRNO2 + ClO + HOCl + ClNO2 + 2ClNO3 + 2Cl2O2 + 2OClO + O + O1D + IO + HOI + IONO + 2IONO2 + 2OIO + 2I2O2 + 3I2O3 + 4I2O4;
LOx : O3 + NO2 + 2NO3 + PAN + PPN + MPAN + HNO4 + 3N2O5 + HNO3 + BrO + HOBr + BrNO2 + 2BrNO3 + MPN + ETHLN + MVKN + MCRHN + MCRHNB + PROPNN + R4N2 + PRN1 + PRPN + R4N1 + HONIT + MONITS + MONITU + OLND + OLNN + IHN1 + IHN2 + IHN3 + IHN4 + INPB + INPD + ICN + 2IDN + ITCN + ITHN + ISOPNOO1 + ISOPNOO2 + INO2B + INO2D + INA + IDHNBOO + IDHNDOO1 + IDHNDOO2 + IHPNBOO + IHPNDOO + ICNOO + 2IDNOO + MACRNO2 + ClO + HOCl + ClNO2 + 2ClNO3 + 2Cl2O2 + 2OClO + O + O1D + IO + HOI + IONO + 2IONO2 + 2OIO + 2I2O2 + 3I2O3 + 4I2O4;
PCO : CO;
LCO : CO;
PSO4 : SO4;
LCH4 : CH4;
PH2O2 : H2O2;

#INLINE F90_RATES
  !#########################################################################
  !#####          RATE-LAW FUNCTIONS FOR GAS-PHASE REACTIONS           #####
  !#########################################################################

  FUNCTION ARRPLUS_ade( a0, d0, e0 ) RESULT( k )
    ! Modified Arrhenius law, skipping computation of EXP( -b0/T )
    ! and ( 300/T )**c0 terms, which evaluate to 1 when b0 = c0 = 0.
    ! This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    ! Used to compute the rate for these reactions:
    !    IHOO1 + IHOO1 = 2MVK  + 2HO2 + 2CH2O
    !    IHOO4 + IHOO4 = 2MACR + 2HO2 + 2CH2O
    !    IHOO1 + IHOO4 = MACR + MVK + 2HO2 + 2CH2O
    !    IHOO1 + IHOO1 = HO2 + HC5A + CO + OH +  MVKHP
    !    IHOO4 + IHOO4 = HO2 + HC5A + CO + OH +  MCRHP
    !    IHOO1 + IHOO4 = HO2 + HC5A + CO + OH +  0.5MVKHP + 0.5MCRHP
    !    IHOO1 + MO2   = MVK + 2HO2 + 2CH2O :
    !    IHOO1 + MO2   = CH2O + 0.5HC5A + 1.5HO2 + 0.5MVKHP + 0.5CO + 0.5OH
    !    IHOO4 + MO2   = MACR + 2HO2 + 2CH2O
    !    IHOO4 + MO2   = CH2O + 0.5HC5A + 1.5HO2 +  0.5MCRHP + 0.5CO + 0.5OH
    !
    REAL(kind=dp), INTENT(IN) :: a0, d0, e0
    REAL(kind=dp)             :: k
    !
    k = a0 * ( d0 + ( TEMP * e0 ) )
    k = MAX( k, 0.0_dp )
  END FUNCTION ARRPLUS_ade

  FUNCTION ARRPLUS_abde( a0, b0, d0, e0 ) RESULT( k )
    ! Modified Arrhenius law, skipping computation of ( T/300 )**c0,
    ! which evaluates to 1 when c0=0.  This avoids excess CPU cycles.
    ! (bmy, 12/18/20)
    !
    ! Used to compute the rate for these reactions:
    !    IHOO1 + HO2 = 0.063MVK + 0.063OH + 0.063HO2 + 0.063CH2O + 0.937RIPA
    !    IHOO1 + HO2 = RIPC
    !    IHOO4 + HO2 = 0.063MACR + 0.063OH + 0.063HO2 + 0.063CH2O + 0.937RIPB
    !    IHOO4 + HO2 = RIPD
    !    IHOO1       = CH2O + OH + MVK
    !    IHOO4       = MACR + OH + CH2O
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, d0, e0
    REAL(kind=dp)             :: k
    !
    k = a0 * ( d0 + ( TEMP * e0 ) ) * EXP( -b0 / TEMP )
    k = MAX( k, 0.0_dp )
  END FUNCTION ARRPLUS_abde

  FUNCTION TUNPLUS_abcde( a0, b0, c0, d0, e0 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    IHOO1 = 1.5OH + ...
    !    IHOO4 = 1.5OH + ...
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0, d0, e0
    REAL(kind=dp)             :: k
    !
    k = a0 * ( d0 + ( TEMP * e0 ) )
    k = k * EXP( b0 / TEMP ) * EXP( c0 / TEMP**3 )
    k = MAX( k, 0.0_dp )
  END FUNCTION TUNPLUS_abcde

  FUNCTION GC_ISO1( a0, b0, c0, d0, e0, f0, g0 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    ISOP + OH = LISOPOH + IHOO1
    !    ISOP + OH = LISOPOH + IHOO4
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0, d0, e0, f0, g0
    REAL(kind=dp)             :: k0, k1, k2, k
    !
    k0 = d0 * EXP( e0 / TEMP ) * EXP( 1.0E8_dp / TEMP**3 )
    k1 = f0 * EXP( g0 / TEMP )
    k2 = c0 * k0 / ( k0 + k1 )
    k  = a0 * EXP( b0 / TEMP ) * ( 1.0_dp - k2 )
  END FUNCTION GC_ISO1

  FUNCTION GC_ISO2( a0, b0, c0, d0, e0, f0, g0 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    ISOP + OH = 0.3MCO3 + 0.3MGLY + 0.3CH2O
    !              + 0.15HPALD3 + 0.25HPALD1 + 0.4HO2
    !              + 0.6CO + 1.5OH + 0.3HPETHNL + LISOPOH
    !    ISOP + OH = 0.3CH2O + 0.15HPALD4 + 0.25HPALD2
    !              + 1.5OH + 0.9CO + 0.7HO2 + 0.3MGLY
    !              + 0.3ATOOH + LISOPOH
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0, d0, e0, f0, g0
    REAL(kind=dp)             :: k0, k1, k2, k
    !
    k0 = d0 * EXP( e0 / TEMP ) * EXP( 1.0E8_dp / TEMP**3 )
    k1 = f0 * EXP( g0 / TEMP )
    k2 = c0 * k0 / ( k0 + k1 )
    k  = a0 * EXP( b0 / TEMP ) * k2
  END FUNCTION GC_ISO2

  FUNCTION GC_EPO_a( a1, e1, m1 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    RIPA   + OH = 0.67IEPOXA   + 0.33IEPOXB   + OH + 0.005LVOC
    !    RIPB   + OH = 0.68IEPOXA   + 0.321IEPOB   + OH + 0.005LVOC
    !    IEPOXA + OH = 0.67IEPOXA00 + 0.33IEPOXB00
    !    IEPOXB + OH = 0.81IEPOXA00 + 0.19IEPOXB00
    !    IHN2   + OH = 0.67IEPOXA   + 0.33IEPOXB   + NO2
    !    IHN3   + OH = 0.67IEPOXA   + 0.33IEPOXB   + NO2
    !    IHN1   + OH = IEPOXD       + NO2
    !    IHN4   + OH = IEPOXD       + NO2
    !    INPB   + OH = OH           + ITHN
    !    INPD   + OH = OH           + ITHN
    !    INPD   + OH = NO2          + ICHE
    !    ICN    + OH = NO2          + ICHE
    !
    REAL(kind=dp), INTENT(IN) :: a1, e1, m1
    REAL(kind=dp)             :: k1, k
    !
    k1 = 1.0_dp / ( m1 * NUMDEN + 1.0_dp )
    k  = a1 * EXP( e1 / TEMP ) *  K1
  END FUNCTION GC_EPO_a

  FUNCTION GC_PAN_acac( a0, c0, a1, c1, cf ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    MACR1OO + NO2 = MPAN
    !    MACRNO2 + NO2 = MPAN + NO2
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    EXP(b0/T)
    !    EXP(b1/T)
    ! because b0 = b1 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, c1, cf
    REAL(kind=dp)             :: k0, k1, kr, nc, f,  k
    !
    k0 = a0 * TEMP_OVER_K300**c0
    k1 = a1 * TEMP_OVER_K300**c1
    k0 = k0 * NUMDEN
    kr = k0 / k1
    nc = 0.75_dp - 1.27_dp * ( LOG10( cf ) )
    f  = 10.0_dp**( LOG10( cf ) / ( 1.0_dp + ( LOG10( kr ) / nc )**2 ) )
    k  = k0 * k1 * f / ( k0 + k1 )
  END FUNCTION GC_PAN_acac

  FUNCTION GC_NIT( a0, b0, c0, n, x0, y0 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    IHOO1    + NO = IHN2
    !    IHOO4    + NO = IHN4
    !    IHPOO1   + NO = IHTN
    !    IHPOO2   + NO = IHTN
    !    IHPOO2   + NO = IHTN
    !    IEPOXAOO + NO = IHTN
    !    IEPOXBOO + NO = IHTN
    !    IHCOO    + NO = IHTN
    !    ISOPNOO1 + NO = IDN
    !    ISOPNOO2 + NO = IDN
    !    IDHNDOO1 + NO = IDN
    !    IDHNDOO2 + NO = IDN
    !    INO2B    + NO = IDN
    !    INO2D    + NO = IDN
    !    IHPNBOO  + NO = IDN
    !    IHPNDOO  + NO = IDN
    !    MVK0HOO  + NO = 0.438MVKN
    !    MCROHOO  + NO = MCRHN
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0, n,  x0, y0
    REAL(kind=dp)             :: k0, k1, k2, k3, k4, k
    !
    k0 = 2.0E-22_dp * EXP( n )
    k1 = 4.3E-1_dp * ( TEMP / 298.0_dp )**(-8)
    k0 = k0 * NUMDEN
    k1 = k0 / k1
    k2 = ( k0 / ( 1.0_dp + k1 ) ) &
       * 4.1E-1_dp**( 1.0_dp / ( 1.0_dp + ( LOG10(k1) )**2) )
    k3 = k2 / ( k2 + c0 )
    k4 = A0 * ( x0 - TEMP*y0 )
    k  = k4 * EXP( b0 / TEMP ) * k3
    k  = MAX( k, 0.0_dp )
  END FUNCTION GC_NIT

  FUNCTION GC_ALK( a0, b0, c0, n, x0, y0 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !   IHOO1    + NO =      NO2 + ...
    !   IHOO4    + NO =      NO2 + ...
    !   IHP001   + NO =      NO2 + ...
    !   IHP002   + NO =      NO2 + ...
    !   IHP003   + NO =      NO2 + ...
    !   IEPOXAOO + NO =      NO2 + ...
    !   IEPOXBOO + NO =      NO2 + ...
    !   ICHOO    + NO =      NO2 + ...
    !   ISOPNOO1 + NO = 1.728NO2 + ...
    !   ISOPNOO2 + NO =      NO2 + ...
    !   IDHNDOO1 + NO =      NO2 + ...
    !   IDHNDOO2 + NO =      NO2 + ...
    !   IDHNBOO  + NO =      NO2 + ...
    !   IDHNDOO  + NO =      NO2 + ...
    !   INO2B    + NO = 2.000NO2 + ...
    !   INO2D    + NO =      NO2 + ...
    !   IHPNBOO  + NO = 1.065NO2 + ...
    !   IHPNDOO  + NO =      NO2 + ...
    !   MVKOHOO  + NO =      NO2 + ...
    !   MCROHOO  + NO =      NO2 + ...
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0, n,  x0, y0
    REAL(kind=dp)             :: k0, k1, k2, k3, k4, k
    !
    k0 = 2.0E-22_dp * EXP( n )
    k1 = 4.3E-1_dp * ( TEMP / 298.0_dp)**(-8)
    k0 = k0 * NUMDEN
    k1 = k0 / k1
    k2 = ( K0 / ( 1.0_dp +K1 ) )                                            &
       * 4.1E-1_dp**( 1.0_dp / ( 1.0_dp + ( LOG10( k1 ) )**2) )
    k3 = c0/ ( k2 + c0 )
    k4 = a0 * ( x0 - TEMP*y0 )
    k  = k4 * EXP( b0 / TEMP ) * k3
    k  = MAX( k, 0.0_dp )
  END FUNCTION GC_ALK

  FUNCTION GCARR_ab( a0, b0 ) RESULT( k )
    ! Arrhenius function, skipping computation of EXP( c0/T ),
    ! which evaluates to 1 when c0=0.  This avoids excess CPU
    ! cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0
    REAL(kind=dp)             :: k
    !
    k = a0 * K300_OVER_TEMP**b0
  END FUNCTION GCARR_ab

  FUNCTION GCARR_ac( a0, c0 ) RESULT( k )
    ! Arrhenius function, skipping computation of ( 300/T )**b0,
    ! which evaluates to 1 when b0=0.  This avoids excess CPU
    ! cycles (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp)             :: k
    !
    k = a0 * EXP( c0 / TEMP )
  END FUNCTION GCARR_ac

  FUNCTION GCARR_abc( a0, b0, c0 ) RESULT( k )
    ! Arrhenius function, using all 3 terms.
    ! Use this when a0, b0, c0 are all nonzero.
    !
    REAL(kind=dp), INTENT(IN) :: a0, b0, c0
    REAL(kind=dp)             :: k
    !
    k = a0 * EXP( c0 / TEMP ) * K300_OVER_TEMP**b0
  END FUNCTION GCARR_abc

  FUNCTION GC_HO2HO2_acac( a0, c0, a1, c1 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    HO2 + HO2 = H2O2 + O2
    !
    ! For this reaction, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1
    ! because b0 = b1 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, c1
    REAL(kind=dp)             :: k0, k1, k
    !
    k0 = a0 * EXP( c0 / TEMP )
    k1 = a1 * EXP( c1 / TEMP )
    k  = ( k0     + k1         * NUMDEN                           )          &
       * ( 1.0_dp + 1.4E-21_dp * H2O    * EXP( 2200.0_dp / TEMP ) )
  END FUNCTION GC_HO2HO2_acac

  FUNCTION GC_TBRANCH_1_acac( a0, c0, a1, c1 ) RESULT( k )
    ! Temperature Dependent Branching Ratio, used for reactions:
    !    MO2 + MO2 = CH2O  + MOH + O2
    !    MO2 + MO2 = 2CH2O + 2HO2
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1
    ! because b0 = b1 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, c1
    REAL(kind=dp)             :: k0, k1, k
    !
    k0 = a0 * EXP( c0 / TEMP )
    k1 = a1 * EXP( c1 / TEMP )
    k  = k0 / ( 1.0_dp + k1 )
  END FUNCTION GC_TBRANCH_1_acac

  FUNCTION GC_TBRANCH_2_acabc( a0, c0, a1, b1, c1 ) RESULT( k )
    ! Temperature Dependent Branching Ratio, used for reactions:
    !    C3H8 + OH = B3O2
    !    C3H8 + OH = A3O2
    !
    ! For these reactions, this Arrhenius law term evaluates to 1:
    !    (300/T)**b0
    ! because b0 = 0.  Therefore we can skip computing this
    ! term.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, b1, c1
    REAL(kind=dp)             :: k0, k1, k
    !
    k0 = a0 * EXP( c0 / TEMP )
    k1 = a1 * EXP( c1 / TEMP ) * K300_OVER_TEMP**b1
    k  = k0 / ( 1.0_dp + k1 )
  END FUNCTION GC_TBRANCH_2_acabc

  FUNCTION GC_RO2HO2_aca( a0, c0, a1 ) RESULT( k )
    ! Carbon Dependence of RO2+HO2, used in these reactions:
    !    A3O2 + HO2 = RA3P
    !    PO2  + HO2 = PP
    !    KO2  + HO2 = 0.150OH + 0.150ALD2 + 0.150MCO3 + 0.850ATOOH
    !    B3O2 + HO2 = RB3P
    !    PRN1 + HO2 = PRPN
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1 * EXP(c1/T)
    ! Because b0 = b1 = c1 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1
    REAL(kind=dp)             :: k
    !
    k = a0 * EXP( c0 / TEMP )
    k = k * ( 1.0_dp - EXP( -0.245_dp * a1 ) )
  END FUNCTION GC_RO2HO2_aca

  FUNCTION GC_DMSOH_acac( a0, c0, a1, c1 ) RESULT( k )
    ! Reaction rate for:
    !    DMS + OH = 0.750SO2 + 0.250MSA + MO2
    !
    ! For this reaction, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1
    ! Because b0 = b1 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, c1
    REAL(kind=dp)             :: k0, k1, k
    !
    k0 = a0 * EXP( c0 / TEMP )
    k1 = a1 * EXP( c1 / TEMP )
    k  = ( k0 * NUMDEN * 0.2095e0_dp ) / ( 1.0_dp + k1 * 0.2095e0_dp )
  END FUNCTION GC_DMSOH_acac

  FUNCTION GC_GLYXNO3_ac( a0, c0 ) RESULT( k )
    ! Reaction rate for:
    !    GLYX + NO3 = HNO3 + HO2 + 2CO
    !    i.e. the HO2 + 2*CO branch
    !
    ! For this reaction, this Arrhenius term evaluates to 1:
    !    (300/T)**b0
    ! because b0 = 0.  Therefore we can skip computing this
    ! term.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp)             :: O2, k
    !
    ! ---  K = K1*([O2]+3.5D18)/(2*[O2]+3.5D18)
    O2 = NUMDEN * 0.2095_dp
    k  = a0 * EXP( c0 / TEMP )
    k   = k * ( O2 + 3.5E+18_dp ) / ( 2.0_dp * O2 + 3.5E+18_dp )
  END FUNCTION GC_GLYXNO3_ac

  FUNCTION GC_OHHNO3_acacac( a0, c0, a1, c1, a2, c2 ) RESULT( k )
    ! Used to compute the rate for these reactions:
    !    HNO3  + OH = H2O + NO3
    !    HONIT + OH = NO3 + HAC
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1
    !    (300/T)**b2
    ! Because b0 = b1 = b2 = 0.  Therefore we can skip computing
    ! these terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, c1, a2, c2
    REAL(kind=dp)             :: k0, k1, k2, k
    !
    ! ---  OH + HNO3:   K = K0 + K3[M] / (1 + K3[M]/K2)  ------
    k0   = a0 * EXP( c0 / TEMP )
    k1   = a1 * EXP( c1 / TEMP )
    k2   = NUMDEN * ( a2 * EXP( c2 / TEMP ) )
    k = k0 + k2 / ( 1.0_dp + k2/k1 )
  END FUNCTION GC_OHHNO3_acacac

  FUNCTION GC_GLYCOH_A_a( a0 ) RESULT( k )
    ! Used to compute the rate for this reaction:
    !    GLYC + OH = 0.732CH2O + 0.361CO2  + 0.505CO    + 0.227OH
    !              + 0.773HO2  + 0.134GLYX + 0.134HCOOH
    ! which is the "A" branch of GLYC + OH.
    !
    ! For this reaction, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0 * EXP(c0/T)
    ! Because b0 = c0 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0
    REAL(kind=dp)             :: glyc_frac, k
    REAL(kind=dp), PARAMETER  :: exp_arg = -1.0_dp / 73.0_dp
    !
    glyc_frac = 1.0_dp - 11.0729_dp * EXP( exp_arg * TEMP )
    glyc_frac = MAX( glyc_frac, 0.0_dp )
    k         = a0 * glyc_frac
  END FUNCTION GC_GLYCOH_A_a

  FUNCTION GC_GLYCOH_B_a( a0 ) RESULT( k )
    ! Used to compute the rate for this reaction:
    !    GLYC + OH = HCOOH + OH + CO
    ! which is the "B" branch of GLYC + OH.
    !
    ! For this reaction, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0 * EXP(c0/T)
    ! Because b0 = c0 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0
    REAL(kind=dp)             :: glyc_frac, k
    REAL(kind=dp), PARAMETER  :: exp_arg = -1.0_dp / 73.0_dp
    !
    glyc_frac = 1.0_dp - 11.0729_dp * EXP( exp_arg * TEMP )
    glyc_frac = MAX( glyc_frac, 0.0_dp )
    k         = a0 * ( 1.0_dp - glyc_frac )
  END FUNCTION GC_GLYCOH_B_a

  FUNCTION GC_HACOH_A_ac( a0, c0 ) RESULT( k )
    ! Used to compute the rate for this reaction:
    !    HAC + OH = MGLY + HO2
    ! which is the "A" branch of HAC + OH.
    !
    ! For this reaction, this Arrhenius law term evaluates to 1:
    !    (300/T)**b0
    ! because b0 = 0.  Therefore we can skip computing this
    ! term.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp)             :: k0, hac_frac, k
    REAL(kind=dp), PARAMETER  :: exp_arg = -1.0_dp / 60.0_dp
    !
    k0       = a0 * EXP( c0 / TEMP )
    hac_frac = 1.0_dp - 23.7_dp * EXP( exp_arg * TEMP )
    hac_frac = MAX( hac_frac, 0.0_dp )
    k        = k0 * hac_frac
  END FUNCTION GC_HACOH_A_ac

  FUNCTION GC_HACOH_B_ac( a0, c0 ) RESULT( k )
    ! Used to compute the rate for this reaction:
    !    HAC + OH = 0.5HCOOH + OH + 0.5ACTA + 0.5CO2 + 0.5CO + 0.5MO2
    ! which is the "B" branch of HAC + OH.
    !
    ! For this reaction, this Arrhenius law term evaluates to 1:
    !    (300/T)**b0}
    ! because b0 = 0.  Therefore we can skip computing this
    ! term.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp)             :: k0, hac_frac, k
    REAL(kind=dp), PARAMETER  :: exp_arg = -1.0_dp / 60.0_dp
    !
    k0       = a0 * EXP( c0 / TEMP )
    hac_frac = 1.0_dp - 23.7_dp * EXP( exp_arg * TEMP )
    hac_frac = MAX( hac_frac, 0.0_dp )
    k        = k0 * ( 1.0_dp - hac_frac )
  END FUNCTION GC_HACOH_B_ac

  FUNCTION GC_OHCO_a( a0 ) RESULT( k )
    ! Reaction rate for:
    !    OH + CO = HO2 + CO2 (cf. JPL 15-10)
    !
    ! For this reaction, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0 * EXP(c0/T)
    ! because b0 = c0 = 0.  Therefore we can skip computing these
    ! terms.  This avoids excess CPU cycles. (bmy, 12/18/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0
    !
    REAL(kind=dp)             :: r0,     klo1,   klo2,  khi1,    khi2
    REAL(kind=dp)             :: xyrat1, xyrat2, blog1, blog2,   fexp1
    REAL(kind=dp)             :: fexp2,  kco1,   kco2,  TEMP300, k
    !
    r0     = a0 * ( 1.0_dp + 0.6_dp * 9.871E7_dp * PRESS )
    klo1   = 5.9E-33_dp * K300_OVER_TEMP
    khi1   = 1.1E-12_dp * K300_OVER_TEMP**(-1.3_dp)
    xyrat1 = klo1 * NUMDEN / khi1
    blog1  = LOG10( xyrat1 )
    fexp1  = 1.0_dp / ( 1.0_dp + blog1*blog1 )
    kco1   = klo1 * NUMDEN * 0.6_dp**fexp1 / ( 1.0_dp + xyrat1 )
    klo2   = 1.5E-13_dp
    khi2   = 2.1E+09_dp * K300_OVER_TEMP**(-6.1_dp)
    xyrat2 = klo2 * NUMDEN / khi2
    blog2  = LOG10( xyrat2 )
    fexp2  = 1.0_dp / ( 1.0_dp + blog2*blog2 )
    kco2   = klo2 * 0.6_dp**fexp2 / ( 1.0_dp + xyrat2 )
    k      = kco1 + kco2
  END FUNCTION GC_OHCO_a

  FUNCTION GC_RO2NO_A1_ac( a0, c0 ) RESULT( k )
    ! Reaction rate for the "A" branch of these RO2 + NO reactions:
    !    MO2  + NO = MENO3
    ! in which the "a1" parameter equals exactly 1.
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1 * EXP(c1/T)
    ! because b0 = b1 = c1 = 0.  Therefore we can skip computing
    ! these terms.  This avoids excess CPU cycles. (bmy, 1/4/20)
    !
    ! Special treatment for methyl nitrate based on observations
    ! as Carter and Atkinson formulation does not apply to C1.
    ! Value based on upper limit of Flocke et al. 1998 as applied
    ! in Fisher et al. 2018
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp)             :: k
    !
    k  = a0 * EXP( c0 / TEMP ) * 3.0e-4_dp
  END FUNCTION GC_RO2NO_A1_ac

  FUNCTION GC_RO2NO_B1_ac( a0, c0 ) RESULT( k )
    ! Reaction rate for the "B" branch of these RO2 + NO reactions:
    !    MO2 + NO = CH2O + NO2 + HO2
    ! in which the "a1" parameter equals exactly 1.
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1 * EXP(c1/T)
    ! because b0 = c0 = c1 = 0.  Therefore we can skip computing
    ! these terms.  This avoids excess CPU cycles. (bmy, 1/4/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0
    REAL(kind=dp), PARAMETER  :: one_minus_fyrno3 = 1.0_dp - 3.0e-4_dp
    REAL(kind=dp)             :: k
    !
    k = a0 * EXP( c0 / TEMP ) * one_minus_fyrno3
  END FUNCTION GC_RO2NO_B1_ac

  FUNCTION GC_RO2NO_A2_aca( a0, c0, a1 ) RESULT( k )
    ! Reaction rate for the "A" branch of these RO2 + NO reactions,
    !    ETO2 + NO = ETNO3
    !    A3O2 + NO = NPRNO3
    !    R4O2 + NO = R4N2
    !    B3O2 + NO = IPRNO3
    ! in which the "a1" parameter is greater than 1.0.
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1 * EXP(c1/T)
    ! because b0 = b1 = c1 = 0.  Therefore we can skip computing
    ! these terms.  This avoids excess CPU cycles. (bmy, 1/4/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0,  c0,   a1
    REAL(kind=dp)             :: k0,  k, yyyn, xxyn
    REAL(kind=dp)             :: aaa, rarb, zzyn, fyrno3
    !
    k0     = a0 * EXP( c0 / TEMP )
    xxyn   = 1.94e-22_dp * EXP( 0.97_dp * a1 ) * NUMDEN
    yyyn   = 0.826_dp * ( ( 300.0_dp / TEMP )**8.1_dp )
    aaa    = LOG10( xxyn / yyyn )
    zzyn   = ( 1.0_dp / ( 1.0_dp + ( aaa *  aaa  ) ) )
    rarb   = ( xxyn   / ( 1.0_dp + ( xxyn / yyyn ) ) ) * ( 0.411_dp**zzyn )
    fyrno3 = ( rarb   / ( 1.0_dp +   rarb          ) )
    k      = k0 * fyrno3
  END FUNCTION GC_RO2NO_A2_aca

  FUNCTION GC_RO2NO_B2_aca( a0, c0, a1 ) RESULT( k )
    ! Reaction rate for the "B" branch of these RO2 + NO reactions:
    !    ETO2 + NO = NO2 +     HO2 + ...
    !    A3O2 + NO = NO2 +     HO2 + ...
    !    R4O2 + NO = NO2 + 0.27HO2 + ...
    !    B3O2 + NO = NO2 +     HO2 + ...
    ! in which the "a1" parameter is greater than 1.0.
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    (300/T)**b1 * EXP(c1/T)
    ! because b0 = c0 = c1 = 0.  Therefore we can skip computing
    ! these terms.  This avoids excess CPU cycles. (bmy, 1/4/20)
    !
    ! Use this function when a1 input argument is greater than 1.0.
    ! This avoids IF statements, which saves CPU cycles (bmy, 1/4/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0,  c0,   a1
    REAL(kind=dp)             :: k0,  k, yyyn, xxyn
    REAL(kind=dp)             :: aaa, rarb, zzyn, fyrno3
    !
    k0     = a0 * EXP( c0 / TEMP )
    xxyn   = 1.94e-22_dp * EXP(  0.97_dp * a1 ) * NUMDEN
    yyyn   = 0.826_dp * ( K300_OVER_TEMP**8.1_dp )
    aaa    = LOG10( xxyn / yyyn )
    zzyn   = ( 1.0_dp / ( 1.0_dp + ( aaa  * aaa  ) ) )
    rarb   = ( xxyn   / ( 1.0_dp + ( xxyn / yyyn ) ) ) * ( 0.411_dp**zzyn )
    fyrno3 = ( rarb   / ( 1.0_dp +   rarb          ) )
    k      = k0 * ( 1.0_dp - fyrno3 )
  END FUNCTION GC_RO2NO_B2_aca

  FUNCTION GCJPLEQ_acabab( a0, c0, a1, b1, a2, b2, fv ) RESULT( k )
    ! Calculates the equilibrium constant
    ! Find the backwards reaction by K=kforward/kbackwards
    ! Calculates the rate constant of the forward reaction
    !
    ! Used to compute the rate for these reactions:
    !    PPN        = RCO3 + NO2
    !    PAN        = MCO3 + NO2
    !    ClOO  {+M} = Cl   + O2 {+M}
    !    Cl2O2 {+M} = 2ClO      {+M}
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b0
    !    EXP(c1/T)
    !    EXP(c2/T)
    ! because b0 = c1 = c2 = 0.  Therefore we can skip computing these terms.
    ! Also, fct1 = fct2 = 0, so we will skip those terms as well.  This is
    ! more computationally efficient. (bmy, 1/25/20)
    !
    REAL(kind=dp), INTENT(IN) :: a0, c0, a1, b1, a2, b2, fv
    REAL(kind=dp)             :: k0, k1, k
    !
    k0 = a0 * EXP( c0 / TEMP )               ! backwards rxn rate
    k1 = GCJPLPR_abab( a1, b1, a2, b2, fv )  ! forwards rxn rate
    k  = k1 / k0
  END FUNCTION GCJPLEQ_acabab

  FUNCTION GCJPLPR_aa( a1, a2, fv ) RESULT( k )
    ! Third body effect for pressure dependence of rate coefficients.
    ! a1 is Arrhenius parameters for the lower-limit rate.
    ! a2 is Arrhenius parameters for the upper-limit rate.
    ! fv is the falloff curve paramter, (see ATKINSON ET. AL (1992)
    ! J. Phys. Chem. Ref. Data 21, P. 1145). Usually fv = 0.6.
    !
    ! Used to compute the rate for this reaction:
    !    Cl + PRPE {+M} = HCl + PO2 {+M}
    !
    ! For this reactions, these Arrhenius law terms evaluate to 1:
    !    (300/T)**b1 * EXP(c1/T)
    !    (300/T)**b2 * EXP(c2/T)
    ! because b1 = b2 = c1 = c2 = 0.  Therefore we can skip computing
    ! these terms.  Also, fct1 = fct2 = 0, so we will skip computing
    ! these terms as well.  This is more computationally efficient.
    ! (bmy, 1/25/20)
    !
    REAL(kind=dp), INTENT(IN) :: a1,   a2,    fv
    REAL(kind=dp)             :: rlow, xyrat, blog, fexp, k
    !
    rlow  = a1 * NUMDEN
    xyrat = rlow / a2         ! rhigh = a2
    blog  = LOG10( xyrat )
    fexp  = 1.0_dp / ( 1.0_dp + ( blog * blog ) )
    k     = rlow * ( fv**fexp ) / ( 1.0_dp + xyrat )
  END FUNCTION GCJPLPR_aa

  FUNCTION GCJPLPR_aba( a1, b1, a2, fv ) RESULT( k )
    ! Third body effect for pressure dependence of rate coefficients.
    ! a1, b1 are the Arrhenius parameters for the lower-limit rate.
    ! a2     is  the Arrhenius parameters for the upper-limit rate.
    ! fv     is the falloff curve paramter, (see ATKINSON ET. AL (1992)
    !        J. Phys. Chem. Ref. Data 21, P. 1145). Usually fv = 0.6.
    !
    ! Used to compute the rate for these reactions:
    !    OH  + OH  {+M} = H2O2
    !    NO2 + OH  {+M} = HNO3       {+M}
    !    Cl  + O2  {+M} = ClOO       {+M}
    !    SO2 + OH  {+M} = SO4  + HO2
    !    Br  + NO2 {+M} = BrNO2      {+M}
    !    NO  + O   {+M} = NO2        {+M}
    !    I   + NO2 {+M} = IONO       {+M}
    !    I   + NO  {+M} = INO        {+M}
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    EXP(c1/T)
    !    (300/T)**b2 * EXP(c2/T)
    ! because b2 = c1 = c2 = 0.  Therefore we can skip computing these
    ! terms.  Also, fct1 = fct2 = 0, so we will skip computing these
    ! terms as well.  This is more computationally efficient.
    ! (bmy, 1/25/20)
    !
    REAL(kind=dp), INTENT(IN) :: a1,   b1,    a2,   fv
    REAL(kind=dp)             :: rlow, xyrat, blog, fexp, k
    !
    rlow  = a1 * ( K300_OVER_TEMP**b1 ) * NUMDEN
    xyrat = rlow / a2                                  ! rhigh = a2
    blog  = LOG10( xyrat )
    fexp  = 1.0_dp / ( 1.0_dp + ( blog * blog ) )
    k     = rlow * ( fv**fexp ) / ( 1.0_dp + xyrat )
  END FUNCTION GCJPLPR_aba

  FUNCTION GCJPLPR_abab( a1, b1, a2, b2, fv ) RESULT( k )
    ! Third body effect for pressure dependence of rate coefficients.
    ! a1, b1 are the Arrhenius parameters for the lower-limit rate.
    ! a2, b2 are the Arrhenius parameters for the upper-limit rate.
    ! fv     is the falloff curve paramter, (see ATKINSON ET. AL (1992)
    !        J. Phys. Chem. Ref. Data 21, P. 1145). Usually fv = 0.6.
    !
    ! Used to compute the rate for these reactions:
    !    NO   + OH  {+M} = HNO2  {+M}
    !    HO2  + NO2 {+M} = HNO4
    !    NO2  + NO3 {+M} = N2O5
    !    ClO  + NO2 {+M} = ClNO3 {+M}
    !    MCO3 + NO2 {+M} = PAN
    !    RCO3 + NO2 {+M} = PPN
    !    PRPE + OH  {+M} = PO2
    !    MO2  + NO2 {+M} = MPN   {+M}
    !    BrO  + NO2 {+M} = BrNO3 {+M}
    !    NO2  + O   {+M} = NO3   {+M}
    !    H    + O2  {+M} = HO2   {+M}
    !    IO   + NO2 {+M} = IONO2 {+M}
    !
    ! For these reactions, these Arrhenius law terms evaluate to 1:
    !    EXP(c1/T)
    !    EXP(c2/T)
    ! because c1 = c2 = 0.  Therefore we can skip computing these
    ! terms.  Also, fct1 = fct2 = 0, so we will skip computing these
    ! terms as well.  This is more computationally efficient.
    ! (bmy, 1/25/20)
    !
    REAL(kind=dp), INTENT(IN) :: a1,   b1,    a2,    b2,   fv
    REAL(kind=dp)             :: rlow, rhigh, xyrat, blog, fexp, k
    !
    rlow  = a1 * ( K300_OVER_TEMP**b1 ) * NUMDEN
    rhigh = a2 * ( K300_OVER_TEMP**b2 )
    xyrat = rlow / rhigh
    blog  = LOG10( xyrat )
    fexp  = 1.0_dp / ( 1.0_dp + ( blog * blog ) )
    k     = rlow * ( fv**fexp ) / ( 1.0_dp + xyrat )
  END FUNCTION GCJPLPR_abab

  FUNCTION GCJPLPR_abcabc( a1, b1, c1, a2, b2, c2, fv ) RESULT( k )
    ! Third body effect for pressure dependence of rate coefficients.
    ! a1, b1, c1 are the Arrhenius parameters for the lower-limit rate.
    ! a2, b2, c2 are the Arrhenius parameters for the upper-limit rate.
    ! fv         is the falloff curve paramter, (see ATKINSON ET. AL (1992)
    !           J. Phys. Chem. Ref. Data 21, P. 1145). Usually fv = 0.6.
    !
    ! Used to compute the rate for these reactions:
    !    HNO4 {+M} = HO2 + NO2
    !    N2O5 {+M} = NO2 + NO3
    !    MPN  {+M} = MO2 + NO2
    !
    REAL(kind=dp), INTENT(IN) :: a1,   b1,    c1,    a2,   b2,   c2,  fv
    REAL(kind=dp)             :: rlow, rhigh, xyrat, blog, fexp, k
    !
    rlow  = a1 * ( K300_OVER_TEMP**b1 ) * EXP( c1 / TEMP ) * NUMDEN
    rhigh = a2 * ( K300_OVER_TEMP**b2 ) * EXP( c2 / TEMP )
    xyrat = rlow / rhigh
    blog  = LOG10( xyrat )
    fexp  = 1.0_dp / ( 1.0_dp + ( blog * blog ) )
    k     = rlow * ( fv**fexp ) / ( 1.0_dp + xyrat )
  END FUNCTION GCJPLPR_abcabc

  !#########################################################################
  !#####        RATE-LAW FUNCTIONS FOR HETEROGENEOUS REACTIONS         #####
  !#####                                                               #####
  !#####     Use "=>" to denote fields of derived-type objects;        #####
  !#####     KPP 2.3.2_gc+ will convert them to percent signs.         #####
  !#########################################################################

  FUNCTION Ars_L1k( area, radius, gamma, srMw ) RESULT( k )
    !
    ! Calculates the 1st-order loss rate of species on wet aerosol surface.
    !
    REAL(dp), INTENT(IN) :: area, radius, gamma, srMw
    REAL(dp)             :: k, dfkg
    !
    ! If gamma or radius is very small, set rate to zero and return
    IF ( gamma < 1.0e-30_dp .or. radius < 1.0e-30_dp ) THEN
       k = 0.0_dp
       RETURN
    ENDIF
    !
    ! DFKG = Gas phase diffusion coeff [cm2/s] (order of 0.1)
    dfkg = ( 9.45E+17_dp / NUMDEN ) * SR_TEMP *                              &
           SQRT( 3.472E-2_dp + 1.0_dp / ( srMw * srMw ) )
    !
    ! Compute ArsL1k according to the formula listed above
    k = area / ( (radius / dfkg) + 2.749064E-4_dp * srMw / (gamma * SR_TEMP) )
  END FUNCTION Ars_L1k

  FUNCTION kIIR1Ltd( concGas, concEduct, kISource ) RESULT( kII )
    !
    ! Determines removal rates for both species in an uptake reaction.
    !
    REAL(dp), INTENT(IN) :: concGas, concEduct, kIsource
    REAL(dp)             :: kIGas,   kIEduct,   lifeA, lifeB, kII
    !
    ! Copy kI as calculated assuming no limitation
    kIGas   = 0.0_dp
    kIEduct = 0.0_dp
    kII     = 0.0_dp
    !
    IF ( concEduct > 0.0_dp .and. concEduct < 100.0_dp ) THEN
       kIGas   = kISource
       kIEduct = kIGas    * concGas / concEduct
       kII     = kIGas              / concEduct
    ENDIF
    !
    ! Enforce a minimum lifetime?
    IF ( kIGas > 0.0_dp ) THEN
       !
       ! Calculate lifetime of each reactant against removal
       lifeA = 0.0_dp
       lifeB = 0.0_dp
       IF ( kIGas   > 0.0_dp ) lifeA = 1.0_dp / kiGas
       IF ( kIEduct > 0.0_dp ) lifeB = 1.0_dp / kiEduct
       !
       ! Check if either lifetime is "too short"
       IF ( ( lifeA < lifeB ) .and. ( lifeA < HETMINLIFE ) ) THEN
          kIGas = 0.0_dp
          kII   = 0.0_dp
          IF ( concEduct > 0.0_dp ) THEN
             kIGas = HETMINRATE
             kII   = kIGas  / concEduct
          ENDIF
       ELSE IF ( lifeB < HETMINLIFE ) THEN
          kIEduct = 0.0_dp
          kII     = 0.0_dp
          IF ( concGas > 0.0_dp ) THEN
             kIEduct = HETMINRATE
             kII     = kIEduct / concGas
          ENDIF
       ENDIF
    ENDIF
  END FUNCTION kIIR1Ltd

  !=========================================================================
  ! Rate-law functions for VOC species
  !=========================================================================

  FUNCTION HO2uptk1stOrd( srMw, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for 1st order uptake of HO2.
    !
    REAL(dp),       INTENT(IN) :: srMw           ! sqrt( mol wt )
    TYPE(HetState), INTENT(IN) :: H              ! HetChem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    k = 0.0_dp
    !
    ! Uptake by mineral dust (aerosol types 1-7)
    k = k + Ars_L1k( H=>xArea(1 ), H=>xRadi(1 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(2 ), H=>xRadi(2 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(3 ), H=>xRadi(3 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(4 ), H=>xRadi(4 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(5 ), H=>xRadi(5 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(6 ), H=>xRadi(6 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(7 ), H=>xRadi(7 ), H=>gamma_HO2, srMw )
    !
    ! Uptake by tropospheric sulfate, BC, and OC (aerosol types 8-10)
    k = k + Ars_L1k( H=>xArea(8 ), H=>xRadi(8 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(9 ), H=>xRadi(9 ), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(10), H=>xRadi(10), H=>gamma_HO2, srMw )
    !
    ! Uptake by fine & coarse sea salt (aerosol types 11-12)
    k = k + Ars_L1k( H=>xArea(11), H=>xRadi(11), H=>gamma_HO2, srMw )
    k = k + Ars_L1k( H=>xArea(12), H=>xRadi(12), H=>gamma_HO2, srMw )
    !
    ! Skip uptake on strat sulfate (#13) and irregular ice cloud (#14)
  END FUNCTION HO2uptk1stOrd

  !=========================================================================
  ! Rate-law functions for iodine species
  ! (HI, HOI, I2O2, I2O3, I2O4, IONO2, IONO3)
  !=========================================================================

  FUNCTION IuptkBySulf1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for uptake of iodine species
    ! by sulfate (aerosol types #8 and #13).
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ), rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    ! Uptake rate of iodine by tropospheric sulfate (N=8)
    k = Ars_L1k( H=>xArea(8), H=>xRadi(8), gamma, srMw )

    ! For UCX-based mechanisms also allow reaction on stratospheric
    ! sulfate (N=13) if tropospheric sulfate is requested (N=8)
    IF ( H=>is_UCX ) THEN
       k = k + Ars_L1k( H=>xArea(13), H=>xRadi(13), gamma, srMw )
    ENDIF
  END FUNCTION IuptkBySulf1stOrd

  FUNCTION IuptkBySALA1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for uptake of iodine species
    ! by accumulation-mode sea-salt aerosol.
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ) rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    k = Ars_L1k( H=>xArea(11), H=>xRadi(11), gamma, srMw )
  END FUNCTION IuptkbySALA1stOrd

  FUNCTION IuptkByAlkSALA1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for uptake of iodine species
    ! by alkaline accumulation-mode sea-salt aerosol.
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ) rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    k = 0.0_dp
    IF ( H=>ssFineIsAlk ) THEN
       k = IuptkBySALA1stOrd( srMw, gamma, H )
    ENDIF
  END FUNCTION IuptkbyAlkSALA1stOrd

  FUNCTION IuptkBySALC1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for uptake of iodine species
    ! by coarse-mode sea-salt aerosol.
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ), rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    k = Ars_L1k( H=>xArea(12), H=>xRadi(12), gamma, srMw )
  END FUNCTION IuptkBySALC1stOrd

  FUNCTION IuptkByAlkSALC1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for uptake of iodine species
    ! by alkaline coarse-mode sea-salt aerosol.
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ), rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    k = 0.0_dp
    IF ( H=>ssCoarseIsAlk ) THEN
       k = IuptkBySALC1stOrd( srMw, gamma, H )
    ENDIF
  END FUNCTION IuptkByAlkSALC1stOrd

  FUNCTION IbrkdnByAcidBrSALA( srMw, conc, gamma, H ) RESULT( k )
    !
    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
    ! Assume a ratio of IBr:ICl = 0.15:0.85
    !
    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
    TYPE(HetState), INTENT(IN) :: H
    REAL(dp)                   :: k     
    !
    k = 0.0_dp
    IF ( H=>ssFineIsAcid ) THEN
       k = 0.15_dp * IuptkBySALA1stOrd( srMw, gamma, H )
       k = kIIR1Ltd( conc, C(ind_BrSALA), k )
    ENDIF
  END FUNCTION IbrkdnbyAcidBrSALA

  FUNCTION IbrkdnByAcidBrSALC( srMw, conc, gamma, H ) RESULT( k )
    !
    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
    ! Assume a ratio of IBr:ICl = 0.15:0.85
    !
    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
    TYPE(HetState), INTENT(IN) :: H
    REAL(dp)                   :: k     
    !
    k = 0.0_dp
    IF ( H=>ssCoarseIsAcid ) THEN
       k = 0.15_dp * IuptkBySALC1stOrd( srMw, gamma, H )
       k = kIIR1Ltd( conc, C(ind_BrSALC), k )
    ENDIF
  END FUNCTION IbrkdnbyAcidBrSALC

  FUNCTION IbrkdnByAcidSALACl( srMw, conc, gamma, H ) RESULT( k )
    !
    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
    ! Assume a ratio of IBr:ICl = 0.15:0.85
    !
    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
    TYPE(HetState), INTENT(IN) :: H
    REAL(dp)                   :: k     
    !
    k = 0.0_dp
    IF ( H=>ssFineIsAcid ) THEN
       k = 0.85_dp * IuptkBySALA1stOrd( srMw, gamma, H )
       k = kIIR1Ltd( conc, C(ind_SALACl), k )
    ENDIF
  END FUNCTION IbrkdnbyAcidSALACl

  FUNCTION IbrkdnByAcidSALCCl( srMw, conc, gamma, H ) RESULT( k )
    !
    ! Breakdown of iodine species on acidic sea-salt (accumulation mode)
    ! Assume a ratio of IBr:ICl = 0.15:0.85
    !
    REAL(dp),       INTENT(IN) :: srMw, conc, gamma
    TYPE(HetState), INTENT(IN) :: H
    REAL(dp)                   :: k     
    !
    k = 0.0_dp
    IF ( H=>ssCoarseIsAcid ) THEN
       k = 0.85_dp * IuptkBySALC1stOrd( srMw, gamma, H )
       k = kIIR1Ltd( conc, C(ind_SALCCl), k )
    ENDIF
  END FUNCTION IbrkdnbyAcidSALCCl

  !=========================================================================
  ! Rate-law functions for VOC species
  !=========================================================================

  FUNCTION GLYXuptk1stOrd( srMw, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for 1st-order uptake of GLYX.
    ! Only consider inorganic aqueous aerosols with RH > 35%
    ! and use diffe rent uptake for day & night.
    !
    REAL(dp),       INTENT(IN) :: srMw   ! sqrt( mol wt )
    TYPE(HetState), INTENT(IN) :: H      ! Hetchem State
    REAL(dp)                   :: k      ! rxn rate [1/s]
    REAL(dp)                   :: gamma  ! local vars
    !
    k     = 0.0_dp
    gamma = 0.0_dp
    !
    IF ( RELHUM >= CRITRH ) THEN
       IF ( SUNCOS > 0.0_dp ) THEN
          gamma = 4.4e-3_dp   ! cf Liggio et al 2005
       ELSE
          gamma = 8.0e-6_dp   ! F. McNeill, to E. Marais (2015)
       ENDIF
       k = k + Ars_L1k( H=>xArea(8), H=>xRadi(8), gamma, srMw )
    ENDIF
  END FUNCTION GLYXuptk1stOrd

  FUNCTION EpoxUptkGamma( srMw, H ) RESULT( gamma )
    !
    ! Gomputes the GAMMA uptake probability for EPOXUPTK hydrolysis to
    ! form 2-methyltetrols (AITET). (eam, 2014).
    !
    ! Calculation is only done for inorganic aqueous phase aerosols.
    ! This calculation uses the parameterization of Gaston et al., EST, 2014.
    ! Redistribution of products (e.g. AITET) to yield organosulfates and
    ! organonitrates is done in SOA_CHEMISTRY in carbon_mod.F.
    ! This is only done for IEPOX and HMML if it's an SOA simulation
    !
    REAL(dp),       INTENT(IN) :: srMw           ! sqrt(mol wt)
    TYPE(HetState), INTENT(IN) :: H              ! HetChem State
    REAL(dp)                   :: gamma          ! Uptake prob [1]
    REAL(dp) :: aervol, kpart, xmms, val1, val2, val3, valtmp ! local vars
    !
    ! Gas-phase diffusion constant [cm2/s]:
    REAL(dp), PARAMETER :: DIFF_N2O5_STD = 1.0e-1_dp
    !
    ! Mass accommodation coefficient [unitless]:
    REAL(dp), PARAMETER :: MACOEFF = 1.0e-1_dp
    REAL(dp), PARAMETER :: K_HPLUS = 3.6e-2_dp
    REAL(dp), PARAMETER :: K_NUC   = 2.0e-4_dp
    REAL(dp), PARAMETER :: K_HSO4  = 7.3e-4_dp
    REAL(dp), PARAMETER :: K_HYDRO = 0.0e+0_dp
    !
    ! Initialize
    gamma  = 0.0_dp
    valTmp = 0.0_dp
    !
    ! Calculate aerosol volume (use formula in aerosol_mod.F):
    aerVol = ( H=>xArea(8) *  H=>xRadi(8) ) / 3.0_dp
    !
    ! Calculate mean molecular speed [cm/s]:
    xmms = SQRT( ( 2.117e+8_dp * TEMP ) / ( srMw * srMw ) )
    !
    ! Calculate first-order particle-phase reaction rate:
    ! (assume [H+] = proton activity)
    ! KHYDRO is only important for alkylnitrates (not currently used).
    kPart = ( K_HPLUS * H=>H_PLUS                          ) &
          + ( K_NUC   * H=>H_PLUS * ( H=>mNO3 + H=>mSO4 )    ) &
          + ( K_HSO4  * H=>mHSO4                           ) &
          + ( K_HYDRO                                     )
    !
    ! Calculate the first uptake parameterization term:
    val1 = ( H=>xRadi(8) * xmms ) / ( 4.0_dp * DIFF_N2O5_STD )
    !
    ! Calculate the second uptake parameterization term:
    val2 = ( 1.0_dp / MACOEFF )
    !
    ! Calculate the third uptake parameterization term:
    IF ( H=>xArea(8) > 0.0_dp .and. XMMS > 0.0_dp ) THEN
       valTmp = ( 4.0_dp * aerVol * H=>RGASLATM * TEMP * HSTAR_EPOX * kPart )&
              / ( H=>xArea(8) * xmms                                        )
    ENDIF
    !
    val3 = 0.0_dp
    IF ( valTmp > 0.0_dp ) val3 = 1.0_dp / valtmp
    !
    ! Account for small reaction rates:
    gamma = 0.0_dp
    IF ( kPart >= 1.e-8_dp ) gamma = 1.0_dp / ( val1 + val2 + val3 )
    IF ( gamma <  0.0_dp   ) gamma = 0.0_dp
  END FUNCTION EpoxUptkGamma

  FUNCTION IEPOXuptk1stOrd( srMw, doScale, H ) RESULT( k )
    !
    ! Sets the heterogenous chemistry rate for first-order
    ! uptake of ICHE, IEPOXA, IEPOXB, and IEPOXD.
    !
    REAL(dp),       INTENT(IN) :: srMw           ! sqrt( mol wt )
    LOGICAL,        INTENT(IN) :: doScale        ! =T for HMML, else F
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    REAL(dp)                   :: gamma          ! local vars
    !
    k     = 0.0_dp
    gamma = 0.0_dp
    !
    ! Only consider inorganic aqueous aerosols with RH > 35%.
    IF ( RELHUM >= CRITRH ) THEN
       !
       ! Get GAMMA for IEPOX hydrolysis
       gamma = EpoxUptkGamma( srMw, H )
       !
       ! Scale down gamma if [H+] > 8d-5 (cf Riedel et al, 2015)
       IF ( doScale .and. ( H=>H_PLUS > 8.0e-5_dp ) ) THEN
          gamma = gamma / 30.0_dp
       ENDIF
       !
       ! Uptake by tropospheric sulfate (aerosol type 8)
       k = k + Ars_L1k( H=>xArea(8), H=>xRadi(8), gamma, srMw )
    ENDIF
  END FUNCTION IEPOXuptk1stOrd

  FUNCTION MGLYuptk1stOrd( srMw, H ) RESULT( k )
    !
    ! Computes the reaction rate [1/s] for 1st order uptake of MGLY and PYAC.
    !
    REAL(dp),       INTENT(IN) :: srMw           ! sqrt( mol wt )
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: gamma, k       ! rxn prob [1], rxn rate [1/s]
    !
    k     = 0.0_dp
    gamma = 0.0_dp
    !
    ! Only consider inorganic aqueous aerosols with RH > 35%.
    IF ( RELHUM >= CRITRH ) THEN
       !
       ! Define gamma for MGLY: Obtained by scaling gamma GLYX by the
       ! ratio of effective Henry's law constants for GLYX (3d7) and
       ! MGLY (3.7d3) (eam, 02/2015):
       gamma = 3.6e-7_dp
       !
       ! Uptake by tropospheric sulfate (aerosol type 8)
       k = k + Ars_L1k( H=>xArea(8), H=>xRadi(8), gamma, srMw )
    ENDIF
  END FUNCTION MGLYuptk1stOrd

  FUNCTION VOCuptk1stOrd( srMw, gamma, H ) RESULT( k )
    !
    ! Computes the rxn rate [1/s]for 1st-order uptake of several VOC species.
    !
    REAL(dp),       INTENT(IN) :: srMw, gamma    ! sqrt( mol wt ), rxn prob
    TYPE(HetState), INTENT(IN) :: H              ! Hetchem State
    REAL(dp)                   :: k              ! rxn rate [1/s]
    !
    ! Initialize
    k  = 0.0_dp
    !
    ! Only consider inorganic aqueous aerosols with RH > 35%.
    IF ( RELHUM >= CRITRH ) THEN
       !
       ! Uptake by tropospheric sulfate (aerosol type 8)
       k = k + Ars_L1k( H=>xArea(8 ), H=>xRadi(8 ), gamma, srMw )
       !
       ! Uptake by black carbon and organic carbon (aerosol types 9-10)
       k = k + Ars_L1k( H=>xArea(9 ), H=>xRadi(9 ), gamma, srMw )
       k = k + Ars_L1k( H=>xArea(10), H=>xRadi(10), gamma, srMw )
       !
       ! Uptake by fine & coarse sea salt (aerosol types 11-12)
       k = k + Ars_L1k( H=>xArea(11), H=>xRadi(11), gamma, srMw )
       k = k + Ars_L1k( H=>xArea(12), H=>xRadi(12), gamma, srMw )
       !
       ! Uptake by stratospheric sulfate (aerosol type 13)
       ! and by irregular ice cloud (aerosol type 14)
       k = k + H=>xArea(13) * gamma
       k = k + Ars_L1k( H=>xArea(14), H=>xRadi(14), gamma, srMw )
    ENDIF
  END FUNCTION VOCuptk1stOrd
#ENDINLINE

#INLINE F90_GLOBAL
  !-----------------------------------------------------------------------
  ! Add parameters to isolate a box for debugging
  !-----------------------------------------------------------------------
  INTEGER,  PARAMETER :: I_dbg = 50
  INTEGER,  PARAMETER :: J_dbg = 2
  INTEGER,  PARAMETER :: L_dbg = 44

  !-----------------------------------------------------------------------
  ! Add more inlined global parameters for heterogeneous chemistry here
  !-----------------------------------------------------------------------

  ! Minimum heterogeneous chemistry lifetime and reaction rate
  REAL(dp), PARAMETER :: HetMinLife  = 1.e-3_dp
  REAL(dp), PARAMETER :: HetMinRate  = 1.0_dp / HetMinLife

  ! Critical RH for uptake of GLYX, MGLYX, and GLYC:
  REAL(dp), PARAMETER :: CRITRH      = 35.0e+0_dp

  ! Effective Henry's Law constant of IEPOX for reactive uptake to aqueous
  ! aerosols (M/atm).  Eloise Marais (2015/07) reset this to the value from
  ! [Nguyen et al., 2014] in order to accomodate reduction in yields of RIP
  ! (which is the precursor of IEPOX).
  REAL(dp), PARAMETER :: HSTAR_EPOX  = 1.7e+7_dp

  ! Conversion factor from atm to bar
  REAL(dp), PARAMETER :: con_atm_bar = 1.0_dp / 1.01325_dp

  ! Universal gas consatant [bar/(mol/kg)/K]  (Source: NIST, 2014)
  ! NOTE: Make sure this is consistent w/ the value in physconsts.F90!
  REAL(dp), PARAMETER :: con_R       = 0.083144598_dp

  ! Reference temperature
  REAL(dp), PARAMETER :: INV_T298    = 1.0_dp / 298.15_dp

  !--------------------------------------------------------------------------
  ! Add more global variables here, so that they can be used
  ! in inlined functions that will get written to gckpp_Rates.F90
  !--------------------------------------------------------------------------

  ! H2O concentration
  REAL(dp) :: H2O
  !$OMP THREADPRIVATE( H2O )

  ! Henry's law constants (do not need to be THREADPRIVATE)
  REAL(dp) :: HENRY_K0(NSPEC)
  REAL(dp) :: HENRY_CR(NSPEC)

  ! Array for heterogeneous rates
  !
  ! NOTES:
  ! (a) AERI            = Iodine (I-) on aerosol
  ! (b) BrSALA (BrSALC) = Fine (coarse) sea salt bromine (Br-)
  ! (c) SALACL (SALCCL) = Fine (coarse) sea salt chlorine (Cl-)
  ! (d) ISALA  (ISALC ) = Fine (coarse) sea salt iodine (I-)
  !
  ! HET(ind_BrNO3,  1) : BrNO3  +  H2O          # hydrolysis rxn
  ! HET(ind_BrNO3,  2) : BrNO3  +  HCl
  ! HET(ind_ClNO2,  1) : ClNO2  +  SALACL
  ! HET(ind_ClNO2,  2) : ClNO2  +  SALCCL
  ! HET(ind_ClNO2,  3) : ClNO3  +  HCl          # in-cloud only
  ! HET(ind_ClNO2,  4) : ClNO2  +  BrSALA
  ! HET(ind_ClNO2,  5) : ClNO2  +  BrSALC
  ! HET(ind_ClNO2,  6) : ClNO2  +  HBr          # in-cloud only
  ! HET(ind_ClNO3,  1) : ClNO3  +  H2O          # hydrolysis rxn
  ! HET(ind_ClNO3,  2) : ClNO3  +  HCl
  ! HET(ind_ClNO3,  3) : ClNO3  +  HBr
  ! HET(ind_ClNO3,  4) : ClNO3  +  BrSALA
  ! HET(ind_ClNO3,  5) : ClNO3  +  BrSALC
  ! HET(ind_ClNO3,  6) : ClNO3  +  SALACL
  ! HET(ind_ClNO3,  7) : CLNO3  +  SALCCL
  ! HET(ind_GLYX,   1) : GLYX   uptake          # 1st-order loss rxn
  ! HET(ind_HBr,    1) : Br     -> BrSALA
  ! HET(ind_HBr,    2) : Br     -> BrSALC
  ! HET(ind_HI,     1) : HI     -> AERI         # uptake by SO4
  ! HET(ind_HI,     2) : HI     -> ISALA        # uptake by SALA
  ! HET(ind_HI,     3) : HI     -> ISALC        # uptake by SALC
  ! HET(ind_HMML,   1) : HMML   uptake          # 1st-order loss rxn
  ! HET(ind_HO2,    1) : HO2    uptake          # 1st-order loss rxn
  ! HET(ind_HOBr,   1) : HOBr   +  HBr
  ! HET(ind_HOBr,   2) : HOBr   +  HCl
  ! HET(ind_HOBr,   3) : HOBr   +  SALACL
  ! HET(ind_HOBr,   4) : HOBr   +  SALCCL
  ! HET(ind_HOBr,   5) : HOBr   +  BrSALA
  ! HET(ind_HOBr,   6) : HOBr   +  BrSALC
  ! HET(ind_HOBr,   7) : HOBr   +  HSO3-(aq)
  ! HET(ind_HOBr,   8) : HOBr   +  HSO3--(aq)
  ! HET(ind_HOCl,   1) : HOCl   +  HCl
  ! HET(ind_HOCl,   2) : HOCl   +  HBr
  ! HET(ind_HOCl,   3) : HOCl   +  SALACL
  ! HET(ind_HOCl,   4) : HOCl   +  SALCCL
  ! HET(ind_HOCl,   5) : HOCl   +  HSO3--(aq)
  ! HET(ind_HOCl,   6) : HOCl   +  SO3--(aq)
  ! HET(ind_HOI,    1) : HOI    -> ISALA        # uptake by alkaline SALA
  ! HET(ind_HOI,    2) : HOI    -> ISALC        # uptake by alkaline SALC
  ! HET(ind_HOI,    3) : HOI    +  BrSALA       # breakdown by BrSALA
  ! HET(ind_HOI,    4) : HOI    +  BrSALC       # breakdown by BrSALC
  ! HET(ind_HOI,    5) : HOI    +  SALACL       # breakdown by SALACL
  ! HET(ind_HOI,    6) : HOI    +  SALCCL       # breakdown by SALCCL
  ! HET(ind_HONIT,  1) : HONIT  uptake          # 1st order loss rxn
  ! HET(ind_I2O2,   1) : I2O2   -> AERI         # uptake by SO4
  ! HET(ind_I2O2,   2) : I2O2   -> ISALA        # uptake by SALA
  ! HET(ind_I2O2,   3) : I2O2   -> ISALC        # uptake by SALC
  ! HET(ind_I2O3,   1) : I2O3   -> AERI         # uptake by SO4
  ! HET(ind_I2O3,   2) : I2O3   -> ISALA        # uptake by SALA
  ! HET(ind_I2O3,   3) : I2O3   -> ISALC        # uptake by SALC
  ! HET(ind_I2O4,   1) : I2O4   -> AERI         # uptake by SO4
  ! HET(ind_I2O4,   2) : I2O4   -> ISALA        # uptake by SALA
  ! HET(ind_I2O4,   3) : I2O4   -> ISALC        # uptake by SALC
  ! HET(ind_ICHE,   1) : ICHE   uptake          # 1st order loss rxn
  ! HET(ind_IDN,    1) : IDN    uptake          # 1st order loss rxn
  ! HET(ind_IEPOXA, 1) : IEPOXA uptake          # 1st order loss rxn
  ! HET(ind_IEPOXB, 1) : IEPOXB uptake          # 1st order loss rxn
  ! HET(ind_IEPOXD, 1) : IEPOXD uptake          # 1st order loss rxn
  ! HET(ind_IHN1,   1) : IHN1   uptake          # 1st order loss rxn
  ! HET(ind_IHN2,   1) : IHN2   uptake          # 1st order loss rxn
  ! HET(ind_IHN3,   1) : IHN3   uptake          # 1st order loss rxn
  ! HET(ind_IHN4,   1) : IHN4   uptake          # 1st order loss rxn
  ! HET(ind_INPB,   1) : INPB   uptake          # 1st order loss rxn
  ! HET(ind_INPD,   1) : INPD   uptake          # 1st order loss rxn
  ! HET(ind_IONITA, 1) : IONITA uptake          # 1st order loss rxn
  ! HET(ind_IONO,   1) : IONO   -> ISALA        # uptake by alkaline SALA
  ! HET(ind_IONO,   2) : IONO   -> ISALC        # uptake by alkaline SALC
  ! HET(ind_IONO,   3) : IONO   +  BrSALA       # breakdown by BrSALA
  ! HET(ind_IONO,   4) : IONO   +  BrSALC       # breakdown by BrSALC
  ! HET(ind_IONO,   5) : IONO   +  SALACL       # breakdown by SALACL
  ! HET(ind_IONO,   6) : IONO   +  SALCCL       # breakdown by SALCCL
  ! HET(ind_IONO2,  1) : IONO2  -> ISALA        # uptake by alkaline SALA
  ! HET(ind_IONO2,  2) : IONO2  -> ISALC        # uptake by alkaline SALC
  ! HET(ind_IONO2,  3) : IONO2  +  BrSALA       # breakdown by BrSALA
  ! HET(ind_IONO2,  4) : IONO2  +  BrSALC       # breakdown by BrSALC
  ! HET(ind_IONO2,  5) : IONO2  +  SALACL       # breakdown by SALACL
  ! HET(ind_IONO2,  6) : IONO2  +  SALCCL       # breakdown by SALCCL
  ! HET(ind_ITCN,   1) : ITCN   uptake          # 1st order loss rxn
  ! HET(ind_ITHN,   1) : ITHN   uptake          # 1st order loss rxn
  ! HET(ind_LVOC,   1) : LVOC   uptake          # 1st order loss rxn
  ! HET(ind_MCRHN,  1) : MCRHN  uptake          # 1st order loss rxn
  ! HET(ind_MCRHNB, 1) : MCRHNB uptake          # 1st order loss rxn
  ! HET(ind_MGLY,   1) : MGLY   uptake          # 1st order loss rxn
  ! HET(ind_MONITA, 1) : MONITA uptake          # 1st order loss rxn
  ! HET(ind_MONITS, 1) : MONITS uptake          # 1st order loss rxn
  ! HET(ind_MONITU, 1) : MONITU uptake          # 1st order loss rxn
  ! HET(ind_NO2,    1) : NO2    uptake          # 1st order loss rxn + cloud
  ! HET(ind_NO3,    1) : NO3    uptake          # 1st order loss rxn + cloud
  ! HET(ind_NO3,    2) : NO3    uptake on N2O5  # Liquid water cloud
  ! HET(ind_NO3,    3) : Cl-                    # Enhanced NO3 hydrolysis
  ! HET(ind_N2O5,   1) : N2O5  + H2O            # Where educt is consumed
  ! HET(ind_N2O5,   2) : N2O5  + HCl
  ! HET(ind_N2O5,   3) : N2O5  + H2O            # On liquid cloud water
  ! HET(ind_N2O5,   4) : N2O5  + SALACL
  ! HET(ind_N2O5,   5) : N2O5  + SALCCL
  ! HET(ind_O3,     1) : O3    + HBr
  ! HET(ind_O3,     2) : O3    + BrSALA
  ! HET(ind_O3,     3) : O3    + BrSALC
  ! HET(ind_OH,     1) : OH    + SALACL
  ! HET(ind_OH,     2) : OH    + SALCCL
  ! HET(ind_PYAC,   1) : PYAC  uptake           # 1st order loss rxn
  ! HET(ind_R4N2,   1) : R4N2  uptake           # 1st order loss rxn
  REAL(kind=dp) :: HET(NSPEC,8)
  !$OMP THREADPRIVATE( HET )

  ! Array for photolysis rates
  REAL(dp) :: PHOTOL(1000)
  !$OMP THREADPRIVATE( PHOTOL )

  ! Pressure and relative humidity
  REAL(dp) :: PRESS
  REAL(dp) :: RELHUM
  !$OMP THREADPRIVATE( PRESS, RELHUM )

  ! Cosine of solar zenith angle
  REAL(dp) :: SUNCOS
  !$OMP THREADPRIVATE( SUNCOS )

  TYPE, PUBLIC :: HetState
     LOGICAL  :: natSurface     ! Is there NAT in this box?
     LOGICAL  :: pscBox         ! Does this box have Polar Strat Clouds?
     LOGICAL  :: stratBox       ! Is this box in the stratosphere?
     INTEGER  :: NAEROTYPE      ! Number of aerosol types
     LOGICAL  :: is_UCX         ! Are we using the UCX mechanism?
     REAL(dp) :: aClArea        ! Fine SSA+SNA aerosol area [cm2/cm3]
     REAL(dp) :: aClRadi        ! Fine SSA+SNA aerosol radius [cm]
     REAL(dp) :: aClVol         ! Fine SSA+SNA aerosol volume [cm3/cm3]
     REAL(dp) :: aIce           ! Ice surface area
     REAL(dp) :: aLiq           ! Liquid surface area
     REAL(dp) :: aWater(2)      ! ISORROPIA aerosol water (fine & coarse)
     REAL(dp) :: BrConc_CldA    ! Br- in cloud (fine sea salt)   [mol/kg water]
     REAL(dp) :: BrConc_CldC    ! Br- in cloud (coarse sea salt) [mol/kg water]
     REAL(dp) :: BrConc_CldG    ! Br- in cloud (gas-phase)       [mol/kg water]
     REAL(dp) :: BrConc_SALA    ! Br- in fine sea salt aerosol   [mol/kg water]
     REAL(dp) :: BrConc_SALC    ! Br- in coarse sea salt aerosol [mol/kg water]
     REAL(dp) :: ClConc_CldA    ! Br- in cloud (fine sea salt)   [mol/kg water]
     REAL(dp) :: ClConc_CldC    ! Br- in cloud (coarse sea salt) [mol/kg water]
     REAL(dp) :: ClConc_CldG    ! Cl- in cloud (gas-phase)       [mol/kg water]
     REAL(dp) :: ClConc_SALA    ! Cl- in fine sea salt           [mol/kg water]
     REAL(dp) :: ClConc_SALC    ! Cl- in coarse sea salt         [mol/kg water]
     REAL(dp) :: cldFr          ! Cloud fraction [1]
     REAL(dp) :: clearFr        ! Clear sky fraction [1]
     REAL(dp) :: fupdateHOBr    !
     REAL(dp) :: fupdateHOCl    !
     REAL(dp) :: gamma_HO2      ! Uptake reaction probability for HO2 [1]
     REAL(dp) :: H2O            ! H2O concentration
     REAL(dp) :: HBr_th         ! HBr theta
     REAL(dp) :: HCl_th         ! HCl theta
     REAL(dp) :: hConc_ICl      ! Liquid phase pH, Cl-
     REAL(dp) :: hConc_LCl      ! Liquid phase pH, Cl-
     REAL(dp) :: hConc_SSA      ! Liquid phase pH, fine sea salt
     REAL(dp) :: hConc_SSC      ! Liquid phase pH, coarse sea salt
     REAL(dp) :: hConc_Sul      ! Liquid phase pH, sulfate
     REAL(dp) :: HetTemp(3)     !
     REAL(dp) :: HNO3_th        ! HNO3 theta
     REAL(dp) :: HSO3conc_Cld   !
     REAL(dp) :: H_plus         ! Proton activity [1] and H+ concentration [M]
     REAL(dp) :: KHETI_SLA(11)  ! Uptake probabilities for PSC reactions on SLA
     REAL(dp) :: mHSO4          ! Bisulfate concentration [M]
     REAL(dp) :: mNO3           ! Nitrate concentration [M]
     REAL(dp) :: mSO4           ! Sulfate concentration [M]
     REAL(dp) :: NitConc_SALA   ! Cl- in fine sea salt           [mol/kg water]
     REAL(dp) :: NitConc_SALC   ! Cl- in coarse sea salt         [mol/kg water]
     REAL(dp) :: PI             ! PI constant
     REAL(dp) :: pHCloud        !
     REAL(dp) :: pHSSA(2)       !
     REAL(dp) :: OMOC_POA       ! Organic matter/organic carbon in POA
     REAL(dp) :: OMOC_OPOA      ! Organic matter/organic carbon in POA
     REAL(dp) :: qIce           ! Ice mixing ratio [kg/kg]
     REAL(dp) :: qLIq           ! Water mixing ratio [kg/kg]
     REAL(dp) :: rIce           ! Ice radius
     REAL(dp) :: rLiq           ! Liquid radius
     REAL(dp) :: RGASLATM       ! Gas constant [L*atm/K/mole]
     REAL(dp) :: RSTARG         ! Gas constant [J/K/mole]
     REAL(dp) :: SPC_SALA       ! SALA concentration
     REAL(dp) :: SO3conc_Cld    !
     REAL(dp) :: ssAlk(2)       ! Sea salt alkalinity (fine, coarse)
     LOGICAL  :: ssFineIsAlk    ! Is fine sea-salt alkaline?
     LOGICAL  :: ssFineIsAcid   ! Is fine sea-salt alkaline?
     LOGICAL  :: ssCoarseIsAlk  ! Is coarse sea-salt alkaline?
     LOGICAL  :: ssCoarseIsAcid ! Is coarse sea-salt acid?
     REAL(dp) :: vAir           ! Volume of air [cm3]
     REAL(dp) :: vIce           ! Ice volume [cm3]
     REAL(dp) :: vLiq           ! Liquid volume [cm3]
     REAL(dp) :: xArea(14)      ! Aerosol specific sfc area [cm3 H2O/cm3 air]
     REAL(dp) :: xH2O(14)       ! Aerosol water content [cm3 H2O/cm3 air]
     REAL(dp) :: xRadi(14)      ! Aerosol effective radius (cm)
     REAL(dp) :: xVol(14)       ! Aerosol specific volume [cm3/cm3 air]
  END TYPE HetState
  TYPE(HetState), TARGET, PUBLIC :: State_Het
  !$OMP THREADPRIVATE( State_Het )
#ENDINLINE
