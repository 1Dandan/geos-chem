#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: Set here the F90 compiler and options
#       Pedefined compilers: INTEL, PGF, HPUX, LAHEY
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Pick a default compiler if not supplied
ifndef COMPILER
#COMPILER = G95
#COMPILER = LAHEY
COMPILER = INTEL
#COMPILER = PGF
#COMPILER = HPUX
#COMPILER = GFORTRAN
endif

FC_G95     = g95
FOPT_G95   = -cpp -O -pg -fbounds-check -fimplicit-none  -Wall -ftrace=full

FC_LAHEY   = lf95
# More aggressive for production runs:
#FOPT_LAHEY = -Cpp --pca -O
# More checking for debugging:
FOPT_LAHEY = -Cpp --chk a,e,s,u --pca --ap -O0 -g --trap --trace --chkglobal

FC_INTEL   = ifort
# More aggressive for production runs:
#FOPT_INTEL = -cpp -O -fp-model precise -pc80 -prec_div
# More checking for debugging:
FOPT_INTEL = -cpp -O0 -fp-model strict -implicitnone -ftrapuv \
              -debug all -check all -warn all

FC_PGF     = pgf90
# More aggressive for production runs:
FOPT_PGF   = -Mpreprocess -O -fast -pc 80 -Kieee
# More checking for debugging:
#FOPT_PGF   = -Mpreprocess -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk \
#             -Ktrap=fp -pc 80 -Kieee

FC_HPUX    = f90
FOPT_HPUX  = -O -u +Oall +check=on

FC_GFORTRAN     = gfortran
FOPT_GFORTRAN   = -cpp -O

# define FULL_ALGEBRA for non-sparse integration
FC   = $(FC_$(COMPILER))
FOPT = $(FOPT_$(COMPILER)) # -DFULL_ALGEBRA

LIBS =
#LIBS = -llapack -lblas

# Command to create Matlab mex gateway routines
# Note: use $(FC) as the mex Fortran compiler
MEX  = mex

GENSRC = ccycle_Precision.f90  \
	 ccycle_Parameters.f90     \
	 ccycle_Global.f90

GENOBJ = ccycle_Precision.o    \
	 ccycle_Parameters.o       \
	 ccycle_Global.o

FUNSRC = ccycle_Function.f90
FUNOBJ = ccycle_Function.o

JACSRC = ccycle_JacobianSP.f90  ccycle_Jacobian.f90
JACOBJ = ccycle_JacobianSP.o    ccycle_Jacobian.o

HESSRC = ccycle_HessianSP.f90   ccycle_Hessian.f90
HESOBJ = ccycle_HessianSP.o     ccycle_Hessian.o

STMSRC = ccycle_StoichiomSP.f90 ccycle_Stoichiom.f90
STMOBJ = ccycle_StoichiomSP.o   ccycle_Stoichiom.o

UTLSRC = ccycle_Rates.f90 ccycle_Util.f90 ccycle_Monitor.f90
UTLOBJ = ccycle_Rates.o   ccycle_Util.o   ccycle_Monitor.o

LASRC  = ccycle_LinearAlgebra.f90
LAOBJ  = ccycle_LinearAlgebra.o

STOCHSRC = ccycle_Stochastic.f90
STOCHOBJ = ccycle_Stochastic.o

MAINSRC = ccycle_Main.f90   ccycle_Initialize.f90   ccycle_Integrator.f90 ccycle_Model.f90
MAINOBJ = ccycle_Main.o     ccycle_Initialize.o     ccycle_Integrator.o   ccycle_Model.o

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       objects needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ALLOBJ = $(GENOBJ) $(FUNOBJ) $(JACOBJ) $(HESOBJ) $(STMOBJ) \
	 $(UTLOBJ) $(LAOBJ)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# User: modify the line below to include only the
#       executables needed by your application
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
all:    exe

exe:	$(ALLOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(MAINOBJ) $(LIBS) -o ccycle.exe

stochastic:$(ALLOBJ) $(STOCHOBJ) $(MAINOBJ)
	$(FC) $(FOPT) $(ALLOBJ) $(STOCHOBJ) $(MAINOBJ) $(LIBS) \
	-o ccycle_stochastic.exe

mex:    $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O ccycle_mex_Fun.f90     $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O ccycle_mex_Jac_SP.f90  $(ALLOBJ)
	$(MEX) FC#$(FC) -fortran -O ccycle_mex_Hessian.f90 $(ALLOBJ)

clean:
	rm -f ccycle*.o ccycle*.mod \
	ccycle*.dat ccycle.exe ccycle*.mexglx \
	ccycle.map

distclean:
	rm -f ccycle*.o ccycle*.mod \
	ccycle*.dat ccycle.exe ccycle.map \
	ccycle_*.f90 ccycle_*.mexglx

ccycle_Precision.o: ccycle_Precision.f90
	$(FC) $(FOPT) -c $<

ccycle_Parameters.o: ccycle_Parameters.f90 \
	            ccycle_Precision.o
	$(FC) $(FOPT) -c $<

ccycle_Monitor.o: ccycle_Monitor.f90 \
	             ccycle_Precision.o
	$(FC) $(FOPT) -c $<

ccycle_Global.o: ccycle_Global.f90 \
	            ccycle_Parameters.o ccycle_Precision.o
	$(FC) $(FOPT) -c $<

ccycle_Initialize.o: ccycle_Initialize.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_Function.o: ccycle_Function.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_Stochastic.o: ccycle_Stochastic.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_JacobianSP.o: ccycle_JacobianSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_Jacobian.o: ccycle_Jacobian.f90  $(GENOBJ) ccycle_JacobianSP.o
	$(FC) $(FOPT) -c $<

ccycle_LinearAlgebra.o: ccycle_LinearAlgebra.f90 $(GENOBJ) ccycle_JacobianSP.o
	$(FC) $(FOPT) -c $<

ccycle_Rates.o: ccycle_Rates.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_HessianSP.o: ccycle_HessianSP.f90  $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_Hessian.o:  ccycle_Hessian.f90 $(GENOBJ) ccycle_HessianSP.o
	$(FC) $(FOPT) -c $<

ccycle_StoichiomSP.o: ccycle_StoichiomSP.f90 $(GENOBJ)
	$(FC) $(FOPT) -c $<

ccycle_Stoichiom.o: ccycle_Stoichiom.f90  $(GENOBJ) ccycle_StoichiomSP.o
	$(FC) $(FOPT) -c $<

ccycle_Util.o: ccycle_Util.f90  $(GENOBJ) ccycle_Monitor.o
	$(FC) $(FOPT) -c $<

ccycle_Main.o: ccycle_Main.f90  $(ALLOBJ) ccycle_Initialize.o ccycle_Model.o ccycle_Integrator.o
	$(FC) $(FOPT) -c $<

ccycle_Model.o: ccycle_Model.f90  $(ALLOBJ) ccycle_Integrator.o
	$(FC) $(FOPT) -c $<

ccycle_Integrator.o: ccycle_Integrator.f90  $(ALLOBJ)
	$(FC) $(FOPT) -c $<
