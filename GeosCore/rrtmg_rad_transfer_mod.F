#IF   DEFINED( RRTMG )
        MODULE RRTMG_RAD_TRANSFER_MOD

        USE PARRRTM, ONLY : NBNDLW
        USE PARRRSW, ONLY : NBNDSW

        USE OMP_LIB
        USE CMN_SIZE_MOD, ONLY : IIPAR,JJPAR,LLPAR, NDUST, NAER
        USE JV_CMN_MOD, ONLY: RTODAER, RTSSAER, RTASYMAER, 
     &                        WVAA, SPECMASK, LSPECRADMENU,
     &                        NSPECRADMENU
        USE DIAG_MOD,      ONLY : AD71 !RAD OUTPUT DIAGNOSTIC ARRAY
        IMPLICIT NONE
!        PRIVATE


        !PUBLIC MEMBER FUNCTIONS
        PUBLIC  :: CLEANUP_SURFACE_RAD
        PUBLIC  :: INIT_SURFACE_RAD
        PUBLIC  :: READ_SURFACE_RAD
        PUBLIC  :: CLEANUP_MCICA_CLOUDS
        PUBLIC  :: INIT_MCICA_CLOUDS


!
! !PUBLIC DATA MEMBERS:
!

      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: ALBDIR(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: ALBDIF(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: EMISS (:,:,:)

      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CH4CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: N2OCLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC11CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC12CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CCL4CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC22CLIM(:,:,:)

!MCICA cloud variables now stored for reuse
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CLDFMCL_LW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CIWPMCL_LW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CLWPMCL_LW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: TAUCMCL_LW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CLDFMCL_SW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CIWPMCL_SW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CLWPMCL_SW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: TAUCMCL_SW(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: SSACMCL(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: ASMCMCL(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: FSFCMCL(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: REICMCL(:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: RELQMCL(:,:)


        REAL*8  :: LW_UFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_DFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_UFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_DFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_UFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_DFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_UFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_DFLUXC(IIPAR*JJPAR,LLPAR+1)

        REAL*8   :: RRTMG_LMB(NBNDLW+NBNDSW)

        INTEGER  :: ID_AER_LMB0 (NBNDLW+NBNDSW)
        INTEGER  :: ID_AER_LMB1 (NBNDLW+NBNDSW)
        CONTAINS
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: DO_RRTMG_RAD_TRANSFER
!
! !DESCRIPTION: INTERNAL SUBROUTINE 
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE DO_RRTMG_RAD_TRANSFER( THISDAY, THISMONTH, ICLD, 
     &                        ISPECMENU, ISEED)
!
! !USES:
!
      USE PARKIND,        ONLY : IM=>KIND_IM, RB=>KIND_RB
      USE RRLW_CON, ONLY: GASCON, AVOGAD
      USE PARRRTM, ONLY : NBNDLW, NGPTLW
      USE PARRRSW, ONLY : NBNDSW, NGPTSW,NAEREC
      USE RRTMG_LW_RAD, ONLY : RRTMG_LW
      USE RRTMG_SW_RAD, ONLY : RRTMG_SW
      USE MCICA_SUBCOL_GEN_LW, ONLY : MCICA_SUBCOL_LW
      USE MCICA_SUBCOL_GEN_SW, ONLY : MCICA_SUBCOL_SW

      
      !USE STRAT_CHEM_MOD, ONLY : GET_SPECIES
      USE TROPOPAUSE_MOD, ONLY : ITS_IN_THE_TROP
      USE PRESSURE_MOD,   ONLY : GET_PCENTER,      GET_PEDGE
      USE COMODE_MOD,   ONLY : AIRDENS,        CSPEC,       JLOP
      USE COMODE_LOOP_MOD,   ONLY : ICH4, AVG, WTAIR
      USE DAO_MOD,      ONLY : BXHEIGHT, QI, QL, TAUCLI, TAUCLW
      USE DAO_MOD,      ONLY : CLDF, SUNCOS, AVGW, TSKIN, T, ALBD
      USE DAO_MOD,      ONLY : AIRVOL, AIRDEN
      USE TIME_MOD,     ONLY : GET_DAY_OF_YEAR, GET_HOUR
      USE TRACERID_MOD, ONLY : IDO3
      USE DIAG_MOD,     ONLY : AD71
      USE JV_CMN_MOD,   ONLY : NSPECRAD  ! NUMBER OF SPECIES FOR RT
      USE JV_CMN_MOD,   ONLY : NASPECRAD ! NUMBER OF AEROSOL SPECIES
      USE JV_CMN_MOD,   ONLY : SPECMASK, IWVSELECT, NWVSELECT,WVSELECT
      USE JV_CMN_MOD,   ONLY : ACOEF_WV, BCOEF_WV, CCOEF_WV, WVAA, NWVAA
      USE LOGICAL_MOD,  ONLY : LLWRAD,LSWRAD,LSKYRAD

      USE JV_CMN_MOD,   ONLY : DO3
      USE TOMS_MOD,     ONLY: GET_OVERHEAD_O3
      USE GRID_MOD,     ONLY : GET_YMID

  
      INTEGER, PARAMETER  :: NWV=37
!
      INTEGER, INTENT(IN) :: THISDAY      ! CURRENT DAY
      INTEGER, INTENT(IN) :: THISMONTH    ! CURRENT MONTH
      INTEGER, INTENT(INOUT) :: ICLD         ! CLOUD FLAG FOR RRTMG: 0-NOCLOUD, 1-GREY CLOUD
      
      INTEGER, INTENT(IN) :: ISPECMENU    ! THE SPECIES BEING INCLUDED
                                          ! NEEDED FOR OUTPUT PURPOSES
      INTEGER, INTENT(IN) :: ISEED  
      !LOGICAL, INTENT(IN) :: SPECMASK(NSPECRAD) ! MASK FOR NUMBER OF SPECIES CONSIDERED 
      LOGICAL             :: DOAERAD      ! INCLUDE AEROSOL DETERMINED FROM SPECMASK
      LOGICAL             :: LOUTPUTAERO  ! OUTPUT AEROSOL DIAGNOSTICS?
      INTEGER             :: NAD71        ! NUMBER OF OUTPUTS PER FIELD
      INTEGER             :: ITIMEVALS(8)
      INTEGER             :: IDIAGOUT     ! INDEX OF THE SPECIES OPTICS FOR OUTPUT
      REAL*8              :: OLDSECS, NEWSECS

!      REAL*8,  INTENT(IN) :: ALBEDO(IIPAR,JJPAR)
! 

! !REMARKS:
!  THIS ROUTINE PASSES INPUTS TO THE RRTMG DRIVER ROUTINE "RAD_DRIVER"
!  VIA THE ARGUMENT LIST.  THIS PREVENTS CIRCULAR REFERENCES.
!
! !REVISION HISTORY: 
!  17 AUG 2012 - R. YANTOSCA - INITIAL VERSION
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:

! TEMPORARY AEROSOL VARIABLES
      REAL*8    :: LAMBDA(NWV)


      ! SCALARS
      INTEGER :: I, J ,L, LL, N, NCOL, JLOOP, IJLOOP, W
      INTEGER :: IL, OMPID
      INTEGER :: OUTIDX,IOUTWV
      INTEGER :: IB,IBX,IB_SW,IS,NBNDS,NSPEC
      INTEGER :: IS_ON,NASPECRAD_ON
      INTEGER :: IASPECRAD_ON(NASPECRAD)
      INTEGER :: IRTWVSELECT(2,NWVSELECT) !REQUIRED SW WAVELENGTHS FOR AOD OUTPUT
      REAL*8  :: RHOICE=0.9167, RHOLIQ=1.    ! G/CM3
      ! REL AND REI FROM PERSONAL COMMUNICATION FROM LAZAROS OREOPOULOS
      ! (GSFC) 12/12/12
      REAL*8  :: REL_DEF = 14.2, REI_DEF=24.8    ! MICRONS
      INTEGER  :: DOY

      INTEGER           :: IHR
      CHARACTER(LEN=2)  :: CHR 

      ! ARRAYS FROM GC
      REAL(KIND=RB)  :: PCENTER(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB)  :: PEDGE  (IIPAR*JJPAR,LLPAR)
      LOGICAL        :: INTROP (IIPAR*JJPAR,LLPAR)

      !ARRAYS FOR RRTMG
      REAL(KIND=RB) :: O3VMR (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CH4VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: N2OVMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC11VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC12VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC22VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CCL4VMR(IIPAR*JJPAR,LLPAR)

      REAL(KIND=RB) :: TAUCLD(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CLDFR (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: RELIQ (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: REICE (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CLIQWP (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CICEWP (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: ALBVIS (IIPAR*JJPAR)

      REAL(KIND=RB) :: TAUAER_LW (IIPAR*JJPAR,LLPAR,NBNDLW)
      REAL(KIND=RB) :: TAUAER_SW (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL(KIND=RB) :: SSAAER (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL(KIND=RB) :: ASMAER (IIPAR*JJPAR,LLPAR,NBNDSW)

      !TO STORE THE OPTICS FOR THE AEROSOLS WE ARE INTERESTED IN
      REAL*8        :: TAUAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL*8        :: SSAAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL*8        :: ASMAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)

      REAL(KIND=RB) :: H2OVMR   (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: TLAY     (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: PLAY     (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: TSFC     (IIPAR*JJPAR)

      !VARIABLES FOR OBTAINING STRATOSPHERIC VARIABLES
      REAL*8       :: O3COL, YLAT, AIR_TMP

      !SURFACE
      REAL(KIND=RB) :: ALBDIRVIS (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIFVIS (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIRNIR (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIFNIR (IIPAR*JJPAR)
      REAL(KIND=RB) :: RTEMISS   (IIPAR*JJPAR,NBNDLW)

      REAL*8        :: NUMER,DENOM
      REAL*4        :: AODTMP,AODOUT,SSATMP,SSAOUT
      REAL*4        :: ASYMTMP,ASYMOUT
!      INTEGER       :: FLG_FIRST_STRAT, FLG_CALC_STRAT_SCL
      INTEGER       :: FLG_FIRST_STRAT(IIPAR*JJPAR)
      INTEGER       :: ONECOL
      REAL*4        :: CH4SCL(IIPAR*JJPAR)

! FROM RAD_DRIVER... TO BE MERGED
      ! FLAGS AND DIMENSIONS
      INTEGER (KIND=IM) :: IDRV
      INTEGER (KIND=IM) :: INFLGLW, ICEFLGLW,LIQFLGLW
      INTEGER (KIND=IM) :: INFLGSW, ICEFLGSW,LIQFLGSW


! PROFILE VARIABLES
      REAL (KIND=RB)  :: PLEV(IIPAR*JJPAR,LLPAR+1)
      REAL (KIND=RB)  :: TLEV(IIPAR*JJPAR,LLPAR+1)
      REAL (KIND=RB)  :: CO2VMR(IIPAR*JJPAR,LLPAR)
      REAL (KIND=RB)  :: O2VMR(IIPAR*JJPAR,LLPAR)

! SW SOLAR VARIABLES
      REAL(KIND=RB)  :: ADJES=1.0              ! FLUX ADJUSTMENT FOR EARTH/SUN DISTANCE
      REAL(KIND=RB)  :: SCON=1368.22           ! SOLAR CONSTANT (W/M2)

! SW CLOUD VARIABLES

      REAL(KIND=RB)  :: TAUCLD_SW(NBNDSW,IIPAR*JJPAR,LLPAR)   ! IN-CLOUD OPTICAL DEPTH
      REAL(KIND=RB)  :: TAUCLD_LW(NBNDLW,IIPAR*JJPAR,LLPAR)   ! NOT USED BUT PASSED TO MCICA_LW
      REAL(KIND=RB)  :: SSACLD(NBNDSW,IIPAR*JJPAR,LLPAR)      ! IN-CLOUD SINGLE SCATTERING ALBEDO
      REAL(KIND=RB)  :: ASMCLD(NBNDSW,IIPAR*JJPAR,LLPAR)      ! IN-CLOUD ASYMMETRY PARAMETER
      REAL(KIND=RB)  :: FSFCLD(NBNDSW,IIPAR*JJPAR,LLPAR)      ! IN-CLOUD FORWARD SCATTERING FRACTION
      REAL(KIND=RB)  :: ECAER(1,LLPAR,NAEREC)        ! AEROSOL OPTICAL DEPTH AT 0.55UM (IAER=6 ONLY)


! LONGWAVE FLUX VARIABLES
      REAL(KIND=RB) :: UFLX(1,LLPAR+1)         ! TOTAL SKY LONGWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: DFLX(1,LLPAR+1) ! TOTAL SKY LONGWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: HR(1,LLPAR)   ! TOTAL SKY LONGWAVE RADIATIVE HEATING RATE (K/D)
      REAL(KIND=RB) :: UFLXC(1,LLPAR+1)! CLEAR SKY LONGWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: DFLXC(1,LLPAR+1)! CLEAR SKY LONGWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: HRC(1,LLPAR) ! CLEAR SKY LONGWAVE RADIATIVE HEATING RATE (K/D)

!- OPTIONAL OUTPUT
      REAL(KIND=RB) :: DUFLX_DT(1,LLPAR) ! CHANGE IN UPWARD LONGWAVE FLUX (W/M2/K)
      REAL(KIND=RB) :: DUFLXC_DT(1,LLPAR)! CHANGE IN CLEAR SKY UPWARD LONGWAVE FLUX (W/M2/K)

! SHORTWAVE FLUX VARIABLES
! ----- OUTPUT -----

      REAL(KIND=RB) :: SWUFLX(1,LLPAR+1)  ! TOTAL SKY SHORTWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: SWDFLX(1,LLPAR+1)  ! TOTAL SKY SHORTWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: SWHR(1,LLPAR)      ! TOTAL SKY SHORTWAVE RADIATIVE HEATING RATE (K/D)
      REAL(KIND=RB) :: SWUFLXC(1,LLPAR+1) ! CLEAR SKY SHORTWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: SWDFLXC(1,LLPAR+1) ! CLEAR SKY SHORTWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: SWHRC(1,LLPAR)     ! CLEAR SKY SHORTWAVE RADIATIVE HEATING RATE (K/D)

! LOCAL VARIABLES
      REAL*8 :: GCAIR
      REAL*8 :: RHOA, RHOB, RHOSUM
      REAL*8 :: HR_TEMP

! MCICA VARIABLES
      INTEGER(KIND=IM)      :: SEEDSW, SEEDLW
      INTEGER(KIND=IM)      :: IRNG=1  ! MERSENNE TWISTER RANDOM NUMBER GENERATOR
      INTEGER(KIND=IM)      :: ICLDMCL
      REAL(KIND=RB)         :: RELQMCL0(1,LLPAR)
      REAL(KIND=RB)         :: REICMCL0(1,LLPAR)

! MCICA LW SPECIFIC
      REAL(KIND=RB)         :: CLDFMCL_LW0(NGPTLW,1,LLPAR)
      REAL(KIND=RB)         :: CIWPMCL_LW0(NGPTLW,1,LLPAR)
      REAL(KIND=RB)         :: CLWPMCL_LW0(NGPTLW,1,LLPAR)
      REAL(KIND=RB)         :: TAUCMCL_LW0(NGPTLW,1,LLPAR)

! MCICA SW SPECIFIC
      REAL(KIND=RB)         :: CLDFMCL_SW0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: CIWPMCL_SW0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: CLWPMCL_SW0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: TAUCMCL_SW0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: SSACMCL0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: ASMCMCL0(NGPTSW,1,LLPAR)
      REAL(KIND=RB)         :: FSFCMCL0(NGPTSW,1,LLPAR)

      REAL(KIND=RB)         ::         PCENTER0(1,LLPAR)
      REAL(KIND=RB)         ::         CLDFR0(1,LLPAR) 
      REAL(KIND=RB)         ::         CICEWP0(1,LLPAR)
      REAL(KIND=RB)         ::         CLIQWP0(1,LLPAR)
      REAL(KIND=RB)         ::         REICE0(1,LLPAR)
      REAL(KIND=RB)         ::         RELIQ0(1,LLPAR)  
      REAL(KIND=RB)         ::         TAUCLD_SW0(NBNDSW,1,LLPAR) 
      REAL(KIND=RB)         ::         SSACLD0(NBNDSW,1,LLPAR)
      REAL(KIND=RB)         ::         ASMCLD0(NBNDSW,1,LLPAR)
      REAL(KIND=RB)         ::         FSFCLD0(NBNDSW,1,LLPAR)


! LOCAL AEROSOL ARRAYS AND VARIABLES FOR INTERPOLATING TO RRTMG BANDS ! AND COMBINING SPECIES
!      REAL*8    :: OD_AER(NDUST+NAER+2)
!      REAL*8    :: SSA_AER(NDUST+NAER+2)
!      REAL*8    :: ASYM_AER(NDUST+NAER+2)
!      REAL*8    :: ANGST


      !=================================================================
      ! PREPARE INPUTS FOR RAD_DRIVER
      !=================================================================

      !CALL GET_SPECIES( .TRUE., THISMONTH, 'O3',  GMI_O3  )
      !CALL GET_SPECIES( .TRUE., THISMONTH, 'CH4', GMI_CH4 )

      !=================================================================
      ! PREPARE INPUTS FOR RRTMG
      !=================================================================

      ! INITIALIZE
      !PRINT *,'IN RRTMG_RAD'
      NSPEC = NAER+NDUST+4
      FLG_FIRST_STRAT(:) = 0 !FLAG TO DETERMINE IF THE FIRST STRATOSPHERIC LEVEL HAS BEEN REACHED
 
      !DETERMINE IF WE ARE RUNNING WITH AEROSOL
      !CREATE INDEX FOR AEROSOLS REQUIRED
      LOUTPUTAERO=.TRUE. !SET AEROSOL DIAG OUTPUT TO TRUE INITIALLY
      DOAERAD = .FALSE.
      NASPECRAD_ON = 0
      IASPECRAD_ON(:) = 0
      DO N=1,NASPECRAD
       IF (SPECMASK(N).GT.0) THEN
        DOAERAD = .TRUE.
        NASPECRAD_ON = NASPECRAD_ON +1
        IASPECRAD_ON(NASPECRAD_ON) = N
        IDIAGOUT = MAX(IDIAGOUT,SPECMASK(N))
        
       ENDIF
      ENDDO
      
      !SET UP THE SW WAVELENGTH REQUIRED FOR AOD OUTPUT
      !RT diagnostics only have NBNDSW elements
      !must convert from LUT element to that by
      !offsetting by number of LW bands and the 
      !standard 7 wavelengths included in the LUT
      DO N=1,NWVSELECT
       IRTWVSELECT(1,N)=IWVSELECT(1,N)-(NBNDLW+7)
       IRTWVSELECT(2,N)=IWVSELECT(2,N)-(NBNDLW+7)
      ENDDO
      write(6,*) 'Before Array shifting'

      TAUCLD(:,:) = 0.0
      CLDFR(:,:) = 0.0
      RELIQ(:,:) = 0.0
      REICE(:,:) = 0.0
      CLIQWP(:,:) = 0.0
      CICEWP(:,:) = 0.0
      TAUAER_LW(:,:,:) = 0.0
      TAUAER_SW(:,:,:) = 0.0
      SSAAER(:,:,:) = 0.0
      ASMAER(:,:,:) = 0.0
      TAUAERDIAG(:,:,:) = 0.0D0
      SSAAERDIAG(:,:,:) = 0.0D0
      ASMAERDIAG(:,:,:) = 0.0D0
      UFLX(:,:) = 0.0
      DFLX(:,:) = 0.0
      HR(:,:) = 0.0
      UFLXC(:,:) = 0.0
      DFLXC(:,:) = 0.0
      HRC(:,:) = 0.0
      DUFLX_DT(:,:) = 0.0
      DUFLXC_DT(:,:) = 0.0

      SWUFLX(:,:) = 0.0
      SWDFLX(:,:) = 0.0
      SWHR(:,:) = 0.0
      SWUFLXC(:,:) = 0.0
      SWDFLXC(:,:) = 0.0
      SWHRC(:,:) = 0.0
      O3VMR(:,:)=0.0 
      CH4VMR(:,:)=0.0
      NBNDS = NBNDLW+NBNDSW

!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, IJLOOP, IB, IB_SW)
!OMP+SCHEDULE( DYNAMIC )
      DO J = 1, JJPAR
      DO I = 1, IIPAR
         ! 1-D INDEX
         IJLOOP         = (J-1)*IIPAR+I
       !BROADBAND ALBEDO
       ALBDIRVIS(IJLOOP) = ALBDIR(I,J,1)
       ALBDIFVIS(IJLOOP) = ALBDIF(I,J,1)
       ALBDIRNIR(IJLOOP) = ALBDIR(I,J,2)
       ALBDIFNIR(IJLOOP) = ALBDIF(I,J,2)
       IF ((ALBDIRVIS(IJLOOP).GT.0.999).OR.
     &  (ALBDIRVIS(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DRVIS OUT OF RANGE',I,J,
     &              ALBDIRVIS(IJLOOP)
       ENDIF
       IF ((ALBDIFVIS(IJLOOP).GT.0.999).OR.
     &  (ALBDIFVIS(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DFVIS OUT OF RANGE',I,J,
     &    ALBDIFVIS(IJLOOP)
       ENDIF
       IF ((ALBDIRNIR(IJLOOP).GT.0.999).OR.
     &  (ALBDIRNIR(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DRNIR OUT OF RANGE',I,J,
     &    ALBDIRNIR(IJLOOP)
       ENDIF
       IF ((ALBDIFNIR(IJLOOP).GT.0.999).OR.
     &  (ALBDIFNIR(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DFNIR OUT OF RANGE',I,J,
     &   ALBDIFNIR(IJLOOP)
       ENDIF

      DO IB= 1, NBNDS
         IB_SW = IB-NBNDLW
         IF ( IB .LE. 16) THEN
          RTEMISS(IJLOOP,IB)     = EMISS(I,J,IB)
         ENDIF
      ENDDO
      ENDDO
      ENDDO
!OMP END PARALLEL DO
      !write(6,*) 'after alb'
      !I DONT THINK FUNCTION CALLS CAN BE PARALLELIZED
      !GET PCENTER, PEDGE AND DETERMINE IF IN TROP BEFORE PARALLEL LOOP
      DO I = 1, IIPAR
      DO J = 1, JJPAR
      IJLOOP         = (J-1)*IIPAR+I
      DO L = 1, LLPAR
         PCENTER(IJLOOP,L) = GET_PCENTER( I, J, L )
         PEDGE  (IJLOOP,L) = GET_PEDGE  ( I, J, L )
         H2OVMR (IJLOOP,L) = AVGW(I,J,L)
         TLAY   (IJLOOP,L) = T(I,J,L)
         INTROP (IJLOOP,L) = ITS_IN_THE_TROP( I, J, L )
      ENDDO
      TSFC   (IJLOOP)   = TSKIN(I,J)

!         O3COL(I,J) = GET_OVERHEAD_O3(I,J)
!         CALL SET_PROF_O3 (I,J,YLAT,THISMONTH,THISDAY,T(I,J,:),O3COL)
      ENDDO
      ENDDO
!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, L, IJLOOP, JLOOP, AIR_TMP )
!OMP+PRIVATE( YLAT, O3COL)
!OMP+SCHEDULE( DYNAMIC )
      DO I = 1, IIPAR
      DO J = 1, JJPAR
       ALBVIS(IJLOOP)   = ALBD(I,J)
      DO L = 1, LLPAR
       
       ! 1-D INDEX
       IJLOOP         = (J-1)*IIPAR+I

       ! NOT SURE IF THESE NEED TO BE IN TROPOSPHERE-ONLY LOOP...
       ! TRYING TO FIND CAUSE OF 2X2.5 BANDING OF CLOUDS...
            !-----------------------------
            ! GET CLOUD PROPERTIES BY SETTING REASONABLE VALUES FOR REL
            ! AND REI IN MICRONS AND CALCULATING LWP AND IWP FROM
            ! VISIBLE OPTICAL DEPTH  (IN G/M2)
            ! THIS IS A DIFERENT APPROACH THAN THAT USED UP THROUGH
            ! OCTOBER, WHERE WE TRIED TO USED THE CLOUD LIQUID AND ICE
            ! MIXING RATIOS TO GET LWP AND IWP. NOTE THAT RHO IN G/CM3
            ! AND RE IN MICRONS MAKE THE CXXXWP VARIABLES COME OUT IN
            ! G/M2.
            !-----------------------------

            !-----------------------------
            ! SET RE VALUES TO AVOID PROBLEMS IN CLOUD CODE

            IF (ICLD.NE.0) THEN
             ! LIQUID
             CLIQWP(IJLOOP,L) = 0.667*TAUCLW(I,J,L)*RHOLIQ*REL_DEF
             RELIQ(IJLOOP,L) = REL_DEF
             ! ICE
             CICEWP(IJLOOP,L) = 0.667*TAUCLI(I,J,L)*RHOICE*REI_DEF
             REICE(IJLOOP,L) = REI_DEF
             !TAUCLD DERIVED IN MCICA SUB, NOT NEEDED
             !TAUCLD(IJLOOP,L) = TAUCLI(I,J,L)+TAUCLW(I,J,L)
             CLDFR(IJLOOP,L)   = CLDF(L,I,J)
            ENDIF !CLOUDS

       IF (INTROP(IJLOOP,L).EQ..TRUE.) THEN 
           !-----------------------------
            ! WE ARE IN THE TROPOSPHERE
            !-----------------------------

            ! SET O3, CH4, N2O AND CFC PROFILES
            ! G-C CHEMISTRY IS ONLY DONE IN THE TROP
            ! THEREFORE CSPEC WILL ONLY BE DEFINED IN THE TROP
            ! 1-D INDEX FOR CSPEC ARRAY
            JLOOP = JLOP(I,J,L)
            !IF OZONE REQUESTED THEN SPECMASK WILL BE SET TO ZERO
            !SO THAT IT WILL BE REMOVED RELATIVE TO THE BASELINE
            !CASE (WHEN SPECMASK DEFAULTS TO 1)
            !I.E. WE WANT TO RUN WITHOUT THE GAS IF IT HAS BEEN
            !REQUESTED SO THAT WE CAN DIFFERENCE WITH THE BASELINE RUN
            IF (SPECMASK(NASPECRAD+1).EQ.1) THEN
             O3VMR(IJLOOP,L)  = CSPEC(JLOOP,IDO3)/AIRDENS(JLOOP)
            ENDIF
            IF (SPECMASK(NASPECRAD+2).EQ.1) THEN
             CH4VMR(IJLOOP,L) = CSPEC(JLOOP,ICH4)/AIRDENS(JLOOP)
            ENDIF
            N2OVMR(IJLOOP,L) = N2OCLIM(I,J,L)/1E9

            !CFC CLIMATOLOGY FROM UARS AND MIPAS
            CFC11VMR(IJLOOP,L) = CFC11CLIM(I,J,L)/1E9
            CFC12VMR(IJLOOP,L) = CFC12CLIM(I,J,L)/1E9
            CCL4VMR(IJLOOP,L)  = CCL4CLIM(I,J,L)/1E9
            CFC22VMR(IJLOOP,L) = CFC22CLIM(I,J,L)/1E9


       ELSE
           !-----------------------------
           ! WE ARE IN THE STRATOSPHERE
           !-----------------------------

           !! DENSITY OF AIR IN G/CM2
           AIR_TMP = AIRDEN(L,I,J)*BXHEIGHT(I,J,L)*1.0E-1
           !! DENSITY OF AIR IN MOLEC/CM2
           AIR_TMP = AVG*AIR_TMP/WTAIR
           O3COL = GET_OVERHEAD_O3(I,J)
           CALL SET_PROF_O3 (I,J,YLAT,THISMONTH,THISDAY,T(I,J,:),O3COL)
           O3VMR(IJLOOP,L) = DO3(L)/AIR_TMP

            !GET SCALINGS IF THIS IS THE FIRST LEVEL IN THE STRAT
            IF (FLG_FIRST_STRAT(IJLOOP).EQ.0) THEN
                FLG_FIRST_STRAT(IJLOOP) = 1
                CH4SCL(IJLOOP) = (CSPEC(JLOOP,ICH4)/AIRDENS(JLOOP))/
     &             (CH4CLIM(I,J,L)/1E9)
            ENDIF
            
            !TES PROFILES INTERPOLATED TO GC GRID WHEN SAVED
            !SO WE JUST NEED TO SCALE TO CURRENT CONC AT TOP OF TROP
              
            CH4VMR(IJLOOP,L) = CH4SCL(IJLOOP)*CH4CLIM(I,J,L)/1E9
            N2OVMR(IJLOOP,L) = N2OCLIM(I,J,L)/1E9

            !CFC CLIMATOLOGY FROM UARS AND MIPAS
            CFC11VMR(IJLOOP,L) = CFC11CLIM(I,J,L)/1E9
            CFC12VMR(IJLOOP,L) = CFC12CLIM(I,J,L)/1E9
            CCL4VMR(IJLOOP,L)  = CCL4CLIM(I,J,L)/1E9
            CFC22VMR(IJLOOP,L) = CFC22CLIM(I,J,L)/1E9
       ENDIF
      ENDDO
      ENDDO
      ENDDO
!OMP END PARALLEL DO
      !write(6,*) 'after CFC and O3'
      IF (DOAERAD) THEN
       DO IB = 1,NBNDS
        !RRTMG WAVEBANDS START AT I=8 IN GC ARRAYS
        !IN SAME ORDER, SO JUST OFFSET
        IBX=IB+7
        IB_SW = IB-NBNDLW
        DO IS = 1,NASPECRAD
         !THE AEROSOL SPECIES WE ARE CURRENTLY CALCULATING FOR WILL BE
         !SET TO THE LSPECRADMENU VALUE FOR THAT SPECIES.
         !THIS MEANS THAT RRTMG REQUIRES *ALL OTHER* SPECIES SO THAT THE
         !FLUX IN ABSENCE OF THE SPECIES CAN BE CALCULATED
         !THEREFORE WE COMPILE TWO SETS OF AEROSOL PROPERTIES:
         !(1) ALL BUT THE CURRENT SPECIES TO SEND TO RRTMG
         !(2) THE CURRENT SPECIES FOR OUTPUT TO THE RT DIAGNOSTICS
         ! WE MUST MERGE AEROSOL PROPERTIES FOR THE SPECIES TO BE OUTPUT
         ! (I.E. COMBINE HYDROPHILIC/PHOBIC AND MULTIPLE SIZES) 
!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, L, IJLOOP)
!OMP+SCHEDULE( DYNAMIC )
         DO L = 1, LLPAR
         DO J = 1, JJPAR
         DO I = 1, IIPAR
          ! 1-D INDEX
          IJLOOP = (J-1)*IIPAR+I       
          IF (INTROP(IJLOOP,L).EQ..TRUE.) THEN 
           IF (IB.LE.16) THEN !LW
            IF (SPECMASK(IS).EQ.1) THEN
                  TAUAER_LW(IJLOOP,L,IB) = TAUAER_LW(IJLOOP,L,IB) +
     &                           RTODAER(I,J,L,IBX,IS)
            ENDIF
           ELSE !SW
            !IF SPECMASK(IS)=1 THEN WE AGGREGATE THAT SPECIES FOR RRTMG
            !IF SPECMASK(IS)>1 THEN WE SAVE THAT SPECIES FOR DIAG OUTPUT
            IF (SPECMASK(IS).EQ.1) THEN
             TAUAER_SW(IJLOOP,L,IB_SW)=TAUAER_SW(IJLOOP,L,IB_SW)+
     &                                 RTODAER(I,J,L,IBX,IS)
             SSAAER(IJLOOP,L,IB_SW) =  SSAAER(IJLOOP,L,IB_SW) + 
     &                       RTSSAER(I,J,L,IBX,IS)*RTODAER(I,J,L,IBX,IS)
             ASMAER(IJLOOP,L,IB_SW) = ASMAER(IJLOOP,L,IB_SW) +
     &                                RTASYMAER(I,J,L,IBX,IS) *
     &                     RTODAER(I,J,L,IBX,IS)*RTSSAER(I,J,L,IBX,IS)
            ENDIF 
            IF (SPECMASK(IS).GT.1) THEN
             TAUAERDIAG(IJLOOP,L,IB_SW)=TAUAERDIAG(IJLOOP,L,IB_SW)+
     &                       RTODAER(I,J,L,IBX,IS)
             SSAAERDIAG(IJLOOP,L,IB_SW) = SSAAERDIAG(IJLOOP,L,IB_SW) +
     &                       RTSSAER(I,J,L,IBX,IS)*RTODAER(I,J,L,IBX,IS)
             ASMAERDIAG(IJLOOP,L,IB_SW) = ASMAERDIAG(IJLOOP,L,IB_SW) +
     &                     RTASYMAER(I,J,L,IBX,IS) *
     &                     RTODAER(I,J,L,IBX,IS)*RTSSAER(I,J,L,IBX,IS)
              !TAUAERDIAG(IJLOOP,L,IB_SW) = 1.0D0
              !ASMAERDIAG(IJLOOP,L,IB_SW) = 0.02D0
              !SSAAERDIAG(IJLOOP,L,IB_SW) = 0.99D0*0.02D0
            ENDIF
           ENDIF 
          ENDIF
         ENDDO
         ENDDO
         ENDDO
!OMP END PARALLEL DO 
!        write(6,*) 'after aero 1'
        ENDDO !SPECIES
        !NOW AEROSOL HAVE BEEN SUMMED AND WEIGHTED BY AOD AND SSA
        !DIVIDE THROUGH BY TOTAL AOD (FOR SSA) AND AOD*SSA (FOR ASYM)
        IF (IB.GT.16) THEN !SW

!SWITCHING THIS OMP ON HALVES THE OPTICS VALUES FOR SOME UNKNOWN REASON.
!THE BENEFIT OF HAVING IT SWITCHED ON IS ~1% REDUCTION IN PROCESSING
!TIME SO CURRENTLY DOING WITHOUT PARALLELIZING THIS. DAR 02/2013
!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, L, IJLOOP )
!OMP+SCHEDULE( DYNAMIC )
         DO L = 1, LLPAR
         DO J = 1, JJPAR
         DO I = 1, IIPAR
         IJLOOP = (J-1)*IIPAR+I       
          IF (INTROP(IJLOOP,L).EQ..TRUE.) THEN 
           IF ((TAUAER_SW(IJLOOP,L,IB_SW).GT.0).AND.
     $        (    SSAAER(IJLOOP,L,IB_SW).GT.0)) THEN
              !DIVIDE SUM(ASYM*SSA*OD) BY SUM(SSA*OD) TO GET 
              !OD*SSA WEIGHTED ASYM
              ASMAER(IJLOOP,L,IB_SW) = ASMAER(IJLOOP,L,IB_SW) /
     &                                 SSAAER(IJLOOP,L,IB_SW)
              !DIVIDE SUM(SSA*OD) BY SUM(OD) TO GET OD WEIGHTED SSA
              SSAAER(IJLOOP,L,IB_SW) = SSAAER(IJLOOP,L,IB_SW) / 
     &                                 TAUAER_SW(IJLOOP,L,IB_SW)
           ENDIF
                !AND DO THE SAME FOR THE SPECIES WE'RE INTERESTED IN
           IF ((TAUAERDIAG(IJLOOP,L,IB_SW).GT.0).AND.
     $        ( SSAAERDIAG(IJLOOP,L,IB_SW).GT.0)) THEN
              !DIVIDE SUM(ASYM*SSA*OD) BY SUM(SSA*OD) TO GET
              !OD*SSA WEIGHTED ASYM
              ASMAERDIAG(IJLOOP,L,IB_SW) = ASMAERDIAG(IJLOOP,L,IB_SW) /
     &                                     SSAAERDIAG(IJLOOP,L,IB_SW)
              !DIVIDE SUM(SSA*OD) BY SUM(OD) TO GET OD WEIGHTED SSA
              SSAAERDIAG(IJLOOP,L,IB_SW) = SSAAERDIAG(IJLOOP,L,IB_SW) /
     &                                     TAUAERDIAG(IJLOOP,L,IB_SW)
           ENDIF
          ENDIF
         ENDDO
         ENDDO
         ENDDO
!OMP END PARALLEL DO
!        write(6,*) 'after aero2'
        ENDIF
       ENDDO !BAND
      ELSE
       !NO AEROSOL, SET ALL TO SAFE VALUES
!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, L, IB, IJLOOP, IB_SW)
!OMP+SCHEDULE( DYNAMIC )
       DO IB= 1, NBNDS
        IB_SW = IB-NBNDLW
        DO L = 1, LLPAR
        DO J = 1, JJPAR
        DO I = 1, IIPAR
         ! 1-D INDEX
         IJLOOP = (J-1)*IIPAR+I       
         IF (INTROP(IJLOOP,L).EQ..TRUE.) THEN 
          IF (IB.LE.16) THEN
           TAUAER_LW(IJLOOP,L,IB)    = 0.0
          ELSE
           TAUAER_SW(IJLOOP,L,IB_SW) = 0.0D0
           SSAAER(IJLOOP,L,IB_SW)    = 0.99D0
           ASMAER(IJLOOP,L,IB_SW)    = 0.02D0
           TAUAERDIAG(IJLOOP,L,IB_SW) = 0.0D0
           SSAAERDIAG(IJLOOP,L,IB_SW) = 0.99D0
           ASMAERDIAG(IJLOOP,L,IB_SW) = 0.02D0
          ENDIF
         ENDIF
        ENDDO
        ENDDO
        ENDDO
       ENDDO
!OMP END PARALLEL DO 
!      write(6,*) 'after aero3'
      ENDIF
!      write(6,*) 'after allaero'
      ! INITIALIZATION
      !IF (LLWRAD) THEN
!       CALL RRTMG_LW_INI
      !ENDIF
!      IF (LSWRAD) THEN
!       CALL RRTMG_SW_INI
!      ENDIF

      ! RAD_DRIVER IS THE INTERFACE BETWEEN G-C AND RRTMG
      DOY = GET_DAY_OF_YEAR()
      NCOL = IIPAR*JJPAR
      ONECOL = 1

! GET LEVEL VALUES
       GCAIR = 1.0E-3*GASCON/AVOGAD
       DO I=1,NCOL
          PLEV(I,1) = PEDGE(I,1)     ! SET LOWEST LEVEL TO SURFACE PRESSURE
          TLEV(I,1) = TLAY(I,1)     ! SET LOWEST LEVEL TO LAYER TEMPERATURE  (KLUDGE)
          PLEV(I,LLPAR+1) = PCENTER(I,LLPAR)
          TLEV(I,LLPAR+1) = TLAY(I,LLPAR)
          DO L=2,LLPAR
             RHOA = PCENTER(I,L-1)/(GCAIR*TLAY(I,L-1))
             RHOB = PCENTER(I,L)/(GCAIR*TLAY(I,L))
             RHOSUM = RHOA+RHOB
             PLEV(I,L) = (RHOA*PCENTER(I,L-1)+RHOB*PCENTER(I,L))/RHOSUM
             TLEV(I,L) = (RHOA*TLAY(I,L-1)+RHOB*TLAY(I,L))/RHOSUM
          END DO
       END DO

! FILL CO2, N2O AND O2 ARRAYS WITH REASONABLE ATMOSPHERIC VALUES

       CO2VMR(:,:) = 3.90E-4
       O2VMR(:,:) =  0.209

       SELECT CASE (ICLD)
!  CLOUD SETUP FOR CLEAR
       CASE (0)
          IDRV = 0
          ICLDMCL = 0
          INFLGLW = 0
          INFLGSW = 0
          TAUCMCL_LW(:,:,:) = 0.0
          TAUCMCL_SW(:,:,:) = 0.0
          ICEFLGLW = 0
          LIQFLGLW = 0
          ICEFLGSW = 0
          LIQFLGSW = 0
          !PRINT *,'CLEAR'

!  CLOUD SETUP FOR MCICA CLOUD (ONLY OPTION NOW)
       CASE (1)
          IDRV = 0
          ICLDMCL = 2                  !MAXIMUM RANDOM OVERLAP
          INFLGLW = 2
          INFLGSW = 2
          TAUCLD_LW(:,:,:) = 0.0    ! TAUCLD NOT USED
          TAUCLD_SW(:,:,:) = 0.0
          TAUCMCL_LW(:,:,:) = 0.0   ! USED ONLY AS A CHECK
          TAUCMCL_SW(:,:,:) = 0.0
          SSACLD(:,:,:) = 0.0
          ASMCLD(:,:,:) = 0.0
          FSFCLD(:,:,:) = 0.0
          ICEFLGLW = 2       !STREAMER
          LIQFLGLW = 1       !HU AND STAMNES
          ICEFLGSW = 2       !STREAMER
          LIQFLGSW = 1       !HU AND STAMNES
          RELIQ(:,:) = REL_DEF
          REICE(:,:) = REI_DEF

!          PRINT *,'MCICA'
      END SELECT

! SET THE MAX NUMBER OF OMP THREADS TO CHECK FOR MEMORY ISSUES
!      OMP_SET_NUM_THREADS(1)

! WE ONLY NEED TO CALC CLOUDS ONCE PER RT TIMESTEP
! DO THIS ON BASELINE CALL IF ALL-SKY IS REQUESTED
      IF (ISPECMENU.EQ.0) THEN
       SEEDLW=ISEED+NGPTSW+1
       SEEDSW=SEEDLW+NGPTLW+1
      write(6,*) 'Before Clouds'

!$OMP PARALLEL DO
!$OMP+DEFAULT( SHARED )
!$OMP+PRIVATE( IL, OMPID )
!$OMP+PRIVATE( PCENTER0, CLDFR0, CLIQWP0, CICEWP0)
!$OMP+PRIVATE( REICE0, RELIQ0, TAUCLD_SW0)
!$OMP+PRIVATE( SSACLD0, ASMCLD0, FSFCLD0)
!$OMP+PRIVATE( CLDFMCL_LW0, CIWPMCL_LW0, CLWPMCL_LW0)
!$OMP+PRIVATE( REICMCL0, RELQMCL0, TAUCMCL_LW0)
!$OMP+PRIVATE( CLDFMCL_SW0, CIWPMCL_SW0, CLWPMCL_SW0)
!$OMP+PRIVATE( TAUCMCL_SW0, SSACMCL0,ASMCMCL0, FSFCMCL0)
!$OMP+SCHEDULE( DYNAMIC )
       DO IL=1, NCOL
        IF (LLWRAD) THEN

         CALL MCICA_SUBCOL_LW(ONECOL,LLPAR,ICLDMCL,
     &        SEEDLW,IRNG,PCENTER(IL,:),
     &        CLDFR(IL,:),CICEWP(IL,:),CLIQWP(IL,:),
     &        REICE(IL,:),RELIQ(IL,:),TAUCLD_LW(:,IL,:),
     &        CLDFMCL_LW0, CIWPMCL_LW0, CLWPMCL_LW0,
     &        REICMCL0, RELQMCL0, TAUCMCL_LW0)

         CLDFMCL_LW(:,IL,:)   = CLDFMCL_LW0(:,1,:)
         CIWPMCL_LW(:,IL,:)   = CIWPMCL_LW0(:,1,:)
         CLWPMCL_LW(:,IL,:)   = CLWPMCL_LW0(:,1,:)
         TAUCMCL_LW(:,IL,:)   = TAUCMCL_LW0(:,1,:)

!         OMPID = OMP_GET_THREAD_NUM()
!         write(6,*) 'MCICALW ',OMPID,IL,NCOL
!         write(6,*) MAXVAL(CIWPMCL_LW),MAXVAL(RELQMCL0)
        ENDIF
        IF (LSWRAD) THEN

         CALL MCICA_SUBCOL_SW(ONECOL, LLPAR, ICLDMCL,
     &        SEEDSW, IRNG,PCENTER(IL,:),
     &        CLDFR(IL,:), CICEWP(IL,:), CLIQWP(IL,:),
     &        REICE(IL,:), RELIQ(IL,:),
     &        TAUCLD_SW(:,IL,:),SSACLD(:,IL,:),
     &        ASMCLD(:,IL,:),FSFCLD(:,IL,:),
     &        CLDFMCL_SW0, CIWPMCL_SW0, CLWPMCL_SW0,
     &        REICMCL0, RELQMCL0, TAUCMCL_SW0, SSACMCL0,
     &        ASMCMCL0, FSFCMCL0)
!         OMPID = OMP_GET_THREAD_NUM()
!
         CLDFMCL_SW(:,IL,:)   = CLDFMCL_SW0(:,1,:)
         CIWPMCL_SW(:,IL,:)   = CIWPMCL_SW0(:,1,:)
         CLWPMCL_SW(:,IL,:)   = CLWPMCL_SW0(:,1,:)
         TAUCMCL_SW(:,IL,:)   = TAUCMCL_SW0(:,1,:)
         SSACMCL(:,IL,:)    = SSACMCL0(:,1,:)
         ASMCMCL(:,IL,:)    = ASMCMCL0(:,1,:)
         FSFCMCL(:,IL,:)    = FSFCMCL0(:,1,:)
!         OMPID = OMP_GET_THREAD_NUM()
!         write(6,*) 'MCICASW ',OMPID,IL,NCOL
!      write(6,*)MAXVAL(CIWPMCL_SW),MAXVAL(CLDFMCL_SW),MAXVAL(TAUCMCL_SW)

        ENDIF
! these should be independent of LW and SW
! simply rearranged by the MCICA routine
        REICMCL(IL,:) = REICMCL0(1,:)
        RELQMCL(IL,:) = RELQMCL0(1,:)

       ENDDO
!$OMP END PARALLEL DO
      ENDIF !DO MCICA CLOUDS
!$OMP PARALLEL DO
!$OMP+DEFAULT( SHARED )
!$OMP+PRIVATE( IL,OMPID )
!$OMP+PRIVATE( UFLX,DFLX,HR,UFLXC,DFLXC,HRC,DUFLX_DT,DUFLXC_DT)
!$OMP+PRIVATE( ECAER,SWUFLX,SWDFLX,SWHR,SWUFLXC,SWDFLXC,SWHRC)
!$OMP+SCHEDULE( DYNAMIC ) 
      DO IL=1, NCOL
 
      IF (LLWRAD) THEN
        
        CALL RRTMG_LW 
     &       (ONECOL,LLPAR,ICLDMCL,IDRV, 
     &        PCENTER(IL,:) ,PLEV(IL,:) ,TLAY(IL,:)    ,TLEV(IL,:) ,
     &        TSFC(IL), 
     &        H2OVMR(IL,:)  ,O3VMR(IL,:),CO2VMR(IL,:)  ,CH4VMR(IL,:),
     &        N2OVMR(IL,:)  ,O2VMR(IL,:), 
     &        CFC11VMR(IL,:),CFC12VMR(IL,:),CFC22VMR(IL,:),
     &        CCL4VMR(IL,:) ,RTEMISS(IL,:) , 
     &        INFLGLW ,ICEFLGLW,LIQFLGLW,
     &        CLDFMCL_LW(:,IL,:),TAUCMCL_LW(:,IL,:),CIWPMCL_LW(:,IL,:),
     &        CLWPMCL_LW(:,IL,:),REICMCL(IL,:),RELQMCL(IL,:), 
     &        TAUAER_LW(IL,:,:),UFLX,DFLX,HR,UFLXC,DFLXC,HRC, 
     &        DUFLX_DT,DUFLXC_DT)
!        OMPID = OMP_GET_THREAD_NUM()
!        write(6,*) 'RRTLW ',OMPID 
        LW_UFLUX(IL,:) = UFLX(1,:)
        LW_DFLUX(IL,:) = DFLX(1,:)
        LW_UFLUXC(IL,:) = UFLXC(1,:)
        LW_DFLUXC(IL,:) = DFLXC(1,:)
      ENDIF !LW
      IF (LSWRAD) THEN

        CALL RRTMG_SW 
     &       (ONECOL    ,LLPAR    ,ICLDMCL , 
     &        PCENTER(IL,:)    ,PLEV(IL,:),TLAY(IL,:),TLEV(IL,:),
     &        TSFC(IL), 
     &        H2OVMR(IL,:)  ,O3VMR(IL,:)   ,CO2VMR(IL,:)  ,
     &        CH4VMR(IL,:)  ,N2OVMR(IL,:)  ,O2VMR(IL,:), 
     &        ALBDIRVIS(IL) ,ALBDIFVIS(IL) ,
     &        ALBDIRNIR(IL) ,ALBDIFNIR(IL) , 
     &        SUNCOS(IL)   ,ADJES   ,DOY  ,SCON    , 
     &        INFLGSW ,ICEFLGSW,LIQFLGSW,
     &        CLDFMCL_SW(:,IL,:),TAUCMCL_SW(:,IL,:),
     &        SSACMCL(:,IL,:),ASMCMCL(:,IL,:),FSFCMCL(:,IL,:), 
     &        CIWPMCL_SW(:,IL,:),CLWPMCL_SW(:,IL,:),
     &        REICMCL(IL,:),RELQMCL(IL,:), 
     &        TAUAER_SW(IL,:,:)  ,SSAAER(IL,:,:)  ,ASMAER(IL,:,:)  ,
     &        ECAER ,SWUFLX  ,SWDFLX  ,SWHR  ,SWUFLXC ,SWDFLXC ,SWHRC)
        SW_UFLUX(IL,:) = SWUFLX(1,:)
        SW_DFLUX(IL,:) = SWDFLX(1,:)
        SW_UFLUXC(IL,:) = SWUFLXC(1,:)
        SW_DFLUXC(IL,:) = SWDFLXC(1,:)
      ENDIF !SW
      ENDDO !NCOL
!$OMP END PARALLEL DO
      write(6,*) 'after rrtmg'
      ! OUTPUT RADIATION VARIABLES TO DIAGNOSTIC
      ! IF CALC WITH AEROSOLS AND GASES COMPLETED
      ! USE ISPECMENU (REFERENCES THE INPUT.GEOS.RAD LIST)
      ! TO DETERMINE WHICH FLUX HAS BEEN CALCULATED
      ! OUTPUT DIAGNOSTIC INDEX IS ISPECMENU+1 (ISPECMENU=0 FOR BASELINE)
      OUTIDX = ISPECMENU + 1

      !THE NUMBER OF ND71 OUTPUTS PER FIELD
      NAD71 = NSPECRADMENU + 1

      !FIRST CHECK IF WE HAVE ALREADY OUTPUT AEROSOL DIAGNOSTICS
      !(I.E. IF BOTH ALL-SKY AND CLEAR-SKY ARE SWITCHED ON)
      IF ((LSKYRAD(1)).AND.(LSKYRAD(2))) THEN
      !WE ONLY NEED TO OUTPUT DURING ONE OF THESE, SO DONT WHEN ICLD=0
       IF (ICLD.EQ.0) THEN
        LOUTPUTAERO=.FALSE.
       ENDIF
      ENDIF

      write(6,*) 'Before Output'
!OMP PARALLEL DO
!OMP+DEFAULT( SHARED )
!OMP+PRIVATE( I, J, LL, W, IJLOOP )
!OMP+PRIVATE( AODTMP, SSATMP, ASYMTMP)
!OMP+PRIVATE( AODOUT, SSAOUT, ASYMOUT)
!OMP+SCHEDULE( DYNAMIC )
      DO J=1,JJPAR
      DO I=1,IIPAR
       IJLOOP   = (J-1)*IIPAR+I
       IF (ICLD.GT.0) THEN
        !ALL-SKY (WE GET CLEAR-SKY WITH THIS TOO)
        !N.B. UPWELLING SHOULD BE NEGATIVE AS DOWN IS +VE
        AD71(I,J,OUTIDX) = AD71(I,J,OUTIDX) -  
     &                     SNGL(SW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+NAD71) = AD71(I,J,OUTIDX+NAD71) +
     &                     SNGL(SW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+2*NAD71) = AD71(I,J,OUTIDX+2*NAD71) -
     &                     SNGL(LW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+3*NAD71) = AD71(I,J,OUTIDX+3*NAD71) +
     &                     SNGL(LW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+4*NAD71) = AD71(I,J,OUTIDX+4*NAD71) -
     &                     SNGL(SW_UFLUXC(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+5*NAD71) = AD71(I,J,OUTIDX+5*NAD71) +
     &                     SNGL(SW_DFLUXC(IJLOOP,1))
        AD71(I,J,OUTIDX+6*NAD71) = AD71(I,J,OUTIDX+6*NAD71) -
     &                     SNGL(LW_UFLUXC(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+7*NAD71) = AD71(I,J,OUTIDX+7*NAD71) +
     &                     SNGL(LW_DFLUXC(IJLOOP,1))
       ELSE
        !CLEAR-SKY (RUNNING WITH CLOUDS OFF)
        AD71(I,J,OUTIDX+4*NAD71) = AD71(I,J,OUTIDX+4*NAD71) -
     &                     SNGL(SW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+5*NAD71) = AD71(I,J,OUTIDX+5*NAD71) +
     &                     SNGL(SW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+6*NAD71) = AD71(I,J,OUTIDX+6*NAD71) -
     &                     SNGL(LW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+7*NAD71) = AD71(I,J,OUTIDX+7*NAD71) +
     &                     SNGL(LW_DFLUX(IJLOOP,1))
       ENDIF
       !OUTPUT OPTICS FOR EACH
       !CHECK THAT WE HAVE SOME AEROSOL TO OUTPUT 
       !IF OUTIDX=1 THEN IT IS THE BASELINE WHICH NOW CONTAINS ALL
       !AEROSOL - IDEALLY THIS NEEDS DUMPING INTO THE PM TRACER
       !SKIP OUTIDX=1,2,3 (BASELINE, OZONE AND CH4)
       IF ((OUTIDX.GE.4).AND.(LOUTPUTAERO)) THEN
       !INTERPOLATE TO THE REQUESTED WAVELENGTH       
       DO W=1,NWVSELECT
      ! IF (NWVSELECT.GT.1) THEN
        AODTMP  = 0.0D0
        SSATMP  = 0.0D0
        ASYMTMP = 0.0D0
        AODOUT  = 0.0D0
        SSAOUT  = 0.0D0
        ASYMOUT = 0.0D0
        !! TEST IMPACT ON RTAOD OF ONLY GOING TO LEV=30
        DO LL=1,30 !!LLPAR
         !CHECK AOD IS NON-ZERO BEFORE LOG...
         IF((TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2,W)).GT.0).AND.
     &      (TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(1,W)).GT.0)) THEN
          AODTMP=SNGL(TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2,W))*
     &           ACOEF_WV(W)**(BCOEF_WV(W)*
     &           LOG(TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(1,W))/
     &            TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2,W)))))
          SSATMP=SNGL( CCOEF_WV(W)*
     &           SSAAERDIAG(IJLOOP,LL,IRTWVSELECT(2,W))+
     &           (1.0D0-CCOEF_WV(W))*
     &           SSAAERDIAG(IJLOOP,LL,IRTWVSELECT(1,W)))*AODTMP
          ASYMTMP=SNGL( CCOEF_WV(W)*
     &           ASMAERDIAG(IJLOOP,LL,IRTWVSELECT(2,W))+
     &           (1.0D0-CCOEF_WV(W))*
     &           ASMAERDIAG(IJLOOP,LL,IRTWVSELECT(1,W)))*SSATMP
          AODOUT=AODOUT+AODTMP
          SSAOUT=SSAOUT+SSATMP
          ASYMOUT=ASYMOUT+ASYMTMP
         ENDIF
        ENDDO !LLPAR
        !WE ARE SAVING COLUMN AVERAGED VALUES FOR EACH SPECIES
        !DIVIDE THROUGH BY NUMBER OF GRIDBOXES AND AOD*SSA
        ASYMOUT=ASYMOUT/SSAOUT
        !DIVIDE THROUGH BY NUMBER OF GRIDBOXES AND AOD
        SSAOUT=SSAOUT/AODOUT
        !offsetting output depending on wavelength
        AD71(I,J,OUTIDX+(8+3*(W-1))*NAD71) = 
     &  AD71(I,J,OUTIDX+(8+3*(W-1))*NAD71) + AODOUT
        AD71(I,J,OUTIDX+(9+3*(W-1))*NAD71) = 
     &  AD71(I,J,OUTIDX+(9+3*(W-1))*NAD71) + SSAOUT
        AD71(I,J,OUTIDX+(10+3*(W-1))*NAD71)= 
     &  AD71(I,J,OUTIDX+(10+3*(W-1))*NAD71) + ASYMOUT
        ENDDO !NWVSELECT
       ENDIF
      ENDDO 
      ENDDO
!OMP END PARALLEL DO

!EOC
      END SUBROUTINE DO_RRTMG_RAD_TRANSFER

!******************************************************************************

      SUBROUTINE SET_SPECMASK(ISPECRADMENU)
!     THIS ROUTINE CONVERTS THE SPECIES SWITCHES IN THE INPUT.MOD
!     RADIATION SECTION INTO THE LIST OF SPECIES THAT SHOULD BE PASSED
!     THROUGH TO RRTMG. THIS MUST BE DONE IN A SUBTRACTIVE WAY, E.G. IF
!     WE REQUIRE THE DRE OF SULFATE THEN THE BASELINE WILL CONTAIN ALL
!     SPECIES AND THE SULFATE RUN WILL CONTAIN EVERYTHING BUT SULFATE,
!     THIS WAY THE CONTRIBUTION OF SULFATE CAN BE INFERRED. THEREFORE,
!     ALL SPECIES ARE INITIALLY SET TO 1 AND THEIR INCLUSION RESULTS IN
!     SPECMASK FOR THE PARTICULAR SPECIES BEING SET TO ZERO.

      USE JV_CMN_MOD,   ONLY :  SPECMASK,NASPECRAD,
     &                          LSPECRADMENU,NSPECRADMENU
      INTEGER, INTENT(IN)    :: ISPECRADMENU
      INTEGER                :: N0,N,I,II

      !CONVERT THE CURRENT SPECIES SELECTION FROM THE INPUT MENU INTO
      !THE REQUIRED SPECIES TO BE INCLUDED IN THE RRTMG CALCULATION
      SPECMASK(:)=1
      !IF ISPECRADMENU IS ZERO, WE JUST WANTED BASELINE, I.E. SPECMASK(:)=1
      IF (ISPECRADMENU.GT.0) THEN
       !CHECK THIS IS A REQUESTED SPECIES
       IF(LSPECRADMENU(ISPECRADMENU).EQ.1) THEN 
       SELECT CASE( ISPECRADMENU )
       !OZONE
       CASE( 1 ) 
        SPECMASK(17)=0
        !WRITE(6,*) 'RT:OZONE'
       !METHANE
       CASE( 2 )
        SPECMASK(18)=0
        !WRITE(6,*) 'RT:CH4'
       !SU
       CASE( 3 )
        SPECMASK(1)=3
        !WRITE(6,*) 'RT:SU'
       !NI
       CASE( 4 )
        SPECMASK(2)=4
        !WRITE(6,*) 'RT:NI'
       !AM
       CASE( 5 )
        SPECMASK(3)=5
        !WRITE(6,*) 'RT:AM'
       !BC
       CASE( 6 )
        SPECMASK(4)=6
        SPECMASK(8)=6
        !WRITE(6,*) 'RT:BC'
       !OA
       CASE( 7 )
        SPECMASK(5)=7
        SPECMASK(9)=7
        !WRITE(6,*) 'RT:OA'
       !SS
       CASE( 8 )
        SPECMASK(6)=8
        SPECMASK(7)=8
        !WRITE(6,*) 'RT:SS'
       !DUST
       CASE( 9 )
        SPECMASK(10)=9
        SPECMASK(11)=9
        SPECMASK(12)=9
        SPECMASK(13)=9
        SPECMASK(14)=9
        SPECMASK(15)=9
        SPECMASK(16)=9
        !WRITE(6,*) 'RT:DU'
       !PM - ALL AEROSOL
       CASE( 10 )
        !SET ALL BUT GASES TO 10
        DO II = 1, NASPECRAD
         SPECMASK(II)=10
        ENDDO
       ! WRITE(6,*) 'RT:PM'
       END SELECT
       ENDIF    
      ENDIF

      END SUBROUTINE SET_SPECMASK

!******************************************************************************

      SUBROUTINE READ_SURFACE_RAD(FORCEREAD)

!
!******************************************************************************
!  SUBROUTINE READ_SURFACE_RAD GETS THE SURFACE ALBEDO AND EMISSIVITY
!  FROM DATA FILES PROCESSED FROM MODIS MCD43C3.5 AND MOD11C2
!  ALBEDO IS DIRECT (BLACK SKY) AND DIFFUSE (WHITE SKY) AND INTERPOLATED
!  TO THE FIRST 21 WAVELENGTHS OF GADS, USED IN THE RRTMG CODE
!  EMISSIVITY HAS BEEN INTERPOLATED TO LAST 40 WAVELENGTHS OF GADS
!
!  THIS ROUTINE IS CALLED FROM MAIN.F WHEN ITS_TIME_FOR_SURFACE_RAD() IS
!  TRUE (EVERY 8 DAYS)
!  DAR (10/2012)
!******************************************************************************
      ! REFERENCES TO F90 MODULES
      USE BPCH2_MOD,     ONLY : GET_NAME_EXT_2D, GET_RES_EXT
      USE BPCH2_MOD,     ONLY : GET_TAU0,        READ_BPCH2
      USE DIRECTORY_MOD, ONLY : DATA_DIR
      USE TIME_MOD,      ONLY : GET_YEAR, GET_MONTH 
      USE TIME_MOD,      ONLY : GET_DAY,  GET_DAY_OF_YEAR  
      USE TIME_MOD,      ONLY : YMD_EXTRACT
      USE JULDAY_MOD,    ONLY : JULDAY, CALDATE

      USE CMN_SIZE_MOD        ! SIZE PARAMETERS
      USE JV_CMN_MOD

      LOGICAL, INTENT(IN), OPTIONAL :: FORCEREAD   ! RESET FIRST-TIME FLAG?

      ! LOCAL VARIABLES
      LOGICAL               :: DOREAD
      INTEGER               :: THISDAY, THISMONTH, THISYEAR, DAYSAWAY
      INTEGER               :: THISDOFY, I, J
      INTEGER, SAVE         :: LASTDAY = -1
      REAL*4                :: ARRAY1(IIPAR,JJPAR)
      REAL*4                :: ARRAY2(IIPAR,JJPAR,NEMISS)
      REAL*8                :: XTAU
      CHARACTER(LEN=255)    :: FILENAME
      CHARACTER(LEN=4)      :: STHISYEAR
      CHARACTER(LEN=3)      :: STHISDOFY
      INTEGER               :: NYMD, NHMS
      REAL*8                :: JDNEW


      ! READ_SURFACE_RAD BEGINS HERE!
      !=================================================================
      !FLAG TO FORCE READ FROM CLOSEST DAY
      DOREAD=.FALSE.
      ! RESET THE FIRST FLAG IF
      IF ( PRESENT( FORCEREAD ) ) THEN
         IF ( FORCEREAD ) DOREAD = .TRUE.
      ENDIF


      ! TAU FOR READING THE BPCH FILES
      ! FIX YEAR AS 2002 FOR CLIMATOLOGY
      THISYEAR  = 2002 !GET_YEAR()
      THISMONTH = GET_MONTH()
      THISDOFY  = GET_DAY_OF_YEAR()
      THISDAY   = GET_DAY() 
      
      !FORCE READ OF CLOSEST FILE
      IF ( DOREAD ) THEN
       !NUMBER OF DAYS UNTIL NEXT FILE
       DAYSAWAY = 9 - MOD(THISDOFY,8)
       !READ CLOSEST 8-DAY FILE
       IF ( DAYSAWAY .GE. 4) THEN
        THISDOFY = THISDOFY - (8 - DAYSAWAY)
       ELSE
        THISDOFY = THISDOFY + DAYSAWAY
       ENDIF
      ENDIF

       ! CALCULATE NEW MONTH AND DAY FROM JULIAN DAY (CLH)
      JDNEW = THISDOFY + JULDAY(THISYEAR, 1, 0D0)
      CALL CALDATE(JDNEW, NYMD, NHMS)
      CALL YMD_EXTRACT( NYMD, THISYEAR, THISMONTH, THISDAY )
!     THIS GETS CALLED EVERY TIMESTEP ON THE CORRECT DAY
!     SO WE NEED A CTACH TO ONLY READ THE FIRST TIME THAT DAY      
      IF ( THISDOFY == LASTDAY ) THEN
!       WRITE(6,*) 'SURFACE RAD ALREADY READ', 
!     &            THISDAY,THISMONTH,THISYEAR
       RETURN
      ENDIF
      WRITE(STHISDOFY,101) THISDOFY
101   FORMAT( I3.3 )
      WRITE(STHISYEAR,102) THISYEAR
102   FORMAT( I4.4 )
      XTAU      = GET_TAU0( THISMONTH, THISDAY, THISYEAR )


      ! FILENAME AND TIME
      FILENAME  = TRIM( DATA_DIR )         //
     &            'modis_surf_201210/' //
     &            'modis_surf_02-07_' //
     &            STHISDOFY//'.'// GET_RES_EXT()

      ! ECHO INFO
      WRITE( 6, 100 ) TRIM( FILENAME )
 100  FORMAT( '     - GET_SURFACE_RAD_DATA: READING ', A )
      !WRITE( 6,*) 'XTAU: ',XTAU
      !-----------------------
      ! DIRECT SURFACE ALBEDO (VIS)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 71,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIR(I,J,1) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIR1 READ'
      !-----------------------
      ! DIFFUSE SURFACE ALBEDO (VIS)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 73,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIF(I,J,1) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIF1 READ'
      !-----------------------
      ! DIRECT SURFACE ALBEDO (NIR)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 72,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIR(I,J,2) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIR2 READ'
      !-----------------------
      ! DIFFUSE SURFACE ALBEDO (NIR)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 74,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIF(I,J,2) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIF2 READ'
      !-----------------------
      ! SURFACE EMISSIVITY
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 75,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 NEMISS,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      EMISS(:,:,:) = ARRAY2(:,:,:)

      !SAVE THIS DAY TO PREVENT RE-READ OF SAME FILE
      LASTDAY = THISDOFY
      WRITE(6,*) 'SURFACE REFLECTIVITY READ SUCCESSFULLY'
      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE

!******************************************************************************

      SUBROUTINE READ_STRAT_CLIM()

!
!******************************************************************************
!  SUBROUTINE READ_STRAT_CLIM GETS THE STORED N2O AND CH4 PROFILES
!  CREATED BASED ON TES CLIMATOLOGY.
!  THESE ARE GLOBAL JULY MEAN PROFILES FROM TES THAT ARE 
!  INTERPOLATED TO THE 3D GEOS-CHEM GRID AS A SIMPLE SOLUTION TO
!  ACCOUNT FOR STRATOSPHERIC CONTRIBUTION OF THESE SPECIES TO RADIATIVE
!  BALANCE.
!
!  THIS ROUTINE IS CALLED FROM MAIN.F ONE AT THE START OF THE MODEL RUN
!  DAR (12/2012)
!******************************************************************************
      ! REFERENCES TO F90 MODULES
      USE BPCH2_MOD,     ONLY : GET_NAME_EXT_2D, GET_RES_EXT
      USE BPCH2_MOD,     ONLY : GET_TAU0,        READ_BPCH2
      USE DIRECTORY_MOD, ONLY : DATA_DIR
      USE TIME_MOD,      ONLY : GET_YEAR, GET_MONTH
      USE TIME_MOD,      ONLY : GET_DAY,  GET_DAY_OF_YEAR
      USE TRANSFER_MOD,  ONLY : TRANSFER_3D

      USE CMN_SIZE_MOD        ! SIZE PARAMETERS
      USE JV_CMN_MOD


      ! LOCAL VARIABLES
      LOGICAL               :: DOREAD
      REAL*4                :: ARRAY2(IIPAR,JJPAR,LGLOB)
      REAL*8                :: XTAU
      CHARACTER(LEN=255)    :: FILENAME


      ! READ_STRAT_CHEM BEGINS HERE!
      !=================================================================

      ! FILENAME AND TIME
      FILENAME  = TRIM( DATA_DIR )         //
!     &            'STRAT_CHEM_201206/' //
     &            'species_clim_profiles' //
     &            '.'// GET_RES_EXT()

      ! ECHO INFO
      WRITE( 6, 100 ) TRIM( FILENAME )
 100  FORMAT( '     - GET_TES_STRAT_CLIM: READING ', A )

      XTAU      = GET_TAU0( 1, 1, 2000 )
      WRITE(6,*) XTAU,LLPAR
      !-----------------------
      ! N2O
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 71,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, N2OCLIM )

      !-----------------------
      ! CH4
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 72,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CH4CLIM)

      WRITE(6,*) 'CFC MIPAS & UARS CLIMATOLOGY READ SUCCESSFULLY'

      !-----------------------
      ! CFC11
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 73,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC11CLIM )

      !-----------------------
      ! CFC12
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 74,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC12CLIM)

      !-----------------------
      ! CCL4
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 75,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CCL4CLIM )

      !-----------------------
      ! CFC22
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 76,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC22CLIM)

     

      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE

!******************************************************************************


!------------------------------------------------------------------------------

      SUBROUTINE INIT_SURFACE_RAD()
!
!******************************************************************************
!  SUBROUTINE INIT_SURFACE_RAD INITIALIZES ALL ALLOCATABLE MODULE ARRAYS.
!******************************************************************************
!
      ! REFERENCES TO F90 MODULES
      USE ERROR_MOD, ONLY : ALLOC_ERR
      USE JV_CMN_MOD
      USE CMN_SIZE_MOD

      ! LOCAL VARIABLES
      INTEGER :: AS

      !=================================================================
      ALLOCATE( ALBDIR( IIPAR, JJPAR, NALBD ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'ALBDIR' )
      ALBDIR = 0D0

      ALLOCATE( ALBDIF( IIPAR, JJPAR, NALBD ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'ALBDIF' )
      ALBDIF = 0D0

      ALLOCATE( EMISS( IIPAR, JJPAR, NEMISS ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'EMISS' )
      EMISS = 0D0

      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE INIT_SURFACE_RAD

!------------------------------------------------------------------------------

      SUBROUTINE INIT_STRAT_CLIM
!
!******************************************************************************
!  SUBROUTINE INIT_STRAT_CLIM INITIALIZES ALL ALLOCATABLE MODULE ARRAYS.
!******************************************************************************
!
      ! REFERENCES TO F90 MODULES
      USE ERROR_MOD, ONLY : ALLOC_ERR
      USE JV_CMN_MOD
      USE CMN_SIZE_MOD

      ! LOCAL VARIABLES
      INTEGER :: AS

      !=================================================================
      ALLOCATE( N2OCLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'N2OCLIM' )
      N2OCLIM = 0D0

      ALLOCATE( CH4CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CH4CLIM' )
      CH4CLIM = 0D0

      ALLOCATE( CFC11CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC11CLIM' )
      CFC11CLIM = 0D0

      ALLOCATE( CFC12CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC12CLIM' )
      CFC12CLIM = 0D0

      ALLOCATE( CCL4CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CCL4CLIM' )
      CCL4CLIM = 0D0

      ALLOCATE( CFC22CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC22CLIM' )
      CFC22CLIM = 0D0


      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE INIT_STRAT_CLIM

!------------------------------------------------------------------------------

      SUBROUTINE INIT_MCICA_CLOUDS()
!
!******************************************************************************
!  SUBROUTINE INIT_STRAT_CLIM INITIALIZES ALL ALLOCATABLE MODULE ARRAYS.
!******************************************************************************
!
      ! REFERENCES TO F90 MODULES
      USE ERROR_MOD, ONLY : ALLOC_ERR
      USE JV_CMN_MOD
      USE CMN_SIZE_MOD
      USE PARRRTM, ONLY : NGPTLW
      USE PARRRSW, ONLY : NGPTSW

      ! LOCAL VARIABLES
      INTEGER :: AS

      !=================================================================
      ALLOCATE( CLDFMCL_LW( NGPTLW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CLDFMCL_LW' )
      CLDFMCL_LW = 0D0

      ALLOCATE( CIWPMCL_LW( NGPTLW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CIWPMCL_LW' )
      CIWPMCL_LW = 0D0

      ALLOCATE( CLWPMCL_LW( NGPTLW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CLWPMCL_LW' )
      CLWPMCL_LW = 0D0

      ALLOCATE( TAUCMCL_LW( NGPTLW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'TAUCMCL_LW' )
      TAUCMCL_LW = 0D0

      ALLOCATE( CLDFMCL_SW( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CLDFMCL_SW' )
      CLDFMCL_SW = 0D0

      ALLOCATE( CIWPMCL_SW( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CIWPMCL_SW' )
      CIWPMCL_SW = 0D0

      ALLOCATE( CLWPMCL_SW( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CLWPMCL_SW' )
      CLWPMCL_SW = 0D0

      ALLOCATE( TAUCMCL_SW( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'TAUCMCL_SW' )
      TAUCMCL_SW = 0D0

      ALLOCATE( SSACMCL( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'SSACMCL' )
      SSACMCL = 0D0

      ALLOCATE( ASMCMCL( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'ASMCMCL' )
      ASMCMCL = 0D0

      ALLOCATE( FSFCMCL( NGPTSW, IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'FSFCMCL' )
      FSFCMCL = 0D0

      ALLOCATE( RELQMCL( IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'RELQMCL' )
      RELQMCL = 0D0

      ALLOCATE( REICMCL( IIPAR*JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'REICMCL' )
      REICMCL = 0D0



      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE INIT_MCICA_CLOUDS


!------------------------------------------------------------------------------


!
      SUBROUTINE CLEANUP_SURFACE_RAD
!
! !REVISION HISTORY:
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      !=================================================================
      ! CLEANUP_DAO BEGINS HERE!
      !=================================================================
      IF ( ALLOCATED( ALBDIR          ) ) DEALLOCATE( ALBDIR          )
      IF ( ALLOCATED( ALBDIF          ) ) DEALLOCATE( ALBDIF          )
      IF ( ALLOCATED( EMISS           ) ) DEALLOCATE( EMISS           )

      END SUBROUTINE CLEANUP_SURFACE_RAD

!------------------------------------------------------------------------------


!
      SUBROUTINE CLEANUP_STRAT_CLIM
!
! !REVISION HISTORY:
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      !=================================================================
      ! CLEANUP_DAO BEGINS HERE!
      !=================================================================
      IF ( ALLOCATED( CH4CLIM         ) ) DEALLOCATE( CH4CLIM         )
      IF ( ALLOCATED( N2OCLIM         ) ) DEALLOCATE( N2OCLIM         )
      IF ( ALLOCATED( CFC11CLIM       ) ) DEALLOCATE( CFC11CLIM       )
      IF ( ALLOCATED( CFC12CLIM       ) ) DEALLOCATE( CFC12CLIM       )
      IF ( ALLOCATED( CCL4CLIM        ) ) DEALLOCATE( CCL4CLIM        )
      IF ( ALLOCATED( CFC22CLIM       ) ) DEALLOCATE( CFC22CLIM       )


      END SUBROUTINE CLEANUP_STRAT_CLIM

!------------------------------------------------------------------------------


!
      SUBROUTINE CLEANUP_MCICA_CLOUDS
!
! !REVISION HISTORY:
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      !=================================================================
      ! CLEANUP_DAO BEGINS HERE!
      !=================================================================
      IF ( ALLOCATED( CLDFMCL_LW     ) ) DEALLOCATE( CLDFMCL_LW       )
      IF ( ALLOCATED( CIWPMCL_LW     ) ) DEALLOCATE( CIWPMCL_LW       )
      IF ( ALLOCATED( CLWPMCL_LW     ) ) DEALLOCATE( CLWPMCL_LW       )
      IF ( ALLOCATED( TAUCMCL_LW     ) ) DEALLOCATE( TAUCMCL_LW       )
      IF ( ALLOCATED( CLDFMCL_SW     ) ) DEALLOCATE( CLDFMCL_SW       )
      IF ( ALLOCATED( CIWPMCL_SW     ) ) DEALLOCATE( CIWPMCL_SW       )
      IF ( ALLOCATED( CLWPMCL_SW     ) ) DEALLOCATE( CLWPMCL_SW       )
      IF ( ALLOCATED( TAUCMCL_SW     ) ) DEALLOCATE( TAUCMCL_SW       )
      IF ( ALLOCATED( SSACMCL        ) ) DEALLOCATE( SSACMCL          )
      IF ( ALLOCATED( ASMCMCL        ) ) DEALLOCATE( ASMCMCL          )
      IF ( ALLOCATED( FSFCMCL        ) ) DEALLOCATE( FSFCMCL          )
      IF ( ALLOCATED( REICMCL        ) ) DEALLOCATE( REICMCL          )
      IF ( ALLOCATED( RELQMCL        ) ) DEALLOCATE( RELQMCL          )


      END SUBROUTINE CLEANUP_MCICA_CLOUDS


      END MODULE RRTMG_RAD_TRANSFER_MOD
#ENDIF

