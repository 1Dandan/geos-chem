#IF   DEFINED( RRTMG )
        MODULE RRTMG_RAD_TRANSFER_MOD

        USE PARRRTM, ONLY : NBNDLW
        USE PARRRSW, ONLY : NBNDSW
        USE OMP_LIB
        USE CMN_SIZE_MOD, ONLY : IIPAR,JJPAR,LLPAR, NDUST, NAER
        USE JV_CMN_MOD, ONLY: RTODAER, RTSSAER, RTASYMAER, 
     &                        WVAA, SPECMASK, LSPECRADMENU,
     &                        NSPECRADMENU
        USE DIAG_MOD,      ONLY : AD71 !RAD OUTPUT DIAGNOSTIC ARRAY
!        IMPLICIT NONE
!        PRIVATE


        !PUBLIC MEMBER FUNCTIONS
        PUBLIC  :: CLEANUP_SURFACE_RAD
        PUBLIC  :: INIT_SURFACE_RAD
        PUBLIC  :: READ_SURFACE_RAD

!
! !PUBLIC DATA MEMBERS:
!

      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: ALBDIR(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: ALBDIF(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: EMISS (:,:,:)

      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CH4CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: N2OCLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC11CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC12CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CCL4CLIM(:,:,:)
      REAL*8,  ALLOCATABLE, PUBLIC, TARGET :: CFC22CLIM(:,:,:)

        REAL*8  :: LW_UFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_DFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_UFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_DFLUX(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_UFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: LW_DFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_UFLUXC(IIPAR*JJPAR,LLPAR+1)
        REAL*8  :: SW_DFLUXC(IIPAR*JJPAR,LLPAR+1)

        REAL*8   :: RRTMG_LMB(NBNDLW+NBNDSW)

        INTEGER  :: ID_AER_LMB0 (NBNDLW+NBNDSW)
        INTEGER  :: ID_AER_LMB1 (NBNDLW+NBNDSW)
        CONTAINS
!------------------------------------------------------------------------------
!BOP
!
! !IROUTINE: DO_RRTMG_RAD_TRANSFER
!
! !DESCRIPTION: INTERNAL SUBROUTINE 
!\\
!\\
! !INTERFACE:
!
      SUBROUTINE DO_RRTMG_RAD_TRANSFER( THISDAY, THISMONTH, ICLD, 
     &                        ISPECMENU, ISEED)
!
! !USES:
!
      USE PARKIND,        ONLY : IM=>KIND_IM, RB=>KIND_RB
      USE RRTMG_LW_INIT,  ONLY : RRTMG_LW_INI
      USE RRTMG_SW_INIT,  ONLY : RRTMG_SW_INI

      
      !USE STRAT_CHEM_MOD, ONLY : GET_SPECIES
      USE TROPOPAUSE_MOD, ONLY : ITS_IN_THE_TROP
      USE PRESSURE_MOD,   ONLY : GET_PCENTER,      GET_PEDGE
      USE COMODE_MOD,   ONLY : AIRDENS,        CSPEC,       JLOP
      USE COMODE_LOOP_MOD,   ONLY : ICH4, AVG, WTAIR
      USE DAO_MOD,      ONLY : BXHEIGHT, QI, QL, TAUCLI, TAUCLW
      USE DAO_MOD,      ONLY : CLDF, SUNCOS, AVGW, TSKIN, T, ALBD
      USE DAO_MOD,      ONLY : AIRVOL, AIRDEN
      USE TIME_MOD,     ONLY : GET_DAY_OF_YEAR, GET_HOUR
      USE TRACERID_MOD, ONLY : IDO3
      USE DIAG_MOD,     ONLY : AD71
      USE JV_CMN_MOD,   ONLY : NSPECRAD  ! NUMBER OF SPECIES FOR RT
      USE JV_CMN_MOD,   ONLY : NASPECRAD ! NUMBER OF AEROSOL SPECIES
      USE JV_CMN_MOD,   ONLY : SPECMASK, IWVSELECT, NWVSELECT
      USE JV_CMN_MOD,   ONLY : ACOEF_WV, BCOEF_WV, CCOEF_WV
      USE LOGICAL_MOD,  ONLY : LLWRAD,LSWRAD,LSKYRAD

      USE JV_CMN_MOD,   ONLY : DO3
      USE TOMS_MOD,     ONLY: GET_OVERHEAD_O3
      USE GRID_MOD,     ONLY : GET_YMID

 
!
      PARAMETER (NWV=37)
      INTEGER, INTENT(IN) :: THISDAY      ! CURRENT DAY
      INTEGER, INTENT(IN) :: THISMONTH    ! CURRENT MONTH
      INTEGER, INTENT(INOUT) :: ICLD         ! CLOUD FLAG FOR RRTMG: 0-NOCLOUD, 1-GREY CLOUD
      INTEGER, INTENT(IN) :: ISPECMENU    ! THE SPECIES BEING INCLUDED
                                          ! NEEDED FOR OUTPUT PURPOSES
      INTEGER, INTENT(IN) :: ISEED  
      !LOGICAL, INTENT(IN) :: SPECMASK(NSPECRAD) ! MASK FOR NUMBER OF SPECIES CONSIDERED 
      LOGICAL             :: DOAERAD      ! INCLUDE AEROSOL DETERMINED FROM SPECMASK
      LOGICAL             :: LOUTPUTAERO  ! OUTPUT AEROSOL DIAGNOSTICS?
      INTEGER             :: NAD71        ! NUMBER OF OUTPUTS PER FIELD
      INTEGER             :: ITIMEVALS(8)
      INTEGER             :: IDIAGOUT     ! INDEX OF THE SPECIES OPTICS FOR OUTPUT
      REAL*8              :: OLDSECS, NEWSECS

!      REAL*8,  INTENT(IN) :: ALBEDO(IIPAR,JJPAR)
! 

! !REMARKS:
!  THIS ROUTINE PASSES INPUTS TO THE RRTMG DRIVER ROUTINE "RAD_DRIVER"
!  VIA THE ARGUMENT LIST.  THIS PREVENTS CIRCULAR REFERENCES.
!
! !REVISION HISTORY: 
!  17 AUG 2012 - R. YANTOSCA - INITIAL VERSION
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:

! TEMPORARY AEROSOL VARIABLES
      REAL*8    :: LAMBDA(NWV)


      ! SCALARS
      INTEGER :: I, J ,L, LL, N, NCOL, JLOOP, IJLOOP
      INTEGER :: IL
      INTEGER :: OUTIDX,IOUTWV
      INTEGER :: IB,IB_SW,IS,NBNDS,NSPEC
      INTEGER :: IS_ON,NASPECRAD_ON
      INTEGER :: IASPECRAD_ON(NASPECRAD)
      INTEGER :: IRTWVSELECT(2) !REQUIRED SW WAVELENGTHS FOR AOD OUTPUT
      REAL*8  :: RHOICE=0.9167, RHOLIQ=1.    ! G/CM3
      ! REL AND REI FROM PERSONAL COMMUNICATION FROM LAZAROS OREOPOULOS
      ! (GSFC) 12/12/12
      REAL*8  :: REL_DEF = 14.2, REI_DEF=24.8    ! MICRONS
      REAL*8  :: DOY

      INTEGER           :: IHR
      CHARACTER(LEN=2)  :: CHR 

      ! ARRAYS FROM GC
      REAL*8  :: PCENTER(IIPAR*JJPAR,LLPAR)
      REAL*8  :: PEDGE  (IIPAR*JJPAR,LLPAR)
      LOGICAL :: INTROP (IIPAR,JJPAR,LLPAR)

      !ARRAYS FOR RRTMG
      REAL(KIND=RB) :: O3VMR (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CH4VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: N2OVMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC11VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC12VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CFC22VMR(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CCL4VMR(IIPAR*JJPAR,LLPAR)

      REAL(KIND=RB) :: TAUCLD(IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CLDFR (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: RELIQ (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: REICE (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CLIQWP (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: CICEWP (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: ALBVIS (IIPAR*JJPAR)

      REAL(KIND=RB) :: TAUAER_LW (IIPAR*JJPAR,LLPAR,NBNDLW)
      REAL(KIND=RB) :: TAUAER_SW (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL(KIND=RB) :: SSAAER (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL(KIND=RB) :: ASMAER (IIPAR*JJPAR,LLPAR,NBNDSW)
      !TO STORE THE OPTICS FOR THE AEROSOLS WE ARE INTERESTED IN
      REAL*8        :: TAUAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL*8        :: SSAAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)
      REAL*8        :: ASMAERDIAG (IIPAR*JJPAR,LLPAR,NBNDSW)

      REAL(KIND=RB) :: H2OVMR   (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: TLAY     (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: PLAY     (IIPAR*JJPAR,LLPAR)
      REAL(KIND=RB) :: TSFC     (IIPAR*JJPAR)
 
      !COLUMN-INDEPENDENT VARIABLES FOR RAD_DRIVER
 
      REAL(KIND=RB) :: TSFC0(1)
      REAL(KIND=RB) :: TLAY0(1,LLPAR) 
      REAL(KIND=RB) :: H2OVMR0(1,LLPAR)
      REAL(KIND=RB) :: SUNCOS0(1)
      REAL(KIND=RB) :: PEDGE0(1,LLPAR)
      REAL(KIND=RB) :: PCENTER0(1,LLPAR)
      REAL(KIND=RB) :: O3VMR0(1,LLPAR)
      REAL(KIND=RB) :: CH4VMR0(1,LLPAR)
      REAL(KIND=RB) :: N2OVMR0(1,LLPAR)
      REAL(KIND=RB) :: CFC11VMR0(1,LLPAR)
      REAL(KIND=RB) :: CFC12VMR0(1,LLPAR)
      REAL(KIND=RB) :: CFC22VMR0 (1,LLPAR)
      REAL(KIND=RB) :: CCL4VMR0(1,LLPAR)
      REAL(KIND=RB) :: TAUCLD0 (1,LLPAR)
      REAL(KIND=RB) :: CLDFR0 (1,LLPAR)
      REAL(KIND=RB) :: CLIQWP0(1,LLPAR)
      REAL(KIND=RB) :: CICEWP0(1,LLPAR)
      REAL(KIND=RB) :: RELIQ0 (1,LLPAR)
      REAL(KIND=RB) :: REICE0(1,LLPAR)
      REAL(KIND=RB) :: ALBDIRVIS0(1)
      REAL(KIND=RB) :: ALBDIFVIS0(1) 
      REAL(KIND=RB) :: ALBDIRNIR0(1)
      REAL(KIND=RB) :: ALBDIFNIR0(1)
      REAL(KIND=RB) :: RTEMISS0(1,NBNDLW)
      REAL(KIND=RB) :: TAUAER_LW0(1,LLPAR,NBNDLW)
      REAL(KIND=RB) :: TAUAER_SW0(1,LLPAR,NBNDSW)
      REAL(KIND=RB) :: SSAAER0(1,LLPAR,NBNDSW)
      REAL(KIND=RB) :: ASMAER0(1,LLPAR,NBNDSW)
      REAL*8 :: LW_UFLUX0(1,LLPAR+1)
      REAL*8 :: LW_DFLUX0(1,LLPAR+1)
      REAL*8 :: SW_UFLUX0(1,LLPAR+1)
      REAL*8 :: SW_DFLUX0(1,LLPAR+1)
      REAL*8 :: LW_UFLUXC0(1,LLPAR+1)
      REAL*8 :: LW_DFLUXC0(1,LLPAR+1)
      REAL*8 :: SW_UFLUXC0(1,LLPAR+1)
      REAL*8 :: SW_DFLUXC0(1,LLPAR+1)

      !VARIABLES FOR OBTAINING STRATOSPHERIC VARIABLES
      REAL*8       :: O3COL, YLAT, AIR_TMP

      !SURFACE
      REAL(KIND=RB) :: ALBDIRVIS (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIFVIS (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIRNIR (IIPAR*JJPAR)
      REAL(KIND=RB) :: ALBDIFNIR (IIPAR*JJPAR)
      REAL(KIND=RB) :: RTEMISS   (IIPAR*JJPAR,NBNDLW)

      REAL*8        :: NUMER,DENOM
      REAL*4        :: AODTMP,AODOUT,SSATMP,SSAOUT
      REAL*4        :: ASYMTMP,ASYMOUT
!      INTEGER       :: FLG_FIRST_STRAT, FLG_CALC_STRAT_SCL
      INTEGER       :: FLG_FIRST_STRAT(IIPAR*JJPAR)
      INTEGER       :: ONECOL
      REAL*4        :: CH4SCL(IIPAR*JJPAR)

! FROM RAD_DRIVER... TO BE MERGED
      ! FLAGS AND DIMENSIONS
      INTEGER (KIND=IM) :: ICLD, IDRV
      INTEGER (KIND=IM) :: INFLGLW, ICEFLGLW,LIQFLGLW
      INTEGER (KIND=IM) :: INFLGSW, ICEFLGSW,LIQFLGSW


! PROFILE VARIABLES
      REAL (KIND=RB)  :: PLEV(NCOL,NLAY+1)
      REAL (KIND=RB)  :: TLEV(NCOL,NLAY+1)
      REAL (KIND=RB)  :: CO2VMR(NCOL,NLAY)
      REAL (KIND=RB)  :: O2VMR(NCOL,NLAY)

! SW SOLAR VARIABLES
      INTEGER(KIND=IM) :: DYOFYR               ! DAY OF THE YEAR (USED TO GET EARTH/SUN
      REAL(KIND=RB)  :: ADJES=1.0              ! FLUX ADJUSTMENT FOR EARTH/SUN DISTANCE
      REAL(KIND=RB)  :: COSZEN(NCOL)           ! COSINE OF SOLAR ZENITH ANGLE
      REAL(KIND=RB)  :: SCON=1368.22           ! SOLAR CONSTANT (W/M2)

! SW CLOUD VARIABLES

       REAL(KIND=RB)  :: TAUCLD_SW(NBNDSW,NCOL,NLAY)   ! IN-CLOUD OPTICAL DEPTH
       REAL(KIND=RB)  :: SSACLD(NBNDSW,NCOL,NLAY)      ! IN-CLOUD SINGLE SCATTERING ALBEDO
       REAL(KIND=RB)  :: ASMCLD(NBNDSW,NCOL,NLAY)      ! IN-CLOUD ASYMMETRY PARAMETER
       REAL(KIND=RB)  :: FSFCLD(NBNDSW,NCOL,NLAY)      ! IN-CLOUD FORWARD SCATTERING FRACTION
       REAL(KIND=RB) :: ECAER(NCOL,NLAY,NAEREC)        ! AEROSOL OPTICAL DEPTH AT 0.55UM (IAER=6 ONLY)


! LONGWAVE FLUX VARIABLES
      REAL(KIND=RB)  :: UFLX(NCOL,NLAY+1)         ! TOTAL SKY LONGWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: DFLX(NCOL,NLAY+1) ! TOTAL SKY LONGWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: HR(NCOL,NLAY)   ! TOTAL SKY LONGWAVE RADIATIVE HEATING RATE (K/D)
      REAL(KIND=RB) :: UFLXC(NCOL,NLAY+1)! CLEAR SKY LONGWAVE UPWARD FLUX (W/M2)
      REAL(KIND=RB) :: DFLXC(NCOL,NLAY+1)! CLEAR SKY LONGWAVE DOWNWARD FLUX (W/M2)
      REAL(KIND=RB) :: HRC(NCOL,NLAY) ! CLEAR SKY LONGWAVE RADIATIVE HEATING RATE (K/D)

!- OPTIONAL OUTPUT
     REAL(KIND=RB) :: DUFLX_DT(NCOL,NLAY) ! CHANGE IN UPWARD LONGWAVE FLUX (W/M2/K)
                                       ! WITH RESPECT TO SURFACE TEMPERATURE
                                                      !    DIMENSIONS:
                                                      !    (NCOL,NLAY)
     REAL(KIND=RB) :: DUFLXC_DT(NCOL,NLAY)
            ! CHANGE IN CLEAR
            ! SKY UPWARD
            ! LONGWAVE FLUX
            ! (W/M2/K)
            ! WITH RESPECT TO
            ! SURFACE
            ! TEMPERATURE
            !    DIMENSIONS:
            !    (NCOL,NLAY)

! SHORTWAVE FLUX VARIABLES
! ----- OUTPUT -----

     REAL(KIND=RB) :: SWUFLX(NCOL,NLAY+1)       ! TOTAL SKY SHORTWAVE UPWARD FLUX (W/M2)
     REAL(KIND=RB) :: SWDFLX(NCOL,NLAY+1)       ! TOTAL SKY SHORTWAVE DOWNWARD FLUX (W/M2)
     REAL(KIND=RB) :: SWHR(NCOL,NLAY)         ! TOTAL SKY SHORTWAVE RADIATIVE HEATING RATE (K/D)
     REAL(KIND=RB) :: SWUFLXC(NCOL,NLAY+1)      ! CLEAR SKY SHORTWAVE UPWARD FLUX (W/M2)
     REAL(KIND=RB) :: SWDFLXC(NCOL,NLAY+1)      ! CLEAR SKY SHORTWAVE DOWNWARD FLUX (W/M2)
     REAL(KIND=RB) :: SWHRC(NCOL,NLAY)        ! CLEAR SKY SHORTWAVE RADIATIVE HEATING RATE (K/D)

! LOCAL VARIABLES
      REAL*8 :: GCAIR
      REAL*8 :: RHOA, RHOB, RHOSUM
      REAL*8 :: HR_TEMP
      REAL (KIND=RB)   :: CLDFR_SW(NCOL,NLAY)

! MCICA VARIABLES
      INTEGER(KIND=IM)      :: IPLON
      INTEGER(KIND=IM)      :: PERMUTESEED
      INTEGER(KIND=IM)      :: IRNG=1  ! MERSENNE TWISTER RANDOM NUMBER GENERATOR

      REAL(KIND=RB)         :: RELQMCL(NCOL,NLAY)
      REAL(KIND=RB)         :: REICMCL(NCOL,NLAY)

! MCICA LW SPECIFIC
      REAL(KIND=RB)         :: CLDFMCL(NGPTLW,NCOL,NLAY)
      REAL(KIND=RB)         :: CIWPMCL(NGPTLW,NCOL,NLAY)
      REAL(KIND=RB)         :: CLWPMCL(NGPTLW,NCOL,NLAY)
      REAL(KIND=RB)         :: TAUCMCL_LW(NGPTLW,NCOL,NLAY)

! MCICA SW SPECIFIC
      REAL(KIND=RB)         :: CLDFMCL_SW(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: CIWPMCL_SW(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: CLWPMCL_SW(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: TAUCMCL_SW(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: SSACMCL(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: ASMCMCL(NGPTSW,NCOL,NLAY)
      REAL(KIND=RB)         :: FSFCMCL(NGPTSW,NCOL,NLAY)



! LOCAL AEROSOL ARRAYS AND VARIABLES FOR INTERPOLATING TO RRTMG BANDS ! AND COMBINING SPECIES
!      REAL*8    :: OD_AER(NDUST+NAER+2)
!      REAL*8    :: SSA_AER(NDUST+NAER+2)
!      REAL*8    :: ASYM_AER(NDUST+NAER+2)
!      REAL*8    :: ANGST


      !=================================================================
      ! PREPARE INPUTS FOR RAD_DRIVER
      !=================================================================

      !CALL GET_SPECIES( .TRUE., THISMONTH, 'O3',  GMI_O3  )
      !CALL GET_SPECIES( .TRUE., THISMONTH, 'CH4', GMI_CH4 )

      !=================================================================
      ! PREPARE INPUTS FOR RRTMG
      !=================================================================

      ! INITIALIZE
      !PRINT *,'IN RRTMG_RAD'
      NSPEC = NAER+NDUST+4
      FLG_FIRST_STRAT(:) = 0 !FLAG TO DETERMINE IF THE FIRST STRATOSPHERIC LEVEL HAS BEEN REACHED
 
      !DETERMINE IF WE ARE RUNNING WITH AEROSOL
      !CREATE INDEX FOR AEROSOLS REQUIRED
      LOUTPUTAERO=.TRUE. !SET AEROSOL DIAG OUTPUT TO TRUE INITIALLY
      DOAERAD = .FALSE.
      NASPECRAD_ON = 0
      IASPECRAD_ON(:) = 0
      DO N=1,NASPECRAD
       IF (SPECMASK(N).GT.0) THEN
        DOAERAD = .TRUE.
        NASPECRAD_ON = NASPECRAD_ON +1
        IASPECRAD_ON(NASPECRAD_ON) = N
        IDIAGOUT = MAX(IDIAGOUT,SPECMASK(N))
        
       ENDIF
      ENDDO
!      WRITE(6,*) 'CURRENT SPEC:',NASPECRAD_ON
!      WRITE(6,*) IASPECRAD_ON
      !SET UP THE SW WAVELENGTH REQUIRED FOR AOD OUTPUT
      !CONVERT FROM LUT INDEX TO IB_SW
      DO N=1,NWVSELECT
       IRTWVSELECT(N)=IWVSELECT(N)-23
      ENDDO 
      TAUCLD(:,:) = 0.0
      CLDFR(:,:) = 0.0
      RELIQ(:,:) = 0.0
      REICE(:,:) = 0.0
      CLIQWP(:,:) = 0.0
      CICEWP(:,:) = 0.0
      TAUAER_LW(:,:,:) = 0.0
      TAUAER_SW(:,:,:) = 0.0
      SSAAER(:,:,:) = 0.0
      ASMAER(:,:,:) = 0.0
      TAUAERDIAG(:,:,:) = 0.0D0
      SSAAERDIAG(:,:,:) = 0.0D0
      ASMAERDIAG(:,:,:) = 0.0D0
        UFLX(:,:) = 0.0
        DFLX(:,:) = 0.0
        HR(:,:) = 0.0
        UFLXC(:,:) = 0.0
        DFLXC(:,:) = 0.0
        HRC(:,:) = 0.0
        DUFLX_DT(:,:) = 0.0
        DUFLXC_DT(:,:) = 0.0

        SWUFLX(:,:) = 0.0
        SWDFLX(:,:) = 0.0
        SWHR(:,:) = 0.0
        SWUFLXC(:,:) = 0.0
        SWDFLXC(:,:) = 0.0
        SWHRC(:,:) = 0.0

      NBNDS = NBNDLW+NBNDSW

!!X$OMP PARALLEL DO
!!X$OMP+DEFAULT( SHARED )
!!X$OMP+PRIVATE( I, J, IJLOOP, IB, IB_SW)
      DO J = 1, JJPAR
      DO I = 1, IIPAR
         ! 1-D INDEX
         IJLOOP         = (J-1)*IIPAR+I
       !BROADBAND ALBEDO
       ALBDIRVIS(IJLOOP) = ALBDIR(I,J,1)
       ALBDIFVIS(IJLOOP) = ALBDIF(I,J,1)
       ALBDIRNIR(IJLOOP) = ALBDIR(I,J,2)
       ALBDIFNIR(IJLOOP) = ALBDIF(I,J,2)
       IF ((ALBDIRVIS(IJLOOP).GT.0.999).OR.
     &  (ALBDIRVIS(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DRVIS OUT OF RANGE',I,J,
     &              ALBDIRVIS(IJLOOP)
       ENDIF
       IF ((ALBDIFVIS(IJLOOP).GT.0.999).OR.
     &  (ALBDIFVIS(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DFVIS OUT OF RANGE',I,J,
     &    ALBDIFVIS(IJLOOP)
       ENDIF
       IF ((ALBDIRNIR(IJLOOP).GT.0.999).OR.
     &  (ALBDIRNIR(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DRNIR OUT OF RANGE',I,J,
     &    ALBDIRNIR(IJLOOP)
       ENDIF
       IF ((ALBDIFNIR(IJLOOP).GT.0.999).OR.
     &  (ALBDIFNIR(IJLOOP).LT.0.001)) THEN
        WRITE(6,*) 'ALBEDO DFNIR OUT OF RANGE',I,J,
     &   ALBDIFNIR(IJLOOP)
       ENDIF

      DO IB= 1, NBNDS
         IB_SW = IB-NBNDLW
         IF ( IB .LE. 16) THEN
          RTEMISS(IJLOOP,IB)     = EMISS(I,J,IB)
         ENDIF
      ENDDO
      ENDDO
      ENDDO
!!X$OMP END PARALLEL DO

      !I DONT THINK FUNCTION CALLS CAN BE PARALLELIZED
      !GET PCENTER, PEDGE AND DETERMINE IF IN TROP BEFORE PARALLEL LOOP
      DO I = 1, IIPAR
      DO J = 1, JJPAR
      IJLOOP         = (J-1)*IIPAR+I
      DO L = 1, LLPAR
         PCENTER(IJLOOP,L) = GET_PCENTER( I, J, L )
         PEDGE  (IJLOOP,L) = GET_PEDGE  ( I, J, L )
         H2OVMR (IJLOOP,L) = AVGW(I,J,L)
         TLAY   (IJLOOP,L) = T(I,J,L)
         INTROP (I,J,L) = ITS_IN_THE_TROP( I, J, L )
      ENDDO
      TSFC   (IJLOOP)   = TSKIN(I,J)

!         O3COL(I,J) = GET_OVERHEAD_O3(I,J)
!         CALL SET_PROF_O3 (I,J,YLAT,THISMONTH,THISDAY,T(I,J,:),O3COL)
      ENDDO
      ENDDO
!!X$OMP PARALLEL DO
!!X$OMP+DEFAULT( SHARED )
!!X$OMP+PRIVATE( I, J, L, IJLOOP, JLOOP, AIR_TMP )
!!X$OMP+PRIVATE( YLAT, O3COL)
      DO L = 1, LLPAR
      DO J = 1, JJPAR
      DO I = 1, IIPAR
       
       ! 1-D INDEX
       IJLOOP         = (J-1)*IIPAR+I
       !PCENTER(I,J,L) = GET_PCENTER( I, J, L )
       !PEDGE  (I,J,L) = GET_PEDGE  ( I, J, L )
       !INTROP (I,J,L) = ITS_IN_THE_TROP(I,J,L)      
       !IF (.FALSE.) THEN
       IF (INTROP(I,J,L).EQ..TRUE.) THEN 
            !-----------------------------
            ! WE ARE IN THE TROPOSPHERE
            !-----------------------------

            ! SET O3, CH4, N2O AND CFC PROFILES
            ! G-C CHEMISTRY IS ONLY DONE IN THE TROP
            ! THEREFORE CSPEC WILL ONLY BE DEFINED IN THE TROP
            ! 1-D INDEX FOR CSPEC ARRAY
            JLOOP = JLOP(I,J,L)
            !IF OZONE NOT SELECTED THEN SPECMASK WILL BE ZERO
            O3VMR(IJLOOP,L)  = (CSPEC(JLOOP,IDO3)/AIRDENS(JLOOP))*
     &                         SPECMASK(NASPECRAD+1) !GASES COME AFTER AEROSOL
            CH4VMR(IJLOOP,L) = CSPEC(JLOOP,ICH4)/AIRDENS(JLOOP)*
     &                         SPECMASK(NASPECRAD+2)
            N2OVMR(IJLOOP,L) = N2OCLIM(I,J,L)/1E9

            !CFC CLIMATOLOGY FROM UARS AND MIPAS
            CFC11VMR(IJLOOP,L) = CFC11CLIM(I,J,L)/1E9
            CFC12VMR(IJLOOP,L) = CFC12CLIM(I,J,L)/1E9
            CCL4VMR(IJLOOP,L)  = CCL4CLIM(I,J,L)/1E9
            CFC22VMR(IJLOOP,L) = CFC22CLIM(I,J,L)/1E9


            TAUCLD(IJLOOP,L) = TAUCLI(I,J,L)+TAUCLW(I,J,L)
            CLDFR(IJLOOP,L) =  CLDF(I,J,L)
            ALBVIS(IJLOOP)   = ALBD(I,J)
                         

            !-----------------------------
            ! GET CLOUD PROPERTIES BY SETTING REASONABLE VALUES FOR REL
            ! AND REI IN MICRONS AND CALCULATING LWP AND IWP FROM
            ! VISIBLE OPTICAL DEPTH  (IN G/M2)
            ! THIS IS A DIFERENT APPROACH THAN THAT USED UP THROUGH
            ! OCTOBER, WHERE WE TRIED TO USED THE CLOUD LIQUID AND ICE
            ! MIXING RATIOS TO GET LWP AND IWP. NOTE THAT RHO IN G/CM3
            ! AND RE IN MICRONS MAKE THE CXXXWP VARIABLES COME OUT IN
            ! G/M2.
            !-----------------------------

            !-----------------------------
            ! SET RE VALUES TO AVOID PROBLEMS IN CLOUD CODE

            IF (ICLD.NE.0) THEN
             ! LIQUID
             CLIQWP(IJLOOP,L) = 0.667*TAUCLW(I,J,L)*RHOLIQ*REL_DEF
             RELIQ(IJLOOP,L) = REL_DEF
             ! ICE
             CICEWP(IJLOOP,L) = 0.667*TAUCLI(I,J,L)*RHOICE*REI_DEF
             REICE(IJLOOP,L) = REI_DEF
            ENDIF !CLOUDS
       ELSE
           !-----------------------------
           ! WE ARE IN THE STRATOSPHERE
           !-----------------------------

           !! DENSITY OF AIR IN G/CM2
           AIR_TMP = AIRDEN(L,I,J)*BXHEIGHT(I,J,L)*1.0E-1
           !! DENSITY OF AIR IN MOLEC/CM2
           AIR_TMP = AVG*AIR_TMP/WTAIR
           O3COL = GET_OVERHEAD_O3(I,J)
           CALL SET_PROF_O3 (I,J,YLAT,THISMONTH,THISDAY,T(I,J,:),O3COL)
           O3VMR(IJLOOP,L) = DO3(L)/AIR_TMP

            !GET SCALINGS IF THIS IS THE FIRST LEVEL IN THE STRAT
            IF (FLG_FIRST_STRAT(IJLOOP).EQ.0) THEN
                FLG_FIRST_STRAT(IJLOOP) = 1
                CH4SCL(IJLOOP) = (CSPEC(JLOOP,ICH4)/AIRDENS(JLOOP))/
     &             (CH4CLIM(I,J,L)/1E9)
            ENDIF
            
            !TES PROFILES INTERPOLATED TO GC GRID WHEN SAVED
            !SO WE JUST NEED TO SCALE TO CURRENT CONC AT TOP OF TROP
              
            CH4VMR(IJLOOP,L) = CH4SCL(IJLOOP)*CH4CLIM(I,J,L)/1E9
            N2OVMR(IJLOOP,L) = N2OCLIM(I,J,L)/1E9

            !CFC CLIMATOLOGY FROM UARS AND MIPAS
            CFC11VMR(IJLOOP,L) = CFC11CLIM(I,J,L)/1E9
            CFC12VMR(IJLOOP,L) = CFC12CLIM(I,J,L)/1E9
            CCL4VMR(IJLOOP,L)  = CCL4CLIM(I,J,L)/1E9
            CFC22VMR(IJLOOP,L) = CFC22CLIM(I,J,L)/1E9
       ENDIF
       !ENDIF
      ENDDO
      ENDDO
      ENDDO
!!X$OMP END PARALLEL DO
      IF (DOAERAD) THEN
       DO IB = 1,NBNDS
        !RRTMG WAVEBANDS START AT I=8 IN GC ARRAYS
        !IN SAME ORDER, SO JUST OFFSET
        IBX=IB+7
        IB_SW = IB-NBNDLW
        DO IS = 1,NASPECRAD
         !THE AEROSOL SPECIES WE ARE CURRENTLY CALCULATING FOR WILL BE
         !SET TO THE LSPECRADMENU VALUE FOR THAT SPECIES.
         !THIS MEANS THAT RRTMG REQUIRES *ALL OTHER* SPECIES SO THAT THE
         !FLUX IN ABSENCE OF THE SPECIES CAN BE CALCULATED
         !THEREFORE WE COMPILE TWO SETS OF AEROSOL PROPERTIES:
         !(1) ALL BUT THE CURRENT SPECIES TO SEND TO RRTMG
         !(2) THE CURRENT SPECIES FOR OUTPUT TO THE RT DIAGNOSTICS
         ! WE MUST MERGE AEROSOL PROPERTIES FOR THE SPECIES TO BE OUTPUT
         ! (I.E. COMBINE HYDROPHILIC/PHOBIC AND MULTIPLE SIZES FOR THE SAME) 
!!X$OMP PARALLEL DO
!!X$OMP+DEFAULT( SHARED )
!!X$OMP+PRIVATE( I, J, L, IJLOOP)
         DO L = 1, LLPAR
         DO J = 1, JJPAR
         DO I = 1, IIPAR
          ! 1-D INDEX
          IJLOOP = (J-1)*IIPAR+I       
          IF (INTROP(I,J,L).EQ..TRUE.) THEN 
           IF (IB.LE.16) THEN !LW
            IF (SPECMASK(IS).EQ.1) THEN
                  TAUAER_LW(IJLOOP,L,IB) = TAUAER_LW(IJLOOP,L,IB) +
     &                           RTODAER(I,J,L,IBX,IS)
            ENDIF
           ELSE !SW
            !IF SPECMASK(IS)=1 THEN WE AGGREGATE THAT SPECIES FOR RRTMG
            !IF SPECMASK(IS)>1 THEN WE SAVE THAT SPECIES FOR DIAG OUTPUT
            IF (SPECMASK(IS).EQ.1) THEN
             TAUAER_SW(IJLOOP,L,IB_SW)=TAUAER_SW(IJLOOP,L,IB_SW)+
     &                       RTODAER(I,J,L,IBX,IS)
             SSAAER(IJLOOP,L,IB_SW) =  SSAAER(IJLOOP,L,IB_SW) + 
     &                       RTSSAER(I,J,L,IBX,IS)*RTODAER(I,J,L,IBX,IS)
             ASMAER(IJLOOP,L,IB_SW) = ASMAER(IJLOOP,L,IB_SW) +
     &                     RTASYMAER(I,J,L,IBX,IS) *
     &                     RTODAER(I,J,L,IBX,IS)*RTSSAER(I,J,L,IBX,IS)
            ENDIF 
            IF (SPECMASK(IS).GT.1) THEN
             TAUAERDIAG(IJLOOP,L,IB_SW)=TAUAERDIAG(IJLOOP,L,IB_SW)+
     &                       RTODAER(I,J,L,IBX,IS)
             SSAAERDIAG(IJLOOP,L,IB_SW) = SSAAERDIAG(IJLOOP,L,IB_SW) +
     &                       RTSSAER(I,J,L,IBX,IS)*RTODAER(I,J,L,IBX,IS)
             ASMAERDIAG(IJLOOP,L,IB_SW) = ASMAERDIAG(IJLOOP,L,IB_SW) +
     &                     RTASYMAER(I,J,L,IBX,IS) *
     &                     RTODAER(I,J,L,IBX,IS)*RTSSAER(I,J,L,IBX,IS)
              !TAUAERDIAG(IJLOOP,L,IB_SW) = 1.0D0
              !ASMAERDIAG(IJLOOP,L,IB_SW) = 0.02D0
              !SSAAERDIAG(IJLOOP,L,IB_SW) = 0.99D0*0.02D0
            ENDIF
           ENDIF 
          ENDIF
         ENDDO
         ENDDO
         ENDDO
!!X$OMP END PARALLEL DO 
        ENDDO !SPECIES
        !NOW AEROSOL HAVE BEEN SUMMED AND WEIGHTED BY AOD AND SSA
        !DIVIDE THROUGH BY TOTAL AOD (FOR SSA) AND AOD*SSA (FOR ASYM)
        IF (IB.GT.16) THEN !SW

!SWITCHING THIS OMP ON HALVES THE OPTICS VALUES FOR SOME UNKNOWN REASON.
!THE BENEFIT OF HAVING IT SWITCHED ON IS ~1% REDUCTION IN PROCESSING
!TIME SO CURRENTLY DOING WITHOUT PARALLELIZING THIS. DAR 02/2013
!!!!!$OMP PARALLEL DO
!!!!!$OMP+DEFAULT( SHARED )
!!!!!$OMP+PRIVATE( I, J, L, IJLOOP )

         DO L = 1, LLPAR
         DO J = 1, JJPAR
         DO I = 1, IIPAR
         IJLOOP = (J-1)*IIPAR+I       
          IF (INTROP(I,J,L).EQ..TRUE.) THEN 
           IF ((TAUAER_SW(IJLOOP,L,IB_SW).GT.0).AND.
     $        (    SSAAER(IJLOOP,L,IB_SW).GT.0)) THEN
              !DIVIDE SUM(ASYM*SSA*OD) BY SUM(SSA*OD) TO GET 
              !OD*SSA WEIGHTED ASYM
              ASMAER(IJLOOP,L,IB_SW) = ASMAER(IJLOOP,L,IB_SW) /
     &                                 SSAAER(IJLOOP,L,IB_SW)
              !DIVIDE SUM(SSA*OD) BY SUM(OD) TO GET OD WEIGHTED SSA
              SSAAER(IJLOOP,L,IB_SW) = SSAAER(IJLOOP,L,IB_SW) / 
     &                                 TAUAER_SW(IJLOOP,L,IB_SW)
           ENDIF
                !AND DO THE SAME FOR THE SPECIES WE'RE INTERESTED IN
           IF ((TAUAERDIAG(IJLOOP,L,IB_SW).GT.0).AND.
     $        ( SSAAERDIAG(IJLOOP,L,IB_SW).GT.0)) THEN
              !DIVIDE SUM(ASYM*SSA*OD) BY SUM(SSA*OD) TO GET
              !OD*SSA WEIGHTED ASYM
              ASMAERDIAG(IJLOOP,L,IB_SW) = ASMAERDIAG(IJLOOP,L,IB_SW) /
     &                                     SSAAERDIAG(IJLOOP,L,IB_SW)
              !DIVIDE SUM(SSA*OD) BY SUM(OD) TO GET OD WEIGHTED SSA
              SSAAERDIAG(IJLOOP,L,IB_SW) = SSAAERDIAG(IJLOOP,L,IB_SW) /
     &                                     TAUAERDIAG(IJLOOP,L,IB_SW)
           ENDIF
          ENDIF
         ENDDO
         ENDDO
         ENDDO
!!!!!$OMP END PARALLEL DO
        ENDIF
       ENDDO !BAND
      ELSE
       !NO AEROSOL, SET ALL TO SAFE VALUES
!!X$OMP PARALLEL DO
!!X$OMP+DEFAULT( SHARED )
!!X$OMP+PRIVATE( I, J, L, IB, IJLOOP, JLOOP, IB_SW)
       DO IB= 1, NBNDS
        IB_SW = IB-NBNDLW
        DO L = 1, LLPAR
        DO J = 1, JJPAR
        DO I = 1, IIPAR
         ! 1-D INDEX
         IJLOOP = (J-1)*IIPAR+I       
         IF (INTROP(I,J,L).EQ..TRUE.) THEN 
          IF (IB.LE.16) THEN
           TAUAER_LW(IJLOOP,L,IB)    = 0.0
          ELSE
           TAUAER_SW(IJLOOP,L,IB_SW) = 0.0D0
           SSAAER(IJLOOP,L,IB_SW)    = 0.99D0
           ASMAER(IJLOOP,L,IB_SW)    = 0.02D0
           TAUAERDIAG(IJLOOP,L,IB_SW) = 0.0D0
           SSAAERDIAG(IJLOOP,L,IB_SW) = 0.99D0
           ASMAERDIAG(IJLOOP,L,IB_SW) = 0.02D0
          ENDIF
         ENDIF
        ENDDO
        ENDDO
        ENDDO
       ENDDO
!!X$OMP END PARALLEL DO 
      ENDIF
      ! INITIALIZATION
      !IF (LLWRAD) THEN
!       CALL RRTMG_LW_INI
      !ENDIF
!      IF (LSWRAD) THEN
!       CALL RRTMG_SW_INI
!      ENDIF

      ! RAD_DRIVER IS THE INTERFACE BETWEEN G-C AND RRTMG
      DOY = GET_DAY_OF_YEAR()
      NCOL = IIPAR*JJPAR
      ONECOL = 1

! GET LEVEL VALUES
       GCAIR = 1.0E-3*GASCON/AVOGAD
       DO I=1,NCOL
          PLEV(I,1) = PLEV_TEMP(I,1)     ! SET LOWEST LEVEL TO SURFACE PRESSURE
          TLEV(I,1) = TLAY(I,1)     ! SET LOWEST LEVEL TO LAYER TEMPERATURE  (KLUDGE)
          PLEV(I,NLAY+1) = PLAY(I,NLAY)
          TLEV(I,NLAY+1) = TLAY(I,NLAY)
          DO L=2,NLAY
             RHOA = PLAY(I,L-1)/(GCAIR*TLAY(I,L-1))
             RHOB = PLAY(I,L)/(GCAIR*TLAY(I,L))
             RHOSUM = RHOA+RHOB
             PLEV(I,L) = (RHOA*PLAY(I,L-1)+RHOB*PLAY(I,L))/RHOSUM
             TLEV(I,L) = (RHOA*TLAY(I,L-1)+RHOB*TLAY(I,L))/RHOSUM
          END DO
       END DO

! FILL CO2, N2O AND O2 ARRAYS WITH REASONABLE ATMOSPHERIC VALUES

       CO2VMR(:,:) = 3.90E-4
!       N2OVMR(:,:) = 3.20E-7
       O2VMR(:,:) =  0.209

!!       SSACLD(:,:,:) = 0.0
!!       ASMCLD(:,:,:) = 0.0
!!       FSFCLD(:,:,:) = 0.0


       SELECT CASE (ICLD_GC)
!  CLOUD SETUP FOR CLEAR
       CASE (0)
          IDRV = 0
          ICLD = 0
          INFLGLW = 0
          INFLGSW = 0
          TAUCMCL_LW(:,:,:) = 0.0
          TAUCMCL_SW(:,:,:) = 0.0
          ICEFLGLW = 0
          LIQFLGLW = 0
          ICEFLGSW = 0
          LIQFLGSW = 0
          !PRINT *,'CLEAR'

!  CLOUD SETUP FOR MCICA CLOUD (ONLY OPTION NOW)
       CASE (1)
          IDRV = 0
          ICLD = 2                  !MAXIMUM RANDOM OVERLAP
          INFLGLW = 2
          INFLGSW = 2
          TAUCLD_LW(:,:,:) = 0.0    ! TAUCLD NOT USED
          TAUCLD_SW(:,:,:) = 0.0
          TAUCMCL_LW(:,:,:) = 0.0      ! USED ONLY AS A CHECK
          TAUCMCL_SW(:,:,:) = 0.0
          ICEFLGLW = 2       !STREAMER
          LIQFLGLW = 1       !HU AND STAMNES
          ICEFLGSW = 2       !STREAMER
          LIQFLGSW = 1       !HU AND STAMNES
!          PRINT *,'MCICA'
      END SELECT


! SET SOLAR VARIABLES
       COSZEN = SUNCOS
       DYOFYR = DOY

!$OMP PARALLEL DO
!$OMP+DEFAULT( SHARED )
!$OMP+PRIVATE( IL )
!$OMP+PRIVATE( TLAY0,TSFC0)
!$OMP+PRIVATE( H2OVMR0,SUNCOS0,PEDGE0,PCENTER0)
!$OMP+PRIVATE( O3VMR0, CH4VMR0, N2OVMR0)
!$OMP+PRIVATE( CFC11VMR0, CFC12VMR0, CFC22VMR0, CCL4VMR0)
!$OMP+PRIVATE( TAUCLD0,CLDFR0,CLIQWP0,CICEWP0)
!$OMP+PRIVATE( RELIQ0,REICE0)
!$OMP+PRIVATE( ALBDIRVIS0,ALBDIFVIS0,ALBDIRNIR0,ALBDIFNIR0)
!$OMP+PRIVATE( RTEMISS0)
!$OMP+PRIVATE( TAUAER_LW0,TAUAER_SW0,SSAAER0,ASMAER0)
!$OMP+PRIVATE( LW_UFLUX0,LW_DFLUX0,SW_UFLUX0,SW_DFLUX0)
!$OMP+PRIVATE( LW_UFLUXC0,LW_DFLUXC0,SW_UFLUXC0,SW_DFLUXC0)
!$OMP+SCHEDULE( DYNAMIC ) 
      DO IL=1, NCOL
       
      !CREATE COLUMN VARIABLES TO BE PASSED
      TLAY0(1,:)       = TLAY(IL,:)
      TSFC0(1)         = TSFC(IL)
      H2OVMR0(1,:)     = H2OVMR(IL,:)
      SUNCOS0(1)       = SUNCOS(IL)
      PEDGE0(1,:)      = PEDGE(IL,:)
      PCENTER0(1,:)    = PCENTER(IL,:)
      O3VMR0(1,:)      = O3VMR(IL,:)
      CH4VMR0(1,:)     = CH4VMR(IL,:)
      N2OVMR0(1,:)     = N2OVMR(IL,:)
      TAUCLD0(1,:)     = TAUCLD(IL,:)
      CLDFR0(1,:)      = CLDFR(IL,:)
      CLIQWP0(1,:)     = CLIQWP(IL,:)
      CICEWP0(1,:)     = CICEWP(IL,:)
      RELIQ0(1,:)      = RELIQ(IL,:)
      REICE0(1,:)      = REICE(IL,:)
      CFC11VMR0(1,:)   = CFC11VMR(IL,:)
      CFC12VMR0(1,:)   = CFC12VMR(IL,:)
      CFC22VMR0(1,:)   = CFC22VMR(IL,:)
      CCL4VMR0(1,:)    = CCL4VMR(IL,:)
      ALBDIRVIS0(1)    = ALBDIRVIS(IL)
      ALBDIFVIS0(1)    = ALBDIFVIS(IL)
      ALBDIRNIR0(1)    = ALBDIRNIR(IL)
      ALBDIFNIR0(1)    = ALBDIFNIR(IL)
      RTEMISS0(1,:)    = RTEMISS(IL,:)
      TAUAER_LW0(1,:,:)= TAUAER_LW(IL,:,:)
      TAUAER_SW0(1,:,:)= TAUAER_SW(IL,:,:)
      SSAAER0(1,:,:)   = SSAAER(IL,:,:)
      ASMAER0(1,:,:)   = ASMAER(IL,:,:)

        IF (LLWRAD) THEN
!        PRINT *,'WILL CALL RRTMG_LW'
        PERMUTESEED=ISEED+NGPTSW+1

        CALL MCICA_SUBCOL_LW 
     &        (IPLON,ONECOL,NLAY,ICLD,PERMUTESEED,IRNG,PLAY,
     &        CLDFR,CICEWP,CLIQWP,REICE,
     &        RELIQ,TAUCLD_LW,CLDFMCL,
     &        CIWPMCL, CLWPMCL, REICMCL, RELQMCL, TAUCMCL_LW)
        !WRITE(6,*) 'MCICA LW DONE'
        CALL RRTMG_LW 
     &       (ONECOL  ,NLAY    ,ICLD    ,IDRV    , 
     &        PLAY    ,PLEV    ,TLAY    ,TLEV    ,TSFC    , 
     &        H2OVMR  ,O3VMR   ,CO2VMR  ,CH4VMR  ,N2OVMR  ,O2VMR, 
     &        CFC11VMR,CFC12VMR,CFC22VMR,CCL4VMR ,EMIS    , 
     &        INFLGLW ,ICEFLGLW,LIQFLGLW,CLDFMCL   , 
     &        TAUCMCL_LW ,CIWPMCL ,CLWPMCL ,REICMCL ,RELQMCL   , 
     &        TAUAER_LW, UFLX,DFLX,HR,UFLXC,DFLXC,  HRC, 
     &        DUFLX_DT,DUFLXC_DT )

             LW_UFLUX = UFLX
             LW_DFLUX = DFLX
             LW_UFLUXC = UFLXC
             LW_DFLUXC = DFLXC
        ENDIF

        IF (LSWRAD) THEN

        PERMUTESEED=PERMUTESEED+NGPTLW+1
        CALL MCICA_SUBCOL_SW(IPLON, NCOL, NLAY, ICLD, 
     &                       PERMUTESEED, IRNG,PLAY, 
     &                       CLDFR, CICEWP, CLIQWP, REICE, RELIQ, 
     &                       TAUCLD_SW,SSACLD, ASMCLD, FSFCLD, 
     &                        CLDFMCL_SW, CIWPMCL_SW, CLWPMCL_SW, 
     &                        REICMCL,RELQMCL, TAUCMCL_SW, SSACMCL,
     &                        ASMCMCL, FSFCMCL)

        CALL RRTMG_SW 
     &       (NCOL    ,NLAY    ,ICLD    , 
     &        PLAY    ,PLEV    ,TLAY    ,TLEV    ,TSFC    , 
     &        H2OVMR  ,O3VMR   ,CO2VMR  ,CH4VMR  ,N2OVMR  ,O2VMR, 
     &        ASDIR   ,ASDIF   ,ALDIR   ,ALDIF   , 
     &        COSZEN  ,ADJES   ,DYOFYR  ,SCON    , 
     &        INFLGSW ,ICEFLGSW,LIQFLGSW,CLDFMCL_SW , 
     &        TAUCMCL_SW  ,SSACMCL  ,ASMCMCL  ,FSFCMCL  , 
     &        CIWPMCL_SW  ,CLWPMCL_SW  ,REICMCL   ,RELQMCL   , 
     &        TAUAER_SW  ,SSAAER  ,ASMAER  ,ECAER   , 
     &        SWUFLX  ,SWDFLX  ,SWHR    ,SWUFLXC ,SWDFLXC ,SWHRC)

             SW_UFLUX = SWUFLX
             SW_DFLUX = SWDFLX
             SW_UFLUXC = SWUFLXC
             SW_DFLUXC = SWDFLXC

        ENDIF


      !PUT COLUMN LW INTO THE 2D ARRAY
!OMP BARRIER
!      ITHR2 = OMP_GET_THREAD_NUM()
!      WRITE(6,*),'FLUX:',ITHR,ITHR2,SW_UFLUX0(1,1)
      LW_UFLUX(IL,:)  = LW_UFLUX0(1,:)
      LW_DFLUX(IL,:)  = LW_DFLUX0(1,:)
      LW_UFLUXC(IL,:) = LW_UFLUXC0(1,:)
      LW_DFLUXC(IL,:) = LW_DFLUXC0(1,:)
      SW_UFLUX(IL,:)  = SW_UFLUX0(1,:)
      SW_DFLUX(IL,:)  = SW_DFLUX0(1,:)
      SW_UFLUXC(IL,:) = SW_UFLUXC0(1,:)
      SW_DFLUXC(IL,:) = SW_DFLUXC0(1,:)


      ENDDO !NCOL
!$OMP END PARALLEL DO

      ! OUTPUT RADIATION VARIABLES TO DIAGNOSTIC
      ! IF CALC WITH AEROSOLS AND GASES COMPLETED
      ! USE ISPECMENU TO DETERMINE WHICH FLUX HAS BEEN CALCULATED
      ! IF =0 THEN WE JUST DID THE BASELINE FLUX
      IF (ISPECMENU.EQ.0) THEN
       OUTIDX = 1
      ELSE
        ! DIAGNOSTIC INDEX IS ISPECMENU+2 (BASELINE=1 SUM=2<-- NO LONGER
        ! EXISTS SO WE JUST LEAVE THIS BLANK)
        OUTIDX = ISPECMENU + 2
        !OUTIDX = IDIAGOUT + 2
      ENDIF

      !THE NUMBER OF ND71 OUTPUTS PER FIELD
      NAD71 = NSPECRADMENU + 2

      !FIRST CHECK IF WE HAVE ALREADY OUTPUT AEROSOL DIAGNOSTICS
      !(I.E. IF BOTH ALL-SKY AND CLEAR-SKY ARE SWITCHED ON)
      IF ((LSKYRAD(1)).AND.(LSKYRAD(2))) THEN
      !WE ONLY NEED TO OUTPUT DURING ONE OF THESE, SO DONT WHEN ICLD=0
       IF (ICLD.EQ.0) THEN
        LOUTPUTAERO=.FALSE.
       ENDIF
      ENDIF


!!X$OMP PARALLEL DO
!!X$OMP+DEFAULT( SHARED )
!!X$OMP+PRIVATE( I, J, LL, IJLOOP )
!!X$OMP+PRIVATE( AODTMP, SSATMP, ASYMTMP)
!!X$OMP+PRIVATE( AODOUT, SSAOUT, ASYMOUT)
      DO J=1,JJPAR
      DO I=1,IIPAR
       IJLOOP   = (J-1)*IIPAR+I
       IF (ICLD.GT.0) THEN
        !ALL-SKY (WE GET CLEAR-SKY WITH THIS TOO)
        !N.B. UPWELLING SHOULD BE NEGATIVE AS DOWN IS +VE
        AD71(I,J,OUTIDX) = AD71(I,J,OUTIDX) -  
     &                     SNGL(SW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+NAD71) = AD71(I,J,OUTIDX+NAD71) +
     &                     SNGL(SW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+2*NAD71) = AD71(I,J,OUTIDX+2*NAD71) -
     &                     SNGL(LW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+3*NAD71) = AD71(I,J,OUTIDX+3*NAD71) +
     &                     SNGL(LW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+4*NAD71) = AD71(I,J,OUTIDX+4*NAD71) -
     &                     SNGL(SW_UFLUXC(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+5*NAD71) = AD71(I,J,OUTIDX+5*NAD71) +
     &                     SNGL(SW_DFLUXC(IJLOOP,1))
        AD71(I,J,OUTIDX+6*NAD71) = AD71(I,J,OUTIDX+6*NAD71) -
     &                     SNGL(LW_UFLUXC(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+7*NAD71) = AD71(I,J,OUTIDX+7*NAD71) +
     &                     SNGL(LW_DFLUXC(IJLOOP,1))
       ELSE
        !CLEAR-SKY (RUNNING WITH CLOUDS OFF)
        AD71(I,J,OUTIDX+4*NAD71) = AD71(I,J,OUTIDX+4*NAD71) -
     &                     SNGL(SW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+5*NAD71) = AD71(I,J,OUTIDX+5*NAD71) +
     &                     SNGL(SW_DFLUX(IJLOOP,1))
        AD71(I,J,OUTIDX+6*NAD71) = AD71(I,J,OUTIDX+6*NAD71) -
     &                     SNGL(LW_UFLUX(IJLOOP,LLPAR+1))
        AD71(I,J,OUTIDX+7*NAD71) = AD71(I,J,OUTIDX+7*NAD71) +
     &                     SNGL(LW_DFLUX(IJLOOP,1))
       ENDIF
       !OUTPUT OPTICS FOR EACH
       !CHECK THAT WE HAVE SOME AEROSOL TO OUTPUT 
       !IF OUTIDX=1 THEN IT IS THE BASELINE WHICH NOW CONTAINS ALL
       !AEROSOL - IDEALLY THIS NEEDS DUMPING INTO THE PM TRACER
       !SKIP OUTIDX=3,4 (OZONE AND CH4)
       IF (((OUTIDX.LE.2).OR.(OUTIDX.GE.5)).AND.(LOUTPUTAERO)) THEN
       !INTERPOLATE TO THE REQUESTED WAVELENGTH       
      ! IF (NWVSELECT.GT.1) THEN
        AODTMP  = 0.0D0
        SSATMP  = 0.0D0
        ASYMTMP = 0.0D0
        AODOUT  = 0.0D0
        SSAOUT  = 0.0D0
        ASYMOUT = 0.0D0
        !! TEST IMPACT ON RTAOD OF ONLY GOING TO LEV=30
        DO LL=1,30 !!LLPAR
         !CHECK AOD IS NON-ZERO BEFORE LOG...
         IF((TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2)).GT.0).AND.
     &      (TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(1)).GT.0)) THEN
          AODTMP=SNGL(TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2))*ACOEF_WV**
     &           (BCOEF_WV*LOG(TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(1))/
     &            TAUAERDIAG(IJLOOP,LL,IRTWVSELECT(2)))))
          SSATMP=SNGL( CCOEF_WV*SSAAERDIAG(IJLOOP,LL,IRTWVSELECT(2))+
     &     (1.0D0-CCOEF_WV)*SSAAERDIAG(IJLOOP,LL,IRTWVSELECT(1)))*AODTMP
          
          ASYMTMP=SNGL( CCOEF_WV*ASMAERDIAG(IJLOOP,LL,IRTWVSELECT(2))+
     &     (1.0D0-CCOEF_WV)*ASMAERDIAG(IJLOOP,LL,IRTWVSELECT(1)))*SSATMP
          AODOUT=AODOUT+AODTMP
          SSAOUT=SSAOUT+SSATMP
          ASYMOUT=ASYMOUT+ASYMTMP
         ENDIF
        ENDDO
        !WE ARE SAVING COLUMN AVERAGED VALUES FOR EACH SPECIES
        !DIVIDE THROUGH BY NUMBER OF GRIDBOXES AND AOD*SSA
        ASYMOUT=ASYMOUT/SSAOUT
        !DIVIDE THROUGH BY NUMBER OF GRIDBOXES AND AOD
        SSAOUT=SSAOUT/AODOUT
!     $              OUTIDX,AODOUT,SSAOUT,ASYMOUT
        AD71(I,J,OUTIDX+8*NAD71) = AD71(I,J,OUTIDX+8*NAD71) +
     &                             AODOUT
        AD71(I,J,OUTIDX+9*NAD71) = AD71(I,J,OUTIDX+9*NAD71) +
     &                             SSAOUT
        AD71(I,J,OUTIDX+10*NAD71)= AD71(I,J,OUTIDX+10*NAD71) +
     &                             ASYMOUT
        
       ENDIF
      ENDDO 
      ENDDO
!!X$OMP END PARALLEL DO

!EOC
      END SUBROUTINE DO_RRTMG_RAD_TRANSFER

!******************************************************************************

      SUBROUTINE SET_SPECMASK(ISPECRADMENU)
!     THIS ROUTINE CONVERTS THE SPECIES SWITCHES IN THE INPUT.MOD
!     RADIATION SECTION INTO THE LIST OF SPECIES THAT SHOULD BE PASSED
!     THROUGH TO RRTMG. THIS MUST BE DONE IN A SUBTRACTIVE WAY, E.G. IF
!     WE REQUIRE THE DRE OF SULFATE THEN THE BASELINE WILL CONTAIN ALL
!     SPECIES AND THE SULFATE RUN WILL CONTAIN EVERYTHING BUT SULFATE,
!     THIS WAY THE CONTRIBUTION OF SULFATE CAN BE INFERRED. THEREFORE,
!     ALL SPECIES ARE INITIALLY SET TO 1 AND THEIR INCLUSION RESULTS IN
!     SPECMASK FOR THE PARTICULAR SPECIES BEING SET TO ZERO.

      USE JV_CMN_MOD,   ONLY :  SPECMASK,NASPECRAD,
     &                          LSPECRADMENU,NSPECRADMENU
      INTEGER, INTENT(IN)    :: ISPECRADMENU
      INTEGER                :: N0,N

      !CONVERT THE CURRENT SPECIES SELECTION FROM THE INPUT MENU INTO
      !THE REQUIRED SPECIES TO BE INCLUDED IN THE RRTMG CALCULATION
      SPECMASK(:)=1
      !IF ISPECRADMENU IS ZERO, WE JUST WANTED SPECMASK ZEROING, SO SKIP
      IF (ISPECRADMENU.GT.0) THEN
       !SET SINGLE SPECIES ON
       N0 = ISPECRADMENU
       N  = ISPECRADMENU
      DO I = N0, N
       IF(LSPECRADMENU(I).EQ.1) THEN 
       SELECT CASE( I )
       !OZONE
       CASE( 1 ) 
        SPECMASK(17)=0
        !WRITE(6,*) 'RT:OZONE'
       !METHANE
       CASE( 2 )
        SPECMASK(18)=0
        !WRITE(6,*) 'RT:CH4'
       !SU
       CASE( 3 )
        SPECMASK(1)=3
        !WRITE(6,*) 'RT:SU'
       !NI
       CASE( 4 )
        SPECMASK(2)=4
        !WRITE(6,*) 'RT:NI'
       !AM
       CASE( 5 )
        SPECMASK(3)=5
        !WRITE(6,*) 'RT:AM'
       !BC
       CASE( 6 )
        SPECMASK(4)=6
        SPECMASK(8)=6
        !WRITE(6,*) 'RT:BC'
       !OA
       CASE( 7 )
        SPECMASK(5)=7
        SPECMASK(9)=7
        !WRITE(6,*) 'RT:OA'
       !SS
       CASE( 8 )
        SPECMASK(6)=8
        SPECMASK(7)=8
        !WRITE(6,*) 'RT:SS'
       !DUST
       CASE( 9 )
        SPECMASK(10)=9
        SPECMASK(11)=9
        SPECMASK(12)=9
        SPECMASK(13)=9
        SPECMASK(14)=9
        SPECMASK(15)=9
        SPECMASK(16)=9
        !WRITE(6,*) 'RT:DU'
       !PM - ALL AEROSOL
       CASE( 10 )
        !SET ALL BUT GASES TO 0
        DO II = 1, NASPECRAD
         SPECMASK(II)=10
        ENDDO
       ! WRITE(6,*) 'RT:PM'
       END SELECT
       ENDIF
      ENDDO      
      ENDIF

      END SUBROUTINE SET_SPECMASK

!******************************************************************************

      SUBROUTINE READ_SURFACE_RAD(FORCEREAD)

!
!******************************************************************************
!  SUBROUTINE READ_SURFACE_RAD GETS THE SURFACE ALBEDO AND EMISSIVITY
!  FROM DATA FILES PROCESSED FROM MODIS MCD43C3.5 AND MOD11C2
!  ALBEDO IS DIRECT (BLACK SKY) AND DIFFUSE (WHITE SKY) AND INTERPOLATED
!  TO THE FIRST 21 WAVELENGTHS OF GADS, USED IN THE RRTMG CODE
!  EMISSIVITY HAS BEEN INTERPOLATED TO LAST 40 WAVELENGTHS OF GADS
!
!  THIS ROUTINE IS CALLED FROM MAIN.F WHEN ITS_TIME_FOR_SURFACE_RAD() IS
!  TRUE (EVERY 8 DAYS)
!  DAR (10/2012)
!******************************************************************************
      ! REFERENCES TO F90 MODULES
      USE BPCH2_MOD,     ONLY : GET_NAME_EXT_2D, GET_RES_EXT
      USE BPCH2_MOD,     ONLY : GET_TAU0,        READ_BPCH2
      USE DIRECTORY_MOD, ONLY : DATA_DIR
      USE TIME_MOD,      ONLY : GET_YEAR, GET_MONTH 
      USE TIME_MOD,      ONLY : GET_DAY,  GET_DAY_OF_YEAR  
      USE TIME_MOD,      ONLY : YMD_EXTRACT
      USE JULDAY_MOD,    ONLY : JULDAY, CALDATE

      USE CMN_SIZE_MOD        ! SIZE PARAMETERS
      USE JV_CMN_MOD

      LOGICAL, INTENT(IN), OPTIONAL :: FORCEREAD   ! RESET FIRST-TIME FLAG?

      ! LOCAL VARIABLES
      LOGICAL               :: DOREAD
      INTEGER               :: THISDAY, THISMONTH, THISYEAR
      INTEGER               :: THISDOFY, I, J
      INTEGER, SAVE         :: LASTDAY = -1
      REAL*4                :: ARRAY1(IIPAR,JJPAR)
      REAL*4                :: ARRAY2(IIPAR,JJPAR,NEMISS)
      REAL*8                :: XTAU
      CHARACTER(LEN=255)    :: FILENAME
      CHARACTER(LEN=4)      :: STHISYEAR
      CHARACTER(LEN=3)      :: STHISDOFY
      INTEGER               :: NYMD, NHMS
      REAL*8                :: JDNEW


      ! READ_SURFACE_RAD BEGINS HERE!
      !=================================================================
      !FLAG TO FORCE READ FROM CLOSEST DAY
      DOREAD=.FALSE.
      ! RESET THE FIRST FLAG IF
      IF ( PRESENT( FORCEREAD ) ) THEN
         IF ( FORCEREAD ) DOREAD = .TRUE.
      ENDIF


      ! TAU FOR READING THE BPCH FILES
      ! FIX YEAR AS 2002 FOR CLIMATOLOGY
      THISYEAR  = 2002 !GET_YEAR()
      THISMONTH = GET_MONTH()
      THISDOFY  = GET_DAY_OF_YEAR()
      THISDAY   = GET_DAY() 
      
      !FORCE READ OF CLOSEST FILE
      IF ( DOREAD ) THEN
       !NUMBER OF DAYS UNTIL NEXT FILE
       DAYSAWAY = 9 - MOD(THISDOFY,8)
       !READ CLOSEST 8-DAY FILE
       IF ( DAYSAWAY .GE. 4) THEN
        THISDOFY = THISDOFY - (8 - DAYSAWAY)
       ELSE
        THISDOFY = THISDOFY + DAYSAWAY
       ENDIF
      ENDIF

       ! CALCULATE NEW MONTH AND DAY FROM JULIAN DAY (CLH)
      JDNEW = THISDOFY + JULDAY(THISYEAR, 1, 0D0)
      CALL CALDATE(JDNEW, NYMD, NHMS)
      CALL YMD_EXTRACT( NYMD, THISYEAR, THISMONTH, THISDAY )

      IF ( THISDOFY == LASTDAY ) THEN
       WRITE(6,*) 'SURFACE RAD ALREADY READ', 
     &            THISDAY,THISMONTH,THISYEAR
       RETURN
      ENDIF
      WRITE(STHISDOFY,101) THISDOFY
101   FORMAT( I3.3 )
      WRITE(STHISYEAR,102) THISYEAR
102   FORMAT( I4.4 )
      XTAU      = GET_TAU0( THISMONTH, THISDAY, THISYEAR )


      ! FILENAME AND TIME
      FILENAME  = TRIM( DATA_DIR )         //
     &            'MODIS_SURF_201210/' //
     &            'MODIS_SURF_02-07_' //
     &            STHISDOFY//'.'// GET_RES_EXT()

      ! ECHO INFO
      WRITE( 6, 100 ) TRIM( FILENAME )
 100  FORMAT( '     - GET_SURFACE_RAD_DATA: READING ', A )
      !WRITE( 6,*) 'XTAU: ',XTAU
      !-----------------------
      ! DIRECT SURFACE ALBEDO (VIS)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 71,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIR(I,J,1) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIR1 READ'
      !-----------------------
      ! DIFFUSE SURFACE ALBEDO (VIS)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 73,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIF(I,J,1) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIF1 READ'
      !-----------------------
      ! DIRECT SURFACE ALBEDO (NIR)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 72,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIR(I,J,2) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIR2 READ'
      !-----------------------
      ! DIFFUSE SURFACE ALBEDO (NIR)
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 74,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 1,     ARRAY1,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      DO I=1,IIPAR
      DO J=1,JJPAR
      ALBDIF(I,J,2) = ARRAY1(I,J)
      ENDDO
      ENDDO

      !WRITE(6,*) 'ALBDIF2 READ'
      !-----------------------
      ! SURFACE EMISSIVITY
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'MODAVG-$', 75,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 NEMISS,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      EMISS(:,:,:) = ARRAY2(:,:,:)

      !SAVE THIS DAY TO PREVENT RE-READ OF SAME FILE
      LASTDAY = THISDOFY
      WRITE(6,*) 'SURFACE REFLECTIVITY READ SUCCESSFULLY'
      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE

!******************************************************************************

      SUBROUTINE READ_STRAT_CLIM()

!
!******************************************************************************
!  SUBROUTINE READ_STRAT_CLIM GETS THE STORED N2O AND CH4 PROFILES
!  CREATED BASED ON TES CLIMATOLOGY.
!  THESE ARE GLOBAL JULY MEAN PROFILES FROM TES THAT ARE 
!  INTERPOLATED TO THE 3D GEOS-CHEM GRID AS A SIMPLE SOLUTION TO
!  ACCOUNT FOR STRATOSPHERIC CONTRIBUTION OF THESE SPECIES TO RADIATIVE
!  BALANCE.
!
!  THIS ROUTINE IS CALLED FROM MAIN.F ONE AT THE START OF THE MODEL RUN
!  DAR (12/2012)
!******************************************************************************
      ! REFERENCES TO F90 MODULES
      USE BPCH2_MOD,     ONLY : GET_NAME_EXT_2D, GET_RES_EXT
      USE BPCH2_MOD,     ONLY : GET_TAU0,        READ_BPCH2
      USE DIRECTORY_MOD, ONLY : DATA_DIR
      USE TIME_MOD,      ONLY : GET_YEAR, GET_MONTH
      USE TIME_MOD,      ONLY : GET_DAY,  GET_DAY_OF_YEAR
      USE TRANSFER_MOD,  ONLY : TRANSFER_3D

      USE CMN_SIZE_MOD        ! SIZE PARAMETERS
      USE JV_CMN_MOD


      ! LOCAL VARIABLES
      LOGICAL               :: DOREAD
      REAL*4                :: ARRAY2(IIPAR,JJPAR,LGLOB)
      REAL*8                :: XTAU
      CHARACTER(LEN=255)    :: FILENAME


      ! READ_STRAT_CHEM BEGINS HERE!
      !=================================================================

      ! FILENAME AND TIME
      FILENAME  = TRIM( DATA_DIR )         //
!     &            'STRAT_CHEM_201206/' //
     &            'SPECIES_CLIM_PROFILES' //
     &            '.'// GET_RES_EXT()

      ! ECHO INFO
      WRITE( 6, 100 ) TRIM( FILENAME )
 100  FORMAT( '     - GET_TES_STRAT_CLIM: READING ', A )

      XTAU      = GET_TAU0( 1, 1, 2000 )
      WRITE(6,*) XTAU,LLPAR
      !-----------------------
      ! N2O
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 71,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, N2OCLIM )

      !-----------------------
      ! CH4
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 72,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CH4CLIM)

      WRITE(6,*) 'CFC MIPAS & UARS CLIMATOLOGY READ SUCCESSFULLY'

      !-----------------------
      ! CFC11
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 73,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC11CLIM )

      !-----------------------
      ! CFC12
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 74,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC12CLIM)

      !-----------------------
      ! CCL4
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 75,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CCL4CLIM )

      !-----------------------
      ! CFC22
      !-----------------------
      CALL READ_BPCH2( FILENAME, 'O3CLIM-$', 76,
     &                 XTAU,      IIPAR,    JJPAR,
     &                 LGLOB,     ARRAY2,    QUIET=.TRUE. )

      ! CAST TO REAL*8 AND RESIZE
      CALL TRANSFER_3D( ARRAY2, CFC22CLIM)

     

      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE

!******************************************************************************


!------------------------------------------------------------------------------

      SUBROUTINE INIT_SURFACE_RAD
!
!******************************************************************************
!  SUBROUTINE INIT_SURFACE_RAD INITIALIZES ALL ALLOCATABLE MODULE ARRAYS.
!******************************************************************************
!
      ! REFERENCES TO F90 MODULES
      USE ERROR_MOD, ONLY : ALLOC_ERR
      USE JV_CMN_MOD
      USE CMN_SIZE_MOD

      ! LOCAL VARIABLES
      INTEGER :: AS

      !=================================================================
      ALLOCATE( ALBDIR( IIPAR, JJPAR, NALBD ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'ALBDIR' )
      ALBDIR = 0D0

      ALLOCATE( ALBDIF( IIPAR, JJPAR, NALBD ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'ALBDIF' )
      ALBDIF = 0D0

      ALLOCATE( EMISS( IIPAR, JJPAR, NEMISS ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'EMISS' )
      EMISS = 0D0

      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE INIT_SURFACE_RAD

!------------------------------------------------------------------------------

      SUBROUTINE INIT_STRAT_CLIM
!
!******************************************************************************
!  SUBROUTINE INIT_STRAT_CLIM INITIALIZES ALL ALLOCATABLE MODULE ARRAYS.
!******************************************************************************
!
      ! REFERENCES TO F90 MODULES
      USE ERROR_MOD, ONLY : ALLOC_ERR
      USE JV_CMN_MOD
      USE CMN_SIZE_MOD

      ! LOCAL VARIABLES
      INTEGER :: AS

      !=================================================================
      ALLOCATE( N2OCLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'N2OCLIM' )
      N2OCLIM = 0D0

      ALLOCATE( CH4CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CH4CLIM' )
      CH4CLIM = 0D0

      ALLOCATE( CFC11CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC11CLIM' )
      CFC11CLIM = 0D0

      ALLOCATE( CFC12CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC12CLIM' )
      CFC12CLIM = 0D0

      ALLOCATE( CCL4CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CCL4CLIM' )
      CCL4CLIM = 0D0

      ALLOCATE( CFC22CLIM( IIPAR, JJPAR, LLPAR ), STAT=AS )
      IF ( AS /= 0 ) CALL ALLOC_ERR( 'CFC22CLIM' )
      CFC22CLIM = 0D0


      ! RETURN TO CALLING PROGRAM
      END SUBROUTINE INIT_STRAT_CLIM

!------------------------------------------------------------------------------


!
      SUBROUTINE CLEANUP_SURFACE_RAD
!
! !REVISION HISTORY:
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      !=================================================================
      ! CLEANUP_DAO BEGINS HERE!
      !=================================================================
      IF ( ALLOCATED( ALBDIR          ) ) DEALLOCATE( ALBDIR          )
      IF ( ALLOCATED( ALBDIF          ) ) DEALLOCATE( ALBDIF          )
      IF ( ALLOCATED( EMISS           ) ) DEALLOCATE( EMISS           )

      END SUBROUTINE CLEANUP_SURFACE_RAD

!------------------------------------------------------------------------------


!
      SUBROUTINE CLEANUP_STRAT_CLIM
!
! !REVISION HISTORY:
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!
      !=================================================================
      ! CLEANUP_DAO BEGINS HERE!
      !=================================================================
      IF ( ALLOCATED( CH4CLIM         ) ) DEALLOCATE( CH4CLIM         )
      IF ( ALLOCATED( N2OCLIM         ) ) DEALLOCATE( N2OCLIM         )
      IF ( ALLOCATED( CFC11CLIM       ) ) DEALLOCATE( CFC11CLIM       )
      IF ( ALLOCATED( CFC12CLIM       ) ) DEALLOCATE( CFC12CLIM       )
      IF ( ALLOCATED( CCL4CLIM        ) ) DEALLOCATE( CCL4CLIM        )
      IF ( ALLOCATED( CFC22CLIM       ) ) DEALLOCATE( CFC22CLIM       )


      END SUBROUTINE CLEANUP_STRAT_CLIM


      END MODULE RRTMG_RAD_TRANSFER_MOD
#ENDIF

