!------------------------------------------------------------------------------
!             Atmospheric and Environmental Research (AER Corp.)
!------------------------------------------------------------------------------
!BOP
!
! !ROUTINE: 
!
! !DESCRIPTION: 
!\\
!\\
! !INTERFACE:
!
SUBROUTINE rad_driver( IIPAR, JJPAR,   LLPAR, T,     TSKIN,    &
                       AVGW,  SUNCOS,  DOY,   PEDGE, PCENTER,  &
                       JLOP,  AIRDENS, CSPEC, ICH4,  IDO3,     &
                       TROPP, GMI_CH4, GMI_O3                 ) 
!
! !USES:
!

!
! !INPUT PARAMETERS: 
!
  ! Scalars
  REAL*8,  INTENT(IN) :: DOY
  INTEGER, INTENT(IN) :: IIPAR
  INTEGER, INTENT(IN) :: JJPAR
  INTEGER, INTENT(IN) :: LLPAR

  ! 2-D Arrays
  REAL*8,  INTENT(IN) :: TSKIN  (IIPAR,JJPAR      )
  REAL*8,  INTENT(IN) :: SUNCOS (IIPAR,JJPAR      )

  ! 3-D arrays
  REAL*8,  INTENT(IN) :: AVGW   (IIPAR,JJPAR,LLPAR)
  REAL*8,  INTENT(IN) :: PEDGE  (IIPAR,JJPAR,LLPAR)
  REAL*8,  INTENT(IN) :: PCENTER(IIPAR,JJPAR,LLPAR)
  REAL*8,  INTENT(IN) :: T      (IIPAR,JJPAR,LLPAR)



!
! !INPUT/OUTPUT PARAMETERS: 
!

!
! !OUTPUT PARAMETERS:
!

!
! !RETURN VALUE:
!

!
! !REMARKS:
! 
! 
! !REVISION HISTORY: 
!  01 Oct 1995 - R. Yantosca - Initial version
!  08 Dec 2009 - R. Yantosca - Added ProTeX headers
!EOP
!------------------------------------------------------------------------------
!BOC
!
! !LOCAL VARIABLES:
!

  use parkind, only : im=>kind_im, rb=>kind_rb
  use rrlw_con, only: gascon, avogad
  use parrrtm, only : nbndlw
  use parrrsw, only : nbndsw,naerec
  use rrtmg_lw_rad, only : rrtmg_lw
  use rrtmg_sw_rad, only : rrtmg_sw
  
  implicit NONE
!
! 
!
  ! Arguments


  ! Flags and dimensions
  integer (kind=im) :: ncol, nlay, icld, idrv
  parameter (ncol=iipar*jjpar,nlay=llpar)       !! iipar=nlon, jjpar=nlat
  integer (kind=im) :: inflglw, iceflglw,liqflglw
  integer (kind=im) :: inflgsw, iceflgsw,liqflgsw


! Profile variables
  real (kind=rb)  :: play(ncol,nlay)
  real (kind=rb)  :: plev(ncol,nlay+1)
  real (kind=rb)  :: tlay(ncol,nlay)
  real (kind=rb)  :: tlev(ncol,nlay+1)
  real (kind=rb)  :: h2ovmr(ncol,nlay)
  real (kind=rb)  :: o3vmr(ncol,nlay)
  real (kind=rb)  :: co2vmr(ncol,nlay)
  real (kind=rb)  :: ch4vmr(ncol,nlay)
  real (kind=rb)  :: n2ovmr(ncol,nlay)
  real (kind=rb)  :: o2vmr(ncol,nlay)
  real (kind=rb)  :: cfc11vmr(ncol,nlay)
  real (kind=rb)  :: cfc12vmr(ncol,nlay)
  real (kind=rb)  :: cfc22vmr(ncol,nlay)
  real (kind=rb)  :: ccl4vmr(ncol,nlay)
  
! Common cloud variables
  real (kind=rb)  :: cldfr(ncol,nlay)
  real (kind=rb)  :: cicewp(ncol,nlay)
  real (kind=rb)  :: cliqwp(ncol,nlay)
  real (kind=rb)  :: reice(ncol,nlay)
  real (kind=rb)  :: reliq(ncol,nlay)
  
! LW Surface variables
  real (kind=rb)  :: emis(ncol,nbndlw)
  real (kind=rb)  :: tsfc(ncol)

!  LW Cloud variables
  real (kind=rb)  :: taucld_lw(nbndlw,ncol,nlay)

! SW Surface variables
  real(kind=rb)  :: asdir(ncol)          ! UV/vis surface albedo direct rad
                                         !    Dimensions: (ncol)
  real(kind=rb) :: aldir(ncol)           ! Near-IR surface albedo direct rad
                                         !    Dimensions: (ncol)             
  real(kind=rb) :: asdif(ncol)           ! UV/vis surface albedo: diffuse rad
                                         !    Dimensions: (ncol)
  real(kind=rb) :: aldif(ncol)           ! Near-IR surface albedo: diffuse rad
                                         !    Dimensions: (ncol)
! SW solar variables
  integer(kind=im) :: dyofyr               ! Day of the year (used to get Earth/Sun
                                               !  distance if adjflx not provided)
  real(kind=rb)  :: adjes=1.0              ! Flux adjustment for Earth/Sun distance
  real(kind=rb)  :: coszen(ncol)           ! Cosine of solar zenith angle
                                               !    Dimensions: (ncol)
  real(kind=rb)  :: scon=1368.22           ! Solar constant (W/m2)

! SW cloud variables

  real(kind=rb)  :: taucld_sw(nbndsw,ncol,nlay)   ! In-cloud optical depth
                                                      !    Dimensions: (nbndsw,ncol,nlay)
  real(kind=rb)  :: ssacld(nbndsw,ncol,nlay)      ! In-cloud single scattering albedo
                                                      !    Dimensions: (nbndsw,ncol,nlay)
  real(kind=rb)  :: asmcld(nbndsw,ncol,nlay)      ! In-cloud asymmetry parameter
                                                      !    Dimensions: (nbndsw,ncol,nlay)
  real(kind=rb)  :: fsfcld(nbndsw,ncol,nlay)      ! In-cloud forward scattering fraction
                                                      !    Dimensions: (nbndsw,ncol,nlay)

! Aerosol variables
!  LW
  real (kind=rb)  :: tauaer_lw(nbndlw,ncol,nlay)

!SW
  real(kind=rb)   :: tauaer_sw(ncol,nlay,nbndsw)  ! Aerosol optical depth (iaer=10 only)
                                                      !    Dimensions: (ncol,nlay,nbndsw)
                                                      ! (non-delta scaled)      
  real(kind=rb)   :: ssaaer(ncol,nlay,nbndsw)     ! Aerosol single scattering albedo (iaer=10 only)
                                                      !    Dimensions: (ncol,nlay,nbndsw)
                                                      ! (non-delta scaled)      

  real(kind=rb) :: asmaer(ncol,nlay,nbndsw)       ! Aerosol asymmetry parameter (iaer=10 only)
                                                      !    Dimensions: !    (ncol,nlay,nbndsw)
  real(kind=rb) :: ecaer(ncol,nlay,naerec)        ! Aerosol optical depth at 0.55 micron (iaer=6 only)
                                                      !    Dimensions: !    (ncol,nlay,naerec)


! Longwave Flux variables
  real(kind=rb) :: uflx(ncol,nlay+1)         ! Total sky longwave upward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)

  real(kind=rb) :: dflx(ncol,nlay+1) ! Total sky longwave downward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: hr(ncol,nlay)   ! Total sky longwave radiative heating rate (K/d)
                                                      !    Dimensions:
                                                      !    (ncol,nlay)
  real(kind=rb) :: uflxc(ncol,nlay+1)! Clear sky longwave upward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: dflxc(ncol,nlay+1)! Clear sky longwave downward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: hrc(ncol,nlay) ! Clear sky longwave radiative heating rate (K/d)
                                                      !    Dimensions:
                                                      !    (ncol,nlay)

!- Optional Output
  real(kind=rb) :: duflx_dt(ncol,nlay)
                                                      ! change in upward  longwave flux  (w/m2/k)
                                                      ! with respect to  surface  temperature
                                                      !    Dimensions:     (ncol,nlay)
  real(kind=rb) :: duflxc_dt(ncol,nlay)
                                                      ! change in clear  sky upward  longwave flux  (w/m2/k)
                                                      ! with respect to  surface  temperature
                                                      !    Dimensions:
                                                      !    (ncol,nlay)

! Shortwave flux variables
! ----- Output -----

  real(kind=rb) :: swuflx(ncol,nlay+1)       ! Total sky shortwave upward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: swdflx(ncol,nlay+1)       ! Total sky shortwave downward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: swhr(ncol,nlay)         ! Total sky shortwave radiative heating rate (K/d)
                                                      !    Dimensions:
                                                      !    (ncol,nlay)
  real(kind=rb) :: swuflxc(ncol,nlay+1)      ! Clear sky shortwave upward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: swdflxc(ncol,nlay+1)      ! Clear sky shortwave downward flux (W/m2)
                                                      !    Dimensions:
                                                      !    (ncol,nlay+1)
  real(kind=rb) :: swhrc(ncol,nlay)        ! Clear sky shortwave radiative heating rate (K/d)
                                                      !    Dimensions:
                                                      !    (ncol,nlay)


! Local variables
  integer  :: i, j, l, jloop, ijloop
  real*8 :: gcair 
  real*8 :: rhoa, rhob, rhosum
  real*8 :: hr_temp

! Pressure related variables
  real*8   :: pcenter(iipar,jjpar,llpar),pedge(iipar,jjpar,llpar),plev_temp(ncol,nlay)

! Stratospheric variables
  real*8   :: gmi_o3(iipar,jjpar,llpar)
  real*8   :: gmi_ch4(iipar,jjpar,llpar)
   
!Shape array for reshaping arrays from 3D to 2D (nlon,nlat,nlay) to (ncol,nlay)
  integer :: ishape1(1) = (/ncol/)
  integer :: ishape2(2) = (/ncol,nlay/)

! Gridding is somewhat difficult
! GC provides variables at the center of grid boxes (including T and P)
! I will assume these are layer values (in RRTMG language) and calculate
! the values at the edges and call them level values (sort of backwards
! from what we usually do)


! Get pressure values at grid center  
  gcair = 1.0e-3*gascon/avogad
!  do j=1,jjpar
!     do i=1,iipar
!        do l=1,llpar
!           pcenter(i,j,l) = get_pcenter(i,j,l)
!           pedge(i,j,l) = get_pedge(i,j,l)
!        end do
!     end do
!  end do

! Reshape arrays from GC to reduce to 2D

       h2ovmr = reshape(avgw,ishape2)
       tlay = reshape(t,ishape2)
       play = reshape(pcenter,ishape2)
       plev_temp = reshape(pedge,ishape2)
       tsfc = reshape(tskin,ishape1)

! Get level values
       do i=1,ncol
          plev(i,1) = plev_temp(i,1)     ! set lowest level to surface pressure
          tlev(i,1) = tlay(i,1)     ! set lowest level to layer temperature  (KLUDGE)
          plev(i,nlay+1) = play(i,nlay)
          tlev(i,nlay+1) = tlay(i,nlay)
          do l=2,nlay
             rhoa = play(i,l-1)/(gcair*tlay(i,l-1))
             rhob = play(i,l)/(gcair*tlay(i,l))
             rhosum = rhoa+rhob
             plev(i,l) = (rhoa*play(i,l-1)+rhob*play(i,l))/rhosum
             tlev(i,l) = (rhoa*tlay(i,l-1)+rhob*tlay(i,l))/rhosum
          end do
       end do

             
! Read GMI monthly mean O3 and CH4 from GMI fields
       !CALL GET_SPECIES( .TRUE., THISMONTH, 'O3',  GMI_O3  )
       !CALL GET_SPECIES( .TRUE., THISMONTH, 'CH4', GMI_CH4 )

! Fill molecular arrays beyond water

       do j=1,jjpar
          do i=1,iipar
             ijloop = (j-1)*iipar+i
             do l=1,llpar
      ! Test if we are in the troposphere
                IF ( ITS_IN_THE_TROP( I, J, L ) ) THEN

          ! G-C chemistry is only done in the trop
          ! Therefore CSPEC will only be defined in the trop
          ! 1-D index for CSPEC array
                  JLOOP = JLOP(I,J,L)
                  o3vmr(ijloop,l) = cspec(jloop,ido3)/airdens(jloop)
                  ch4vmr(ijloop,l) = cspec(jloop,ich4)/airdens(jloop)

          ! Double check that JLOOP is valid, for safety's sake
                  IF ( JLOOP <= 0 ) CYCLE
                else 
                  !o3vmr(ijloop,l) = gmi_o3(i,j,l)
                  !ch4vmr(ijloop,l) = gmi_ch4(i,j,l)
                  o3vmr(ijloop,l) = 0.0
                  ch4vmr(ijloop,l) = 0.0
                ENDIF
                !if (j.eq.10.AND.l.eq.1) print *, o3vmr(ijloop,l),ch4vmr(ijloop,l)
                !if (j.eq.20.AND.l.eq.1) print *, o3vmr(ijloop,l),ch4vmr(ijloop,l)
             end do
          end do
       end do

! Fill co2, n2o and o2 arrays with reasonable atmospheric values   

       co2vmr(:,:) = 3.90e-4
       n2ovmr(:,:) = 3.20e-7
       o2vmr(:,:) =  0.209

! Turn off clouds for now
       emis(:,:) = 0.99
       icld = 0
       idrv = 0
       inflglw = 0
       iceflglw = 0
       liqflglw = 0
       inflgsw = 0
       iceflgsw = 0
       liqflgsw = 0

        print *,'h2ovmr '
        print *, size(h2ovmr,1)
        print *, size(h2ovmr,2)
        print *,'fill done'
             do l=1,nlay
                print *,play(1501,l),h2ovmr(1501,l),o3vmr(1501,l), &
               ch4vmr(1501,l)
             end do
! Set solar variables
       !coszen = suncos
       !dyofyr = get_day_of_year()

        print *,'call rrtmg_lw'
        call rrtmg_lw &
            (ncol    ,nlay    ,icld    ,idrv    , &
             play    ,plev    ,tlay    ,tlev    ,tsfc    , &
             h2ovmr  ,o3vmr   ,co2vmr  ,ch4vmr  ,n2ovmr  ,o2vmr, &
             cfc11vmr,cfc12vmr,cfc22vmr,ccl4vmr ,emis    , &
             inflglw ,iceflglw,liqflglw,cldfr   , &
             taucld_lw  ,cicewp  ,cliqwp  ,reice   ,reliq   , &
             tauaer_lw  , &
             uflx    ,dflx    ,hr      ,uflxc   ,dflxc,  hrc, &
             duflx_dt,duflxc_dt )
         
             print *, 'called rrtmg'
             do l=1,nlay
                print *,play(1501,l),o3vmr(1501,l),ch4vmr(1501,l)
             end do
             print *,'LW Flux ',ncol
             do i=1,ncol,100
                print *, i,tsfc(i)
                print *, uflx(i,1),uflx(i,nlay+1)
                print *, dflx(i,1),dflx(i,nlay+1)
             end do
             !do l=1,nlay
             !   print *,co2vmr(1501,l),o3vmr(1501,l)
             !end do

!       call rrtmg_sw &
!           (ncol    ,nlay    ,icld    , &
!            play    ,plev    ,tlay    ,tlev    ,tsfc    , &
!            h2ovmr  ,o3vmr   ,co2vmr  ,ch4vmr  ,n2ovmr  ,o2vmr, &
!            asdir   ,asdif   ,aldir   ,aldif   , &  
!            coszen  ,adjes   ,dyofyr  ,scon    , &  
!            inflgsw ,iceflgsw,liqflgsw,cldfr   , &  
!            taucld_sw  ,ssacld  ,asmcld  ,fsfcld  , &  
!            cicewp  ,cliqwp  ,reice   ,reliq   , &  
!            tauaer_sw  ,ssaaer  ,asmaer  ,ecaer   , &  
!            swuflx  ,swdflx  ,swhr    ,swuflxc ,swdflxc ,swhrc)
 
        stop
!         
!             print *,'SW Flux ',ncol
!             do i=1,ncol,100
!             print *,'here ', i
!             print *, coszen(i)
!             print *, swuflx(i,1),swuflx(i,nlay+1)
!             print *, swdflx(i,1),swdflx(i,nlay+1)
!             end do

        


        return

        end subroutine rad_driver
